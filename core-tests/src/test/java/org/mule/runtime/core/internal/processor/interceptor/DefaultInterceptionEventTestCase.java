/*
 * Copyright 2023 Salesforce, Inc. All rights reserved.
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package org.mule.runtime.core.internal.processor.interceptor;

import static org.mule.runtime.api.message.Message.of;
import static org.mule.runtime.core.api.event.EventContextFactory.create;

import static java.util.Optional.empty;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;

import org.mule.runtime.api.exception.MuleException;
import org.mule.runtime.core.internal.interception.DefaultInterceptionEvent;
import org.mule.runtime.core.internal.message.InternalEvent;
import org.mule.tck.junit4.AbstractMuleTestCase;

import org.junit.Test;

public class DefaultInterceptionEventTestCase extends AbstractMuleTestCase {

  @Test
  public void correlationIdAutogenerated() throws MuleException {
    final InternalEvent event =
        InternalEvent.builder(create("id", "serverId", TEST_CONNECTOR_LOCATION, null, empty()))
            .message(of(TEST_PAYLOAD)).build();

    final DefaultInterceptionEvent interceptionEvent = new DefaultInterceptionEvent(event);

    assertThat(interceptionEvent.getCorrelationId(), is("id"));
  }

  @Test
  public void correlationIdGiven() throws MuleException {
    final InternalEvent event =
        InternalEvent.builder(create("id", "serverId", TEST_CONNECTOR_LOCATION, "corr1", empty()))
            .message(of(TEST_PAYLOAD)).build();

    final DefaultInterceptionEvent interceptionEvent = new DefaultInterceptionEvent(event);

    assertThat(interceptionEvent.getCorrelationId(), is("corr1"));
  }

  @Test
  public void correlationIdLegacy() throws MuleException {
    final InternalEvent event =
        InternalEvent.builder(create("id", "serverId", TEST_CONNECTOR_LOCATION, null, empty()))
            .correlationId("corr1").message(of(TEST_PAYLOAD)).build();

    final DefaultInterceptionEvent interceptionEvent = new DefaultInterceptionEvent(event);

    assertThat(interceptionEvent.getCorrelationId(), is("corr1"));
  }

}
