diff --git a/core/src/main/java/org/mule/runtime/core/api/security/MuleSecurityManagerConfigurator.java b/core/src/main/java/org/mule/runtime/core/api/security/MuleSecurityManagerConfigurator.java
index 2abfbd248a..ae4bf92ec4 100644
--- a/core/src/main/java/org/mule/runtime/core/api/security/MuleSecurityManagerConfigurator.java
+++ b/core/src/main/java/org/mule/runtime/core/api/security/MuleSecurityManagerConfigurator.java
@@ -7,6 +7,7 @@
 package org.mule.runtime.core.api.security;
 
 import static org.mule.runtime.core.api.config.MuleProperties.OBJECT_SECURITY_MANAGER;
+import org.mule.api.annotation.NoExtend;
 import org.mule.runtime.core.api.MuleContext;
 import org.mule.runtime.core.internal.security.DefaultMuleSecurityManager;
 import org.mule.runtime.dsl.api.component.AbstractComponentFactory;
@@ -25,7 +26,8 @@ import javax.inject.Inject;
  *
  * @since 4.0
  */
-public final class MuleSecurityManagerConfigurator extends AbstractComponentFactory<SecurityManager> {
+@NoExtend
+public class MuleSecurityManagerConfigurator extends AbstractComponentFactory<SecurityManager> {
 
   private List<SecurityProvider> providers = new ArrayList<>();
   private List<EncryptionStrategy> encryptionStrategies = new ArrayList<>();
diff --git a/core/src/main/java/org/mule/runtime/core/api/streaming/bytes/factory/InMemoryCursorStreamProviderFactory.java b/core/src/main/java/org/mule/runtime/core/api/streaming/bytes/factory/InMemoryCursorStreamProviderFactory.java
index 9c24b9ec33..ef00bb11ed 100644
--- a/core/src/main/java/org/mule/runtime/core/api/streaming/bytes/factory/InMemoryCursorStreamProviderFactory.java
+++ b/core/src/main/java/org/mule/runtime/core/api/streaming/bytes/factory/InMemoryCursorStreamProviderFactory.java
@@ -6,6 +6,7 @@
  */
 package org.mule.runtime.core.api.streaming.bytes.factory;
 
+import org.mule.api.annotation.NoExtend;
 import org.mule.runtime.core.api.event.CoreEvent;
 import org.mule.runtime.core.api.functional.Either;
 import org.mule.runtime.core.api.streaming.StreamingManager;
@@ -22,7 +23,8 @@ import java.io.InputStream;
  * @see InMemoryCursorStreamProvider
  * @since 4.0
  */
-public final class InMemoryCursorStreamProviderFactory extends AbstractCursorStreamProviderFactory {
+@NoExtend
+public class InMemoryCursorStreamProviderFactory extends AbstractCursorStreamProviderFactory {
 
   private final InMemoryCursorStreamConfig config;
 
diff --git a/core/src/main/java/org/mule/runtime/core/internal/message/DefaultMessageBuilder.java b/core/src/main/java/org/mule/runtime/core/internal/message/DefaultMessageBuilder.java
index 6e3ba012fc..fbfc27bf5a 100644
--- a/core/src/main/java/org/mule/runtime/core/internal/message/DefaultMessageBuilder.java
+++ b/core/src/main/java/org/mule/runtime/core/internal/message/DefaultMessageBuilder.java
@@ -28,7 +28,6 @@ import static org.mule.runtime.core.api.util.ObjectUtils.getLong;
 import static org.mule.runtime.core.api.util.ObjectUtils.getShort;
 import static org.mule.runtime.core.api.util.ObjectUtils.getString;
 import static org.mule.runtime.core.internal.context.DefaultMuleContext.currentMuleContext;
-
 import org.mule.runtime.api.exception.MuleException;
 import org.mule.runtime.api.message.Message;
 import org.mule.runtime.api.metadata.DataType;
@@ -46,8 +45,6 @@ import org.mule.runtime.core.internal.message.InternalMessage.CollectionBuilder;
 import org.mule.runtime.core.internal.metadata.DefaultCollectionDataType;
 import org.mule.runtime.core.privileged.store.DeserializationPostInitialisable;
 
-import javax.activation.DataHandler;
-
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
@@ -63,10 +60,12 @@ import java.util.Set;
 import java.util.TreeSet;
 import java.util.function.Function;
 
+import javax.activation.DataHandler;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-public class DefaultMessageBuilder
+public final class DefaultMessageBuilder
     implements InternalMessage.Builder, InternalMessage.PayloadBuilder, InternalMessage.CollectionBuilder,
     InternalMessage.MapBuilder {
 
diff --git a/core/src/main/java/org/mule/runtime/core/internal/message/DefaultMessageBuilderFactory.java b/core/src/main/java/org/mule/runtime/core/internal/message/DefaultMessageBuilderFactory.java
index 938878fbff..22b7f65fd6 100644
--- a/core/src/main/java/org/mule/runtime/core/internal/message/DefaultMessageBuilderFactory.java
+++ b/core/src/main/java/org/mule/runtime/core/internal/message/DefaultMessageBuilderFactory.java
@@ -12,7 +12,7 @@ import org.mule.runtime.api.message.Message;
 /**
  *
  */
-public class DefaultMessageBuilderFactory extends AbstractMuleMessageBuilderFactory {
+public final class DefaultMessageBuilderFactory extends AbstractMuleMessageBuilderFactory {
 
   private static DefaultMessageBuilderFactory INSTANCE = new DefaultMessageBuilderFactory();
 
diff --git a/core/src/main/java/org/mule/runtime/core/internal/message/ExceptionMessage.java b/core/src/main/java/org/mule/runtime/core/internal/message/ExceptionMessage.java
index 647a790649..ff95c374e4 100644
--- a/core/src/main/java/org/mule/runtime/core/internal/message/ExceptionMessage.java
+++ b/core/src/main/java/org/mule/runtime/core/internal/message/ExceptionMessage.java
@@ -6,6 +6,8 @@
  */
 package org.mule.runtime.core.internal.message;
 
+import org.mule.runtime.core.api.event.CoreEvent;
+
 import java.io.IOException;
 import java.io.NotSerializableException;
 import java.io.ObjectInputStream;
@@ -15,8 +17,6 @@ import java.util.Date;
 import java.util.HashMap;
 import java.util.Map;
 
-import org.mule.runtime.core.api.event.CoreEvent;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -24,7 +24,7 @@ import org.slf4j.LoggerFactory;
  * <code>ExceptionMessage</code> is used by the DefaultServiceExceptionStrategy for wrapping an exception with a message to send
  * via an endpointUri.
  */
-public class ExceptionMessage implements Serializable {
+public final class ExceptionMessage implements Serializable {
 
   /**
    * Serial version
diff --git a/core/src/main/java/org/mule/runtime/core/internal/message/InternalEvent.java b/core/src/main/java/org/mule/runtime/core/internal/message/InternalEvent.java
index f0320e75c0..86259943be 100644
--- a/core/src/main/java/org/mule/runtime/core/internal/message/InternalEvent.java
+++ b/core/src/main/java/org/mule/runtime/core/internal/message/InternalEvent.java
@@ -6,6 +6,7 @@
  */
 package org.mule.runtime.core.internal.message;
 
+import org.mule.api.annotation.NoImplement;
 import org.mule.runtime.api.event.EventContext;
 import org.mule.runtime.api.message.Message;
 import org.mule.runtime.api.metadata.DataType;
@@ -26,6 +27,7 @@ import java.util.Optional;
  *
  * @since 4.0
  */
+@NoImplement
 public interface InternalEvent extends PrivilegedEvent {
 
   /**
diff --git a/core/src/main/java/org/mule/runtime/core/internal/message/InternalMessage.java b/core/src/main/java/org/mule/runtime/core/internal/message/InternalMessage.java
index 188c1ab034..2c1816d12b 100644
--- a/core/src/main/java/org/mule/runtime/core/internal/message/InternalMessage.java
+++ b/core/src/main/java/org/mule/runtime/core/internal/message/InternalMessage.java
@@ -6,22 +6,24 @@
  */
 package org.mule.runtime.core.internal.message;
 
+import org.mule.api.annotation.NoImplement;
 import org.mule.runtime.api.message.Message;
 import org.mule.runtime.api.metadata.DataType;
 import org.mule.runtime.api.metadata.MediaType;
 import org.mule.runtime.api.metadata.TypedValue;
 import org.mule.runtime.core.api.message.ExceptionPayload;
 
-import javax.activation.DataHandler;
-
 import java.io.Serializable;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.Map;
 
+import javax.activation.DataHandler;
+
 /**
  * Message
  */
+@NoImplement
 public interface InternalMessage extends Message, MessageProperties, MessageAttachments {
 
   /**
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/PrivilegedMuleContext.java b/core/src/main/java/org/mule/runtime/core/privileged/PrivilegedMuleContext.java
index 18e26eadd8..08a1402da2 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/PrivilegedMuleContext.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/PrivilegedMuleContext.java
@@ -6,6 +6,7 @@
  */
 package org.mule.runtime.core.privileged;
 
+import org.mule.api.annotation.NoImplement;
 import org.mule.runtime.core.api.MuleContext;
 import org.mule.runtime.core.privileged.exception.ErrorTypeLocator;
 
@@ -14,6 +15,7 @@ import org.mule.runtime.core.privileged.exception.ErrorTypeLocator;
  *
  * @since 4.0
  */
+@NoImplement
 public interface PrivilegedMuleContext extends MuleContext {
 
   /**
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/client/MuleClientFlowConstruct.java b/core/src/main/java/org/mule/runtime/core/privileged/client/MuleClientFlowConstruct.java
index 38cd19e239..209a5efcf3 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/client/MuleClientFlowConstruct.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/client/MuleClientFlowConstruct.java
@@ -22,7 +22,7 @@ import org.mule.runtime.core.privileged.processor.chain.MessageProcessorChain;
 /**
  * Placeholder class which makes the default exception handler available.
  */
-public class MuleClientFlowConstruct extends AbstractComponent implements FlowConstruct {
+public final class MuleClientFlowConstruct extends AbstractComponent implements FlowConstruct {
 
   MuleContext muleContext;
 
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/component/AnnotatedObjectInvocationHandler.java b/core/src/main/java/org/mule/runtime/core/privileged/component/AnnotatedObjectInvocationHandler.java
index 947b279f92..66c2d5aab0 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/component/AnnotatedObjectInvocationHandler.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/component/AnnotatedObjectInvocationHandler.java
@@ -39,7 +39,7 @@ import net.sf.cglib.proxy.NoOp;
  *
  * @since 4.0
  */
-public class AnnotatedObjectInvocationHandler {
+public final class AnnotatedObjectInvocationHandler {
 
   private static final Set<Method> MANAGED_METHODS =
       unmodifiableSet(new HashSet<>(asList(Component.class.getDeclaredMethods())));
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/context/notification/OptimisedNotificationHandler.java b/core/src/main/java/org/mule/runtime/core/privileged/context/notification/OptimisedNotificationHandler.java
index e679496dbe..c6331a66a9 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/context/notification/OptimisedNotificationHandler.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/context/notification/OptimisedNotificationHandler.java
@@ -13,7 +13,7 @@ import org.mule.runtime.core.api.context.notification.ServerNotificationHandler;
 /**
  * Optimized to make a quick decision on a particular class of messages.
  */
-public class OptimisedNotificationHandler implements ServerNotificationHandler {
+public final class OptimisedNotificationHandler implements ServerNotificationHandler {
 
   private ServerNotificationHandler delegate;
   private Class<? extends Notification> type;
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/el/GlobalBindingContextProvider.java b/core/src/main/java/org/mule/runtime/core/privileged/el/GlobalBindingContextProvider.java
index 1947a68343..377d17e47b 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/el/GlobalBindingContextProvider.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/el/GlobalBindingContextProvider.java
@@ -6,6 +6,7 @@
  */
 package org.mule.runtime.core.privileged.el;
 
+import org.mule.api.annotation.NoImplement;
 import org.mule.runtime.api.el.Binding;
 import org.mule.runtime.api.el.BindingContext;
 import org.mule.runtime.api.el.ExpressionFunction;
@@ -16,6 +17,7 @@ import org.mule.runtime.api.el.ExpressionFunction;
  *
  * @since 4.0
  */
+@NoImplement
 public interface GlobalBindingContextProvider {
 
   /**
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/el/context/AbstractMapContext.java b/core/src/main/java/org/mule/runtime/core/privileged/el/context/AbstractMapContext.java
index 2e8b238713..2949792832 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/el/context/AbstractMapContext.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/el/context/AbstractMapContext.java
@@ -6,6 +6,8 @@
  */
 package org.mule.runtime.core.privileged.el.context;
 
+import org.mule.api.annotation.NoExtend;
+
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashSet;
@@ -16,6 +18,7 @@ import java.util.Set;
 
 import org.apache.commons.collections.keyvalue.DefaultMapEntry;
 
+@NoExtend
 public abstract class AbstractMapContext<V> implements Map<String, V> {
 
   @Override
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/el/context/EventVariablesMapContext.java b/core/src/main/java/org/mule/runtime/core/privileged/el/context/EventVariablesMapContext.java
index 4323675007..bc307aea8a 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/el/context/EventVariablesMapContext.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/el/context/EventVariablesMapContext.java
@@ -19,7 +19,7 @@ import java.util.Set;
 /**
  * Flow variables wrapper {@link Map} for exposing Flow variables via an {@link ExtendedExpressionLanguageAdaptor}
  */
-public class EventVariablesMapContext extends AbstractMapContext<Object> {
+public final class EventVariablesMapContext extends AbstractMapContext<Object> {
 
   private CoreEvent event;
   private CoreEvent.Builder eventBuider;
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/el/context/SessionVariableMapContext.java b/core/src/main/java/org/mule/runtime/core/privileged/el/context/SessionVariableMapContext.java
index c60eb1c311..b87834594d 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/el/context/SessionVariableMapContext.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/el/context/SessionVariableMapContext.java
@@ -17,7 +17,7 @@ import java.util.Set;
  * Session variables wrapper {@link Map} for exposing Session variables via an
  * {@link ExtendedExpressionLanguageAdaptor}
  */
-public class SessionVariableMapContext extends AbstractMapContext<Object> {
+public final class SessionVariableMapContext extends AbstractMapContext<Object> {
 
   private MuleSession session;
 
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/event/Acceptor.java b/core/src/main/java/org/mule/runtime/core/privileged/event/Acceptor.java
index 5a2ab81f18..216b4301d0 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/event/Acceptor.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/event/Acceptor.java
@@ -6,11 +6,13 @@
  */
 package org.mule.runtime.core.privileged.event;
 
+import org.mule.api.annotation.NoImplement;
 import org.mule.runtime.core.api.event.CoreEvent;
 
 /**
  * Provides capability to only accept handling certain MuleEvents.
  */
+@NoImplement
 public interface Acceptor {
 
   /**
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/event/BaseEventContext.java b/core/src/main/java/org/mule/runtime/core/privileged/event/BaseEventContext.java
index 0b90ddfe1f..7cf0597b24 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/event/BaseEventContext.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/event/BaseEventContext.java
@@ -6,6 +6,7 @@
  */
 package org.mule.runtime.core.privileged.event;
 
+import org.mule.api.annotation.NoImplement;
 import org.mule.runtime.api.event.EventContext;
 import org.mule.runtime.core.api.config.DefaultMuleConfiguration;
 import org.mule.runtime.core.api.context.notification.FlowCallStack;
@@ -13,11 +14,11 @@ import org.mule.runtime.core.api.context.notification.ProcessorsTrace;
 import org.mule.runtime.core.api.event.CoreEvent;
 import org.mule.runtime.core.api.management.stats.ProcessingTime;
 
-import org.reactivestreams.Publisher;
-
 import java.util.Optional;
 import java.util.function.BiConsumer;
 
+import org.reactivestreams.Publisher;
+
 /**
  * Context representing a message that is received by a Mule Runtime via a connector source. This context is immutable and
  * maintained during all execution originating from a given source message and all instances of {@link CoreEvent} created as part
@@ -28,6 +29,7 @@ import java.util.function.BiConsumer;
  * @see CoreEvent
  * @since 4.0
  */
+@NoImplement
 public interface BaseEventContext extends EventContext {
 
   /**
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/event/PrivilegedEvent.java b/core/src/main/java/org/mule/runtime/core/privileged/event/PrivilegedEvent.java
index f3b6b4b0f4..0cc4543917 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/event/PrivilegedEvent.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/event/PrivilegedEvent.java
@@ -6,6 +6,7 @@
  */
 package org.mule.runtime.core.privileged.event;
 
+import org.mule.api.annotation.NoImplement;
 import org.mule.runtime.api.event.Event;
 import org.mule.runtime.api.event.EventContext;
 import org.mule.runtime.api.exception.MuleException;
@@ -21,17 +22,18 @@ import org.mule.runtime.core.internal.event.DefaultEventBuilder;
 import org.mule.runtime.core.internal.message.InternalEvent;
 import org.mule.runtime.core.privileged.connector.ReplyToHandler;
 
-import org.slf4j.MDC;
-
 import java.nio.charset.Charset;
 import java.util.Map;
 import java.util.Optional;
 
+import org.slf4j.MDC;
+
 /**
  * Allows access to the privileged behavior of the {@link Event} implementation.
  *
  * @since 4.0
  */
+@NoImplement
 public interface PrivilegedEvent extends CoreEvent {
 
   public static final String CORRELATION_ID_MDC_KEY = "correlationId";
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/exception/MessagingExceptionHandlerAcceptor.java b/core/src/main/java/org/mule/runtime/core/privileged/exception/MessagingExceptionHandlerAcceptor.java
index 485bf4944a..ce48c40edf 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/exception/MessagingExceptionHandlerAcceptor.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/exception/MessagingExceptionHandlerAcceptor.java
@@ -6,11 +6,13 @@
  */
 package org.mule.runtime.core.privileged.exception;
 
+import org.mule.api.annotation.NoImplement;
 import org.mule.runtime.core.privileged.event.Acceptor;
 import org.mule.runtime.core.api.exception.FlowExceptionHandler;
 
 /**
  * MessagingExceptionHandlers that will only be executed if accepts to manage MuleEvent
  */
+@NoImplement
 public interface MessagingExceptionHandlerAcceptor extends FlowExceptionHandler, Acceptor {
 }
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/exception/ResponseDispatchException.java b/core/src/main/java/org/mule/runtime/core/privileged/exception/ResponseDispatchException.java
index e923e91c13..7ce7b7b714 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/exception/ResponseDispatchException.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/exception/ResponseDispatchException.java
@@ -6,12 +6,14 @@
  */
 package org.mule.runtime.core.privileged.exception;
 
+import org.mule.api.annotation.NoExtend;
 import org.mule.runtime.api.exception.MuleException;
 import org.mule.runtime.api.i18n.I18nMessage;
 
 /**
  * Exception thrown when there's a failure writing the response using the transport infrastructure.
  */
+@NoExtend
 public class ResponseDispatchException extends MuleException {
 
   public ResponseDispatchException(I18nMessage message) {
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java b/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java
index ab664c0370..ee826b7ab6 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java
@@ -25,6 +25,7 @@ import static org.mule.runtime.core.privileged.processor.MessageProcessors.proce
 import static reactor.core.publisher.Mono.from;
 import static reactor.core.publisher.Mono.just;
 
+import org.mule.api.annotation.NoExtend;
 import org.mule.runtime.api.component.location.ConfigurationComponentLocator;
 import org.mule.runtime.api.exception.ErrorTypeRepository;
 import org.mule.runtime.api.exception.MuleException;
@@ -56,6 +57,7 @@ import javax.inject.Inject;
 
 import org.reactivestreams.Publisher;
 
+@NoExtend
 public abstract class TemplateOnErrorHandler extends AbstractExceptionListener
     implements MessagingExceptionHandlerAcceptor {
 
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/execution/LocationExecutionContextProvider.java b/core/src/main/java/org/mule/runtime/core/privileged/execution/LocationExecutionContextProvider.java
index d70e79249e..8e59a16cf6 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/execution/LocationExecutionContextProvider.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/execution/LocationExecutionContextProvider.java
@@ -8,6 +8,7 @@ package org.mule.runtime.core.privileged.execution;
 
 import static java.lang.String.format;
 import static java.util.regex.Pattern.compile;
+import org.mule.api.annotation.NoExtend;
 import org.mule.runtime.api.component.Component;
 import org.mule.runtime.api.util.ComponentLocationProvider;
 import org.mule.runtime.core.api.execution.ExceptionContextProvider;
@@ -23,6 +24,7 @@ import javax.xml.namespace.QName;
  *
  * @since 3.8.0
  */
+@NoExtend
 public abstract class LocationExecutionContextProvider extends ComponentLocationProvider implements ExceptionContextProvider {
 
   protected static final QName SOURCE_ELEMENT_ANNOTATION_KEY =
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/execution/MessageProcessingManager.java b/core/src/main/java/org/mule/runtime/core/privileged/execution/MessageProcessingManager.java
index b37edb1651..de7f1ad81f 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/execution/MessageProcessingManager.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/execution/MessageProcessingManager.java
@@ -6,6 +6,7 @@
  */
 package org.mule.runtime.core.privileged.execution;
 
+import org.mule.api.annotation.NoImplement;
 import org.mule.runtime.core.internal.execution.EndProcessPhase;
 import org.mule.runtime.core.internal.execution.FlowProcessingPhase;
 import org.mule.runtime.core.internal.execution.ValidationPhase;
@@ -13,6 +14,7 @@ import org.mule.runtime.core.internal.execution.ValidationPhase;
 /**
  * In charge of processing messages through mule.
  */
+@NoImplement
 public interface MessageProcessingManager {
 
   /**
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/interception/InternalInterceptionEvent.java b/core/src/main/java/org/mule/runtime/core/privileged/interception/InternalInterceptionEvent.java
index 5d4f78ff95..7bfca1a294 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/interception/InternalInterceptionEvent.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/interception/InternalInterceptionEvent.java
@@ -6,6 +6,7 @@
  */
 package org.mule.runtime.core.privileged.interception;
 
+import org.mule.api.annotation.NoImplement;
 import org.mule.runtime.api.interception.InterceptionEvent;
 import org.mule.runtime.core.api.event.CoreEvent;
 import org.mule.runtime.core.privileged.event.MuleSession;
@@ -16,6 +17,7 @@ import org.mule.runtime.core.privileged.event.PrivilegedEvent;
  *
  * @since 4.0
  */
+@NoImplement
 public interface InternalInterceptionEvent extends InterceptionEvent {
 
   /**
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/object/PrototypeObjectFactory.java b/core/src/main/java/org/mule/runtime/core/privileged/object/PrototypeObjectFactory.java
index bb25458804..28c4cf4a0c 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/object/PrototypeObjectFactory.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/object/PrototypeObjectFactory.java
@@ -13,7 +13,7 @@ import java.util.Map;
 /**
  * Creates a new instance of the object on each call.
  */
-public class PrototypeObjectFactory extends AbstractObjectFactory {
+public final class PrototypeObjectFactory extends AbstractObjectFactory {
 
   /** For Spring only */
   public PrototypeObjectFactory() {
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/object/SingletonObjectFactory.java b/core/src/main/java/org/mule/runtime/core/privileged/object/SingletonObjectFactory.java
index 858cb77405..61f5ac3421 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/object/SingletonObjectFactory.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/object/SingletonObjectFactory.java
@@ -15,7 +15,7 @@ import java.util.Map;
 /**
  * Creates an instance of the object once and then always returns the same instance.
  */
-public class SingletonObjectFactory extends AbstractObjectFactory {
+public final class SingletonObjectFactory extends AbstractObjectFactory {
 
   private Object instance;
 
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/processor/AbstractRedeliveryPolicy.java b/core/src/main/java/org/mule/runtime/core/privileged/processor/AbstractRedeliveryPolicy.java
index d1bee1d2e3..62ead62afe 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/processor/AbstractRedeliveryPolicy.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/processor/AbstractRedeliveryPolicy.java
@@ -8,6 +8,7 @@ package org.mule.runtime.core.privileged.processor;
 
 import static org.mule.runtime.core.api.config.i18n.CoreMessages.initialisationFailure;
 
+import org.mule.api.annotation.NoExtend;
 import org.mule.runtime.api.exception.MuleException;
 import org.mule.runtime.api.lifecycle.InitialisationException;
 import org.mule.runtime.api.lifecycle.Lifecycle;
@@ -21,6 +22,7 @@ import org.mule.runtime.core.api.processor.Processor;
  * too often, the message is sent to the failedMessageProcessor MP, whence success is force to be returned, to allow the message
  * to be considered "consumed".
  */
+@NoExtend
 public abstract class AbstractRedeliveryPolicy extends AbstractInterceptingMessageProcessor
     implements Processor, Lifecycle, MuleContextAware {
 
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/processor/AnnotatedProcessor.java b/core/src/main/java/org/mule/runtime/core/privileged/processor/AnnotatedProcessor.java
index 6499f80ccf..03fb136ae8 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/processor/AnnotatedProcessor.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/processor/AnnotatedProcessor.java
@@ -6,6 +6,7 @@
  */
 package org.mule.runtime.core.privileged.processor;
 
+import org.mule.api.annotation.NoImplement;
 import org.mule.runtime.api.component.Component;
 import org.mule.runtime.core.api.processor.Processor;
 
@@ -14,6 +15,7 @@ import org.mule.runtime.core.api.processor.Processor;
  * 
  * @since 4.0
  */
+@NoImplement
 public interface AnnotatedProcessor extends Component, Processor {
 
 }
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/processor/CompositeProcessorChainRouter.java b/core/src/main/java/org/mule/runtime/core/privileged/processor/CompositeProcessorChainRouter.java
index edd1617994..7246f9e476 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/processor/CompositeProcessorChainRouter.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/processor/CompositeProcessorChainRouter.java
@@ -19,18 +19,16 @@ import static org.mule.runtime.core.privileged.processor.MessageProcessors.proce
 import static org.slf4j.LoggerFactory.getLogger;
 import static reactor.core.publisher.Flux.fromIterable;
 import static reactor.core.publisher.Mono.from;
-
 import org.mule.runtime.api.exception.MuleException;
 import org.mule.runtime.api.exception.MuleRuntimeException;
 import org.mule.runtime.api.lifecycle.InitialisationException;
 import org.mule.runtime.api.lifecycle.Lifecycle;
 import org.mule.runtime.api.util.concurrent.Latch;
 import org.mule.runtime.core.api.MuleContext;
-import org.mule.runtime.core.api.config.i18n.CoreMessages;
-import org.mule.runtime.core.privileged.event.BaseEventContext;
 import org.mule.runtime.core.api.event.CoreEvent;
 import org.mule.runtime.core.api.processor.ReactiveProcessor;
 import org.mule.runtime.core.privileged.component.AbstractExecutableComponent;
+import org.mule.runtime.core.privileged.event.BaseEventContext;
 import org.mule.runtime.core.privileged.processor.chain.MessageProcessorChain;
 
 import java.util.List;
@@ -46,7 +44,7 @@ import org.slf4j.Logger;
  *
  * @since 4.0
  */
-public class CompositeProcessorChainRouter extends AbstractExecutableComponent implements Lifecycle {
+public final class CompositeProcessorChainRouter extends AbstractExecutableComponent implements Lifecycle {
 
   private static Logger LOGGER = getLogger(CompositeProcessorChainRouter.class);
 
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/processor/IdempotentRedeliveryPolicy.java b/core/src/main/java/org/mule/runtime/core/privileged/processor/IdempotentRedeliveryPolicy.java
index 3320ea3336..ec42aa2e99 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/processor/IdempotentRedeliveryPolicy.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/processor/IdempotentRedeliveryPolicy.java
@@ -20,7 +20,6 @@ import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.initialiseIfNee
 import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.startIfNeeded;
 import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.stopIfNeeded;
 import static org.slf4j.LoggerFactory.getLogger;
-
 import org.mule.runtime.api.component.Component;
 import org.mule.runtime.api.exception.MuleException;
 import org.mule.runtime.api.lifecycle.InitialisationException;
@@ -40,8 +39,6 @@ import org.mule.runtime.core.internal.util.store.ObjectStorePartition;
 import org.mule.runtime.core.privileged.event.BaseEventContext;
 import org.mule.runtime.core.privileged.exception.MessageRedeliveredException;
 
-import org.slf4j.Logger;
-
 import java.io.Serializable;
 import java.util.LinkedList;
 import java.util.List;
@@ -53,11 +50,13 @@ import java.util.function.Supplier;
 import javax.inject.Inject;
 import javax.inject.Named;
 
+import org.slf4j.Logger;
+
 /**
  * Implement a retry policy for Mule. This is similar to JMS retry policies that will redeliver a message a maximum number of
  * times. If this maximum is exceeded, fails with an exception.
  */
-public class IdempotentRedeliveryPolicy extends AbstractRedeliveryPolicy {
+public final class IdempotentRedeliveryPolicy extends AbstractRedeliveryPolicy {
 
   public static final String SECURE_HASH_EXPR_FORMAT = "" +
       "%%dw 2.0" + lineSeparator() +
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/processor/ProcessorChainRouter.java b/core/src/main/java/org/mule/runtime/core/privileged/processor/ProcessorChainRouter.java
index 886dc0e2dd..fef8f42847 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/processor/ProcessorChainRouter.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/processor/ProcessorChainRouter.java
@@ -36,7 +36,7 @@ import org.slf4j.Logger;
  *
  * @since 4.0
  */
-public class ProcessorChainRouter extends AbstractExecutableComponent implements Lifecycle {
+public final class ProcessorChainRouter extends AbstractExecutableComponent implements Lifecycle {
 
   private static Logger LOGGER = getLogger(ProcessorChainRouter.class);
 
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/processor/objectfactory/MessageProcessorChainObjectFactory.java b/core/src/main/java/org/mule/runtime/core/privileged/processor/objectfactory/MessageProcessorChainObjectFactory.java
index 2c49f5eba7..24bf50276a 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/processor/objectfactory/MessageProcessorChainObjectFactory.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/processor/objectfactory/MessageProcessorChainObjectFactory.java
@@ -7,6 +7,7 @@
 package org.mule.runtime.core.privileged.processor.objectfactory;
 
 import static java.lang.String.format;
+import org.mule.api.annotation.NoExtend;
 import org.mule.runtime.core.api.MuleContext;
 import org.mule.runtime.core.privileged.processor.chain.MessageProcessorChain;
 import org.mule.runtime.core.privileged.processor.chain.MessageProcessorChainBuilder;
@@ -18,6 +19,7 @@ import java.util.List;
 
 import javax.inject.Inject;
 
+@NoExtend
 public class MessageProcessorChainObjectFactory extends AbstractComponentFactory<MessageProcessorChain> {
 
   @Inject
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/registry/RegistrationException.java b/core/src/main/java/org/mule/runtime/core/privileged/registry/RegistrationException.java
index 4f2debf4a2..819b186db5 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/registry/RegistrationException.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/registry/RegistrationException.java
@@ -9,7 +9,7 @@ package org.mule.runtime.core.privileged.registry;
 import org.mule.runtime.api.exception.MuleException;
 import org.mule.runtime.api.i18n.I18nMessage;
 
-public class RegistrationException extends MuleException {
+public final class RegistrationException extends MuleException {
 
   private static final long serialVersionUID = 9143114426140546637L;
 
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/routing/CompositeRoutingException.java b/core/src/main/java/org/mule/runtime/core/privileged/routing/CompositeRoutingException.java
index ab8c20305d..4a37e9388a 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/routing/CompositeRoutingException.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/routing/CompositeRoutingException.java
@@ -33,7 +33,7 @@ import java.util.Map.Entry;
  * @since 3.5.0
  * @see RoutingResult
  */
-public class CompositeRoutingException extends MuleException implements ComposedErrorException, ErrorMessageAwareException {
+public final class CompositeRoutingException extends MuleException implements ComposedErrorException, ErrorMessageAwareException {
 
   private static final String MESSAGE_TITLE = "Exception(s) were found for route(s): ";
 
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/routing/CouldNotRouteOutboundMessageException.java b/core/src/main/java/org/mule/runtime/core/privileged/routing/CouldNotRouteOutboundMessageException.java
index 967ea30dfb..d22ee1dad0 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/routing/CouldNotRouteOutboundMessageException.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/routing/CouldNotRouteOutboundMessageException.java
@@ -13,7 +13,7 @@ import org.mule.runtime.api.i18n.I18nMessage;
  * <code>CouldNotRouteOutboundMessageException</code> thrown if Mule fails to route the current outbound event.
  */
 
-public class CouldNotRouteOutboundMessageException extends RoutingException {
+public final class CouldNotRouteOutboundMessageException extends RoutingException {
 
   /**
    * Serial version
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/routing/DefaultRouterResultsHandler.java b/core/src/main/java/org/mule/runtime/core/privileged/routing/DefaultRouterResultsHandler.java
index 038daac1a8..6b21374d52 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/routing/DefaultRouterResultsHandler.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/routing/DefaultRouterResultsHandler.java
@@ -29,7 +29,7 @@ import java.util.List;
  * @see InternalMessage
  * @see org.mule.runtime.core.DefaultMessageCollection
  */
-public class DefaultRouterResultsHandler implements RouterResultsHandler {
+public final class DefaultRouterResultsHandler implements RouterResultsHandler {
 
   private boolean returnCollectionWithSingleResult = false;
 
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/routing/ResponseTimeoutException.java b/core/src/main/java/org/mule/runtime/core/privileged/routing/ResponseTimeoutException.java
index 4433f3a0f9..1c3a625bc8 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/routing/ResponseTimeoutException.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/routing/ResponseTimeoutException.java
@@ -13,7 +13,7 @@ import org.mule.runtime.api.i18n.I18nMessage;
  * <code>ResponseTimeoutException</code> is thrown when a response is not received in a given timeout in the Response Router.
  * 
  */
-public class ResponseTimeoutException extends RoutingException {
+public final class ResponseTimeoutException extends RoutingException {
 
   /**
    * Serial version
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/routing/RoutePathNotFoundException.java b/core/src/main/java/org/mule/runtime/core/privileged/routing/RoutePathNotFoundException.java
index c4d3d1be9e..682bdcb9dc 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/routing/RoutePathNotFoundException.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/routing/RoutePathNotFoundException.java
@@ -13,7 +13,7 @@ import org.mule.runtime.api.i18n.I18nMessage;
  * <code>RoutePathNotFoundException</code> is thrown if a routing path for an event cannot be found. This can be caused if there
  * is no (or no matching) endpoint for the event to route through.
  */
-public class RoutePathNotFoundException extends RoutingException {
+public final class RoutePathNotFoundException extends RoutingException {
 
   /**
    * Serial version
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/routing/RouterResultsHandler.java b/core/src/main/java/org/mule/runtime/core/privileged/routing/RouterResultsHandler.java
index 638c07fdfa..8aee8216ae 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/routing/RouterResultsHandler.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/routing/RouterResultsHandler.java
@@ -6,6 +6,7 @@
  */
 package org.mule.runtime.core.privileged.routing;
 
+import org.mule.api.annotation.NoImplement;
 import org.mule.runtime.core.api.event.CoreEvent;
 
 import java.util.List;
@@ -13,6 +14,7 @@ import java.util.List;
 /**
  * An SPI interface where custom logic can be plugged in to control how collections and single messages are returned from routers.
  */
+@NoImplement
 public interface RouterResultsHandler {
 
   CoreEvent aggregateResults(List<CoreEvent> results, CoreEvent previous);
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/routing/requestreply/AbstractReplyToPropertyRequestReplyReplier.java b/core/src/main/java/org/mule/runtime/core/privileged/routing/requestreply/AbstractReplyToPropertyRequestReplyReplier.java
index 5b16af0748..76db852158 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/routing/requestreply/AbstractReplyToPropertyRequestReplyReplier.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/routing/requestreply/AbstractReplyToPropertyRequestReplyReplier.java
@@ -8,6 +8,7 @@ package org.mule.runtime.core.privileged.routing.requestreply;
 
 import static org.mule.runtime.core.api.config.MuleProperties.MULE_REPLY_TO_REQUESTOR_PROPERTY;
 
+import org.mule.api.annotation.NoExtend;
 import org.mule.runtime.api.exception.MuleException;
 import org.mule.runtime.core.privileged.connector.ReplyToHandler;
 import org.mule.runtime.core.api.event.CoreEvent;
@@ -17,6 +18,7 @@ import org.mule.runtime.core.internal.message.InternalMessage;
 import org.mule.runtime.core.privileged.event.PrivilegedEvent;
 import org.mule.runtime.core.privileged.processor.AbstractInterceptingMessageProcessor;
 
+@NoExtend
 public abstract class AbstractReplyToPropertyRequestReplyReplier extends AbstractInterceptingMessageProcessor
     implements RequestReplyReplierMessageProcessor, InternalProcessor {
 
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/routing/requestreply/ReplyToPropertyRequestReplyReplier.java b/core/src/main/java/org/mule/runtime/core/privileged/routing/requestreply/ReplyToPropertyRequestReplyReplier.java
index 1426d23313..e013145773 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/routing/requestreply/ReplyToPropertyRequestReplyReplier.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/routing/requestreply/ReplyToPropertyRequestReplyReplier.java
@@ -14,7 +14,7 @@ import org.mule.runtime.core.api.construct.Pipeline;
 import org.mule.runtime.core.privileged.endpoint.LegacyImmutableEndpoint;
 import org.mule.runtime.core.privileged.event.PrivilegedEvent;
 
-public class ReplyToPropertyRequestReplyReplier extends AbstractReplyToPropertyRequestReplyReplier {
+public final class ReplyToPropertyRequestReplyReplier extends AbstractReplyToPropertyRequestReplyReplier {
 
   private FlowConstruct flowConstruct;
 
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/routing/requestreply/RequestReplyReplierMessageProcessor.java b/core/src/main/java/org/mule/runtime/core/privileged/routing/requestreply/RequestReplyReplierMessageProcessor.java
index 6720dbd228..6266b5aebf 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/routing/requestreply/RequestReplyReplierMessageProcessor.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/routing/requestreply/RequestReplyReplierMessageProcessor.java
@@ -6,6 +6,7 @@
  */
 package org.mule.runtime.core.privileged.routing.requestreply;
 
+import org.mule.api.annotation.NoImplement;
 import org.mule.runtime.core.api.event.CoreEvent;
 import org.mule.runtime.core.api.processor.InterceptingMessageProcessor;
 import org.mule.runtime.core.api.processor.Processor;
@@ -21,6 +22,7 @@ import org.mule.runtime.core.api.source.MessageSource;
  * 
  * @since 3.0
  */
+@NoImplement
 public interface RequestReplyReplierMessageProcessor extends InterceptingMessageProcessor {
 
   /**
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/security/RevocationCheck.java b/core/src/main/java/org/mule/runtime/core/privileged/security/RevocationCheck.java
index 1ac1d23063..63bae92bfa 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/security/RevocationCheck.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/security/RevocationCheck.java
@@ -6,6 +6,8 @@
  */
 package org.mule.runtime.core.privileged.security;
 
+import org.mule.api.annotation.NoImplement;
+
 import java.security.KeyStore;
 import java.security.cert.TrustAnchor;
 import java.util.Set;
@@ -17,6 +19,7 @@ import javax.net.ssl.ManagerFactoryParameters;
  *
  * @since 4.1
  */
+@NoImplement
 public interface RevocationCheck {
 
   /**
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/transaction/XaTransaction.java b/core/src/main/java/org/mule/runtime/core/privileged/transaction/XaTransaction.java
index f5449baff4..430dac62a9 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/transaction/XaTransaction.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/transaction/XaTransaction.java
@@ -6,6 +6,7 @@
  */
 package org.mule.runtime.core.privileged.transaction;
 
+import org.mule.api.annotation.NoExtend;
 import org.mule.runtime.api.i18n.I18nMessageFactory;
 import org.mule.runtime.api.tx.MuleXaObject;
 import org.mule.runtime.api.tx.TransactionException;
@@ -34,6 +35,7 @@ import javax.transaction.xa.XAResource;
 /**
  * <code>XaTransaction</code> represents an XA transaction in Mule.
  */
+@NoExtend
 public class XaTransaction extends AbstractTransaction {
 
   /**
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/transaction/xa/IllegalTransactionStateException.java b/core/src/main/java/org/mule/runtime/core/privileged/transaction/xa/IllegalTransactionStateException.java
index 47fb610aa3..9ee6acc4f6 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/transaction/xa/IllegalTransactionStateException.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/transaction/xa/IllegalTransactionStateException.java
@@ -12,7 +12,7 @@ import org.mule.runtime.core.api.transaction.TransactionStatusException;
 /**
  * <code>IllegalTransactionStateException</code> TODO (document class)
  */
-public class IllegalTransactionStateException extends TransactionStatusException {
+public final class IllegalTransactionStateException extends TransactionStatusException {
 
   /**
    * Serial version
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/transaction/xa/XaResourceFactoryHolder.java b/core/src/main/java/org/mule/runtime/core/privileged/transaction/xa/XaResourceFactoryHolder.java
index ebc3dfda0b..4bc174820c 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/transaction/xa/XaResourceFactoryHolder.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/transaction/xa/XaResourceFactoryHolder.java
@@ -6,12 +6,15 @@
  */
 package org.mule.runtime.core.privileged.transaction.xa;
 
+import org.mule.api.annotation.NoImplement;
+
 /**
  * Implementations of this interface hold a reference to a factory of XAResource objects.
  *
  * This class is used in those classes that wrap jdbc XADataSource or jms XAConnectionFactory or any other factory of XA resources
  * and allows to retrieve the actual implementation.
  */
+@NoImplement
 public interface XaResourceFactoryHolder {
 
   /**
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/transaction/xa/XaTransactionFactory.java b/core/src/main/java/org/mule/runtime/core/privileged/transaction/xa/XaTransactionFactory.java
index dd099e504e..55e8bc0169 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/transaction/xa/XaTransactionFactory.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/transaction/xa/XaTransactionFactory.java
@@ -6,6 +6,7 @@
  */
 package org.mule.runtime.core.privileged.transaction.xa;
 
+import org.mule.api.annotation.NoExtend;
 import org.mule.runtime.api.tx.TransactionException;
 import org.mule.runtime.core.api.MuleContext;
 import org.mule.runtime.core.api.transaction.ExternalTransactionAwareTransactionFactory;
@@ -20,6 +21,7 @@ import javax.transaction.TransactionManager;
  * <code>XaTransactionFactory</code> Is used to create/retrieve a Transaction from a transaction manager configured on the
  * MuleManager.
  */
+@NoExtend
 public class XaTransactionFactory implements ExternalTransactionAwareTransactionFactory {
 
   private int timeout;
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/transformer/CompositeConverter.java b/core/src/main/java/org/mule/runtime/core/privileged/transformer/CompositeConverter.java
index 27617633cf..c8a134957a 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/transformer/CompositeConverter.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/transformer/CompositeConverter.java
@@ -27,7 +27,7 @@ import java.util.List;
  * When {@link #transform(Object)} is called each converter in the same order they are included in the composition. The output of
  * a given converter is the input of the next composed converter.
  */
-public class CompositeConverter extends AbstractComponent implements Converter, MuleContextAware {
+public final class CompositeConverter extends AbstractComponent implements Converter, MuleContextAware {
 
   private String name;
 
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/transformer/ExtendedTransformationService.java b/core/src/main/java/org/mule/runtime/core/privileged/transformer/ExtendedTransformationService.java
index c0f8088b38..5bef8476b2 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/transformer/ExtendedTransformationService.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/transformer/ExtendedTransformationService.java
@@ -10,7 +10,7 @@ import static java.util.Arrays.asList;
 import static org.mule.runtime.api.metadata.MediaType.ANY;
 import static org.mule.runtime.core.api.util.SystemUtils.getDefaultEncoding;
 import static org.mule.runtime.core.privileged.transformer.TransformerUtils.checkTransformerReturnClass;
-
+import org.mule.api.annotation.NoInstantiate;
 import org.mule.runtime.api.exception.MuleException;
 import org.mule.runtime.api.message.Message;
 import org.mule.runtime.api.metadata.DataType;
@@ -24,14 +24,15 @@ import org.mule.runtime.core.api.transformer.MessageTransformerException;
 import org.mule.runtime.core.api.transformer.Transformer;
 import org.mule.runtime.core.api.transformer.TransformerException;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import java.nio.charset.Charset;
 import java.util.List;
 
 import javax.inject.Inject;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+@NoInstantiate
 public class ExtendedTransformationService extends DefaultTransformationService {
 
   private static final Logger logger = LoggerFactory.getLogger(ExtendedTransformationService.class);
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/transformer/TransformerChain.java b/core/src/main/java/org/mule/runtime/core/privileged/transformer/TransformerChain.java
index 020a8e0f78..bdcc8ac9dd 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/transformer/TransformerChain.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/transformer/TransformerChain.java
@@ -26,7 +26,7 @@ import java.util.List;
 /**
  * A referencable chain of transformers that can be used as a single transformer
  */
-public class TransformerChain extends AbstractMessageTransformer {
+public final class TransformerChain extends AbstractMessageTransformer {
 
   private List<Transformer> transformers;
 
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/transformer/TransformerTemplate.java b/core/src/main/java/org/mule/runtime/core/privileged/transformer/TransformerTemplate.java
index 99df1b8976..c35a2bbd6c 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/transformer/TransformerTemplate.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/transformer/TransformerTemplate.java
@@ -14,8 +14,7 @@ import org.mule.runtime.core.api.transformer.TransformerException;
 
 import java.nio.charset.Charset;
 
-/** TODO */
-public class TransformerTemplate extends AbstractMessageTransformer {
+public final class TransformerTemplate extends AbstractMessageTransformer {
 
   private TransformerCallback callback;
 
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/transformer/simple/ByteArrayToObject.java b/core/src/main/java/org/mule/runtime/core/privileged/transformer/simple/ByteArrayToObject.java
index 600093e691..dd164d302f 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/transformer/simple/ByteArrayToObject.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/transformer/simple/ByteArrayToObject.java
@@ -20,7 +20,7 @@ import java.nio.charset.Charset;
  * <code>ByteArrayToObject</code> works in the same way as <code>ByteArrayToSerializable</code> but checks if the byte array is a
  * serialised object and if not will return a String created from the bytes as the returnType on the transformer.
  */
-public class ByteArrayToObject extends ByteArrayToSerializable {
+public final class ByteArrayToObject extends ByteArrayToSerializable {
 
   @Override
   public Object doTransform(Object src, Charset encoding) throws TransformerException {
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/util/AttributeEvaluator.java b/core/src/main/java/org/mule/runtime/core/privileged/util/AttributeEvaluator.java
index b01ef96472..a16f36ceef 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/util/AttributeEvaluator.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/util/AttributeEvaluator.java
@@ -31,7 +31,7 @@ import java.util.regex.Pattern;
  * This class acts as a wrapper for configuration attributes that support simple text, expression or regular expressions. It can
  * be extended to support other cases too.
  */
-public class AttributeEvaluator {
+public final class AttributeEvaluator {
 
   private static final Pattern SINGLE_EXPRESSION_REGEX_PATTERN = compile("^#\\[(?:(?!#\\[).)*]$", DOTALL);
   private static final List<Class<?>> BLACK_LIST_TYPES =
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/util/BeanUtils.java b/core/src/main/java/org/mule/runtime/core/privileged/util/BeanUtils.java
index a92a8bbe74..daea73b91d 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/util/BeanUtils.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/util/BeanUtils.java
@@ -139,4 +139,6 @@ public class BeanUtils {
     }
     return name;
   }
+
+  private BeanUtils() {}
 }
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/util/CollectionUtils.java b/core/src/main/java/org/mule/runtime/core/privileged/util/CollectionUtils.java
index 28b8db8d9b..261bfe50fd 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/util/CollectionUtils.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/util/CollectionUtils.java
@@ -99,4 +99,6 @@ public class CollectionUtils {
     buf.append(']');
     return buf.toString();
   }
+
+  private CollectionUtils() {}
 }
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/util/MapUtils.java b/core/src/main/java/org/mule/runtime/core/privileged/util/MapUtils.java
index c3e33cafd4..c00e502b02 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/util/MapUtils.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/util/MapUtils.java
@@ -115,4 +115,5 @@ public class MapUtils {
     return buf.toString();
   }
 
+  private MapUtils() {}
 }
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/util/NumberUtils.java b/core/src/main/java/org/mule/runtime/core/privileged/util/NumberUtils.java
index 9c01e44a76..8901d21e3b 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/util/NumberUtils.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/util/NumberUtils.java
@@ -122,4 +122,5 @@ public class NumberUtils {
         + "] to target class [" + targetClass.getName() + "]: overflow");
   }
 
+  private NumberUtils() {}
 }
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/util/annotation/AnnotationMetaData.java b/core/src/main/java/org/mule/runtime/core/privileged/util/annotation/AnnotationMetaData.java
index 1cf0e9a03c..fb17b7bd85 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/util/annotation/AnnotationMetaData.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/util/annotation/AnnotationMetaData.java
@@ -14,7 +14,7 @@ import java.lang.reflect.Member;
  * A data class that associates context information about an annotation. This class allows for associated annotation data to be
  * passed between methods.
  */
-public class AnnotationMetaData {
+public final class AnnotationMetaData {
 
   private ElementType type;
 
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/util/annotation/AnnotationUtils.java b/core/src/main/java/org/mule/runtime/core/privileged/util/annotation/AnnotationUtils.java
index 166c8caddc..4497b2e8e5 100755
--- a/core/src/main/java/org/mule/runtime/core/privileged/util/annotation/AnnotationUtils.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/util/annotation/AnnotationUtils.java
@@ -29,4 +29,6 @@ public class AnnotationUtils {
   public static <T extends Annotation> Optional<T> getAnnotation(Class<?> aClass, Class<T> annotationType) {
     return aClass != null ? ofNullable(aClass.getAnnotation(annotationType)) : empty();
   }
+
+  private AnnotationUtils() {}
 }
diff --git a/core/src/main/java/org/mule/runtime/core/privileged/util/monitor/ExpiryMonitor.java b/core/src/main/java/org/mule/runtime/core/privileged/util/monitor/ExpiryMonitor.java
index 4eea9a4313..a71cc688a0 100644
--- a/core/src/main/java/org/mule/runtime/core/privileged/util/monitor/ExpiryMonitor.java
+++ b/core/src/main/java/org/mule/runtime/core/privileged/util/monitor/ExpiryMonitor.java
@@ -25,7 +25,7 @@ import org.slf4j.Logger;
  * <code>ExpiryMonitor</code> can monitor objects beased on an expiry time and can invoke a callback method once the object time
  * has expired. If the object does expire it is removed from this monitor.
  */
-public class ExpiryMonitor implements Runnable, Disposable {
+public final class ExpiryMonitor implements Runnable, Disposable {
 
   /**
    * logger used by this class
