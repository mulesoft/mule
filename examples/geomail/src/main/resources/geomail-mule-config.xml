<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
      xmlns:imaps="http://www.mulesoft.org/schema/mule/imaps"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
      xmlns:ajax="http://www.mulesoft.org/schema/mule/ajax"
      xmlns:json="http://www.mulesoft.org/schema/mule/json"
      xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz"
      xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
        http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd
        http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
        http://www.mulesoft.org/schema/mule/imaps http://www.mulesoft.org/schema/mule/imaps/current/mule-imaps.xsd
        http://www.mulesoft.org/schema/mule/ajax http://www.mulesoft.org/schema/mule/ajax/current/mule-ajax.xsd
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
        http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
        http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd">

    <spring:beans>
        <spring:import resource="classpath:components.xml"/>
    </spring:beans>

    <vm:connector name="vmConnector"/>

    <http:connector name="defaultHttpConnector"/>

    <!-- # Transformer Definitions -->

    <mulexml:xslt-transformer name="FraudlabsXSLT" xsl-file="xsl/IP2LocationToSender.xsl"/>
    <mulexml:xslt-transformer name="HostIpXSLT" xsl-file="xsl/HostIpToSender.xsl"/>

    <mulexml:xml-to-object-transformer name="XmlToSender">
        <mulexml:alias name="sender" class="org.mule.example.geomail.dao.Sender"/>
    </mulexml:xml-to-object-transformer>

    <json:object-to-json-transformer name="SenderToJson" sourceClass="org.mule.example.geomail.dao.Sender"/>

    <custom-transformer name="IP2Sender" class="org.mule.example.geomail.transformers.IPToSender">
        <spring:property name="senderDao" ref="senderDao"/>
    </custom-transformer>

    <custom-filter name="inCacheFilter" class="org.mule.example.geomail.routing.InCacheFilter">
        <spring:property name="senderDao" ref="senderDao"/>
    </custom-filter>

    <!-- # Endpoint Definitions -->

    <!-- Todo add your email server here, note that Gmail, Yahoo, etc cannot be used since they do not set the sender ip addrsss -->
    <!--<imaps:endpoint name="Input" host="imap.mycompany.com" user="x" password="y"/>-->

    <quartz:endpoint name="quartzTrigger" repeatInterval="2000" jobName="dataGenerator">
        <quartz:event-generator-job/>
    </quartz:endpoint>

    <vm:endpoint name="Gatekeeper" path="channels/gatekeeper" exchange-pattern="one-way"/>
    <vm:endpoint name="Geocoder" path="channels/geocoder" exchange-pattern="one-way"/>
    <vm:endpoint name="Fraudlabs" path="channels/fraudlabs" exchange-pattern="one-way"/>
    <vm:endpoint name="Positions" path="channels/positions" exchange-pattern="one-way"/>
    <vm:endpoint name="Storage" path="channels/storage" exchange-pattern="one-way"/>
    <vm:endpoint name="Aggregator" path="channels/positions/aggregator" exchange-pattern="one-way"/>

    <ajax:servlet-endpoint name="Output" channel="/GEOMAIL">
        <transformer ref="SenderToJson"/>
    </ajax:servlet-endpoint>

    <flow name="DataGeneratorMailService">
        <description>
            A service used to create test data. It uses a quartz endpoint to trigger the test method and generates
            random ip addresses. This mimics the Mailservice receiving an email and retrieving the from IP address.
        </description>
        <inbound-endpoint ref="quartzTrigger"/>
        <component>
            <spring-object bean="mailGeneratorComponent"/>
        </component>
        <collection-splitter/>
        <outbound-endpoint ref="Gatekeeper"/>
    </flow>

    <flow name="MailService">
        <description>
            Component receives email and sends out the trail of IP-addresses as individual messages.
        </description>
        <!--<inbound>-->
        <!-- TODO <inbound-endpoint ref="Input"/>-->
        <!--</inbound>-->

        <component>
            <spring-object bean="mailComponent"/>
        </component>

        <collection-splitter/>
        <outbound-endpoint ref="Gatekeeper"/>
    </flow>

    <flow name="GatekeeperService">
        <description>
            Only sends IP that are not in the database on to GeoCoding
        </description>
        <inbound-endpoint ref="Gatekeeper"/>

        <choice>
            <when>
                <outbound-endpoint ref="Geocoder"/>
                <not-filter>
                    <filter ref="inCacheFilter"/>
                </not-filter>
            </when>
            <when>
                <outbound-endpoint ref="Positions">
                    <transformer ref="IP2Sender"/>
                </outbound-endpoint>
                <filter ref="inCacheFilter"/>
            </when>
        </choice>
    </flow>

    <flow name="HostipInfoService">
        <description>
            Uses the HostIP web service to lookup location information about the current IP address. Note that
            if the invocation of the HostIP Web Service fails, the fraudlabs web service will be used as a backup
        </description>
        <inbound-endpoint ref="Geocoder"/>

        <http:rest-service-component serviceUrl="http://api.hostip.info" httpMethod="GET">
            <http:payloadParameterName value="ip"/>
        </http:rest-service-component>

        <outbound-endpoint ref="Storage">
            <transformer ref="HostIpXSLT"/>
            <transformer ref="XmlToSender"/>
        </outbound-endpoint>

        <default-exception-strategy>
            <outbound-endpoint ref="Fraudlabs"/>
        </default-exception-strategy>
    </flow>

    <flow name="FraudlabsService">
        <description>
            This is the backup GeoLocation service used to find location info for an IP address
        </description>
        <inbound-endpoint ref="Fraudlabs"/>
        <http:rest-service-component
                serviceUrl="http://ws.fraudlabs.com/ws.fraudlabs.com_non_ssl/ip2locationwebservice.asmx/IP2Location?LICENSE=02-J73Z-N42F"
                httpMethod="POST">
            <http:payloadParameterName value="IP"/>
        </http:rest-service-component>
        <outbound-endpoint ref="Storage">
            <transformer ref="FraudlabsXSLT"/>
            <transformer ref="XmlToSender"/>
        </outbound-endpoint>
    </flow>

    <flow name="StorageService">
        <description>
            This service is responsible for storing the Sender location information so that we do not need to
            lookup the information the next time the same IP address is used.
        </description>
        <inbound-endpoint ref="Storage"/>
        <component>
            <spring-object bean="storageComponent"/>
        </component>
        <outbound-endpoint ref="Aggregator"/>
    </flow>


    <flow name="ValidPositionAggregatorService">
        <description>
            This service filters out any Senders that we couldn't find latitude and longitude coordinates for, it sends
            the valid
            senders as an ajax event to the browser.
        </description>
        <inbound-endpoint ref="Aggregator"/>
        <expression-filter evaluator="groovy" expression="payload.latitude != null &amp; payload.longitude != null"/>
        <outbound-endpoint ref="Output"/>
    </flow>

</mule>
