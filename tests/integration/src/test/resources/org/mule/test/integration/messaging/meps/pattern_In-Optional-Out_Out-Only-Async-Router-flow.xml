<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:mule="http://www.mulesoft.org/schema/mule/core"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xmlns:script="http://www.mulesoft.org/schema/mule/scripting"
      xsi:schemaLocation="
       http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
       http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd
       http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">

    <!--// START SNIPPET: full-config -->
    <description>
        Receives a message from another party and processes the message. Then the message is sent to another service (or
        application) for processing. A Reply-To endpoint is attached to the message and this is used by the second
        service to return a result. Note that if the external service is not a Mule instance the protocol being used
        will have to have the notion of a back channel or reply-to destination, i.e. JMS, WS-Addressing, Socket-bsed
        protocols.
        Since the response is optional, the &lt;async-reply&gt; router timeout should be reduced since, it will block
        for the whole time if no reply is given.

        This MEP combination should *ONLY* be used in low message volume scenarios. In high volume scenarios the pattern
        In-Out, Out-Only (async) should be used and a response always returned, even if it is an empty or
        acknowledgement message.

        Note: this fails with ActiveMQ because of an outstanding issue on the part of ActiveMQ for handling temporary
        destinations.
    </description>
    
    <flow name="In-Out_Out-Only-Async-Service">
        <script:component>
            <script:script engine="groovy">
                if (message.getInboundProperty("foo") != null)
                    return message
                else
                {
                    return null
                }
            </script:script>
        </script:component>
        
        <mule:message-filter>
            <mule:not-filter>
                <mule:expression-filter expression="#[mel:payload == null]"/>
            </mule:not-filter>
        </mule:message-filter>
                
        <flow-ref name="ExternalApp"/>
    </flow>    
    

    <flow name="ExternalApp">
        <test:component>
            <test:return-data>got it!</test:return-data>
        </test:component>
    </flow>
    
    <!--// END SNIPPET: full-config -->
</mule>
