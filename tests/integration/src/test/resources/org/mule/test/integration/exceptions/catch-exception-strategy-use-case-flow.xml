<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
      xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:https="http://www.mulesoft.org/schema/mule/https"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xmlns:tcp="http://www.mulesoft.org/schema/mule/tcp"
      xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf"
      xmlns:json="http://www.mulesoft.org/schema/mule/json"
      xmlns:script="http://www.mulesoft.org/schema/mule/scripting"
      xsi:schemaLocation="
       http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
       http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd
       http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
       http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
       http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
       http://www.mulesoft.org/schema/mule/https http://www.mulesoft.org/schema/mule/https/current/mule-https.xsd
       http://www.mulesoft.org/schema/mule/tcp http://www.mulesoft.org/schema/mule/tcp/current/mule-tcp.xsd
       http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
       http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
       http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">

    <https:connector name="httpsConnector">
        <https:tls-key-store path="serverKeystore" keyPassword="mulepassword" storePassword="mulepassword"/>
    </https:connector>

    <jms:activemq-connector name="activeMq"/>

    <flow name="httpContinueProcessingActualMessage">
        <http:inbound-endpoint host="localhost" port="${port1}" path="service"/>
        <json:json-to-object-transformer returnClass="org.mule.test.integration.exceptions.CatchExceptionStrategyTestCase$NewsRequest"/>
        <custom-processor class="org.mule.test.integration.exceptions.CatchExceptionStrategyTestCase$LoadNewsProcessor"/>
        <test:component throwException="true"/>
        <catch-exception-strategy>
            <custom-processor class="org.mule.test.integration.exceptions.CatchExceptionStrategyTestCase$NewsErrorProcessor"/>
            <json:object-to-json-transformer/>
        </catch-exception-strategy>
    </flow>

    <flow name="httpsContinueProcessingActualMessage">
        <https:inbound-endpoint host="localhost" port="${port3}" path="httpsservice"/>
        <json:json-to-object-transformer returnClass="org.mule.test.integration.exceptions.CatchExceptionStrategyTestCase$NewsRequest"/>
        <custom-processor class="org.mule.test.integration.exceptions.CatchExceptionStrategyTestCase$LoadNewsProcessor"/>
        <test:component throwException="true"/>
        <catch-exception-strategy>
            <custom-processor class="org.mule.test.integration.exceptions.CatchExceptionStrategyTestCase$NewsErrorProcessor"/>
            <json:object-to-json-transformer/>
        </catch-exception-strategy>
    </flow>

    <flow name="vmContinueProcessingActualMessage">
        <vm:inbound-endpoint path="in" exchange-pattern="request-response"/>
        <json:json-to-object-transformer returnClass="org.mule.test.integration.exceptions.CatchExceptionStrategyTestCase$NewsRequest"/>
        <custom-processor class="org.mule.test.integration.exceptions.CatchExceptionStrategyTestCase$LoadNewsProcessor"/>
        <test:component throwException="true"/>
        <catch-exception-strategy>
            <custom-processor class="org.mule.test.integration.exceptions.CatchExceptionStrategyTestCase$NewsErrorProcessor"/>
            <json:object-to-json-transformer/>
        </catch-exception-strategy>
    </flow>

    <flow name="jmsContinueProcessingActualMessage">
        <jms:inbound-endpoint queue="in" exchange-pattern="request-response"/>
        <json:json-to-object-transformer returnClass="org.mule.test.integration.exceptions.CatchExceptionStrategyTestCase$NewsRequest"/>
        <custom-processor class="org.mule.test.integration.exceptions.CatchExceptionStrategyTestCase$LoadNewsProcessor"/>
        <test:component throwException="true"/>
        <catch-exception-strategy>
            <custom-processor class="org.mule.test.integration.exceptions.CatchExceptionStrategyTestCase$NewsErrorProcessor"/>
            <json:object-to-json-transformer/>
        </catch-exception-strategy>
    </flow>

    <flow name="tcpContinueProcessingActualMessage">
        <tcp:inbound-endpoint port="${port2}" host="localhost" exchange-pattern="request-response"/>
        <json:json-to-object-transformer returnClass="org.mule.test.integration.exceptions.CatchExceptionStrategyTestCase$NewsRequest"/>
        <custom-processor class="org.mule.test.integration.exceptions.CatchExceptionStrategyTestCase$LoadNewsProcessor"/>
        <test:component throwException="true"/>
        <catch-exception-strategy>
            <custom-processor class="org.mule.test.integration.exceptions.CatchExceptionStrategyTestCase$NewsErrorProcessor"/>
            <json:object-to-json-transformer/>
        </catch-exception-strategy>
    </flow>    
    
    <flow name="catchWithComponent">
      <vm:inbound-endpoint path="in2">
          <vm:transaction action="ALWAYS_BEGIN"/>
      </vm:inbound-endpoint>
      <test:component throwException="true"/>
      <catch-exception-strategy>
        <script:component>
            <script:script engine="groovy">
                return "$payload Caught"
            </script:script>
        </script:component>
      </catch-exception-strategy>
    </flow>

    <flow name="fullyDefinedCatchExceptionStrategyWithComponent">
        <vm:inbound-endpoint path="in3" exchange-pattern="request-response"/>
        <append-string-transformer message=" apt1"/>
        <test:component throwException="true"/>
        <catch-exception-strategy>
            <append-string-transformer message=" apt2"/>
	        <script:component>
	            <script:script engine="groovy">
	                return "$payload groovified"
	            </script:script>
	        </script:component>
        </catch-exception-strategy>
    </flow>

</mule>
