<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf"
      xsi:schemaLocation="
               http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
               http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
               http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd
               http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
               http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
               http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd">

    <notifications>
        <notification event="MESSAGE-PROCESSOR"/>
    </notifications>

    <spring:bean name="notificationLogger" class="org.mule.context.notification.processors.MessageProcessorNotificationLogger"/>

    <notifications>
        <notification-listener ref="notificationLogger"/>
    </notifications>

    <spring:bean id="objectStore" class="org.mule.util.store.SimpleMemoryObjectStore"/>

    <flow name="singleMP">
        <vm:inbound-endpoint path="in-single" exchange-pattern="request-response"/>
        <logger message="check"/>
    </flow>

    <flow name="cxfMP">
        <vm:inbound-endpoint path="in-cxf" exchange-pattern="request-response"/>
        <cxf:jaxws-service port="80" serviceClass="org.mule.context.notification.CxfSimpleService"
                           enableMuleSoapHeaders="false"/>
        <logger message="check1"/>
        <logger message="check2"/>
    </flow>

    <flow name="singleMP2">
        <vm:inbound-endpoint path="in-single2" exchange-pattern="request-response"/>
        <collection-splitter/>
        <logger message="check"/>
    </flow>

    <flow name="singleMP3">
        <vm:inbound-endpoint path="in-single3" exchange-pattern="request-response"/>
        <collection-splitter/>
        <logger message="check"/>
        <logger message="check"/>
    </flow>


    <flow name="processorChain2">
        <vm:inbound-endpoint path="in-processorChain2" exchange-pattern="request-response"/>
        <processor-chain>
            <collection-splitter/>
            <logger message="check1"/>
            <logger message="check2"/>
        </processor-chain>
    </flow>

    <flow name="processorChain3">
        <vm:inbound-endpoint path="in-processorChain3" exchange-pattern="request-response"/>
        <processor-chain>
            <collection-splitter/>
            <logger message="check1"/>
        </processor-chain>
    </flow>

    <flow name="processorChain4">
        <vm:inbound-endpoint path="in-processorChain4" exchange-pattern="request-response"/>
        <processor-chain>
            <logger message="check1"/>
            <logger message="check2"/>
        </processor-chain>
        <logger message="check3"/>
    </flow>

    <flow name="processorChain">
        <vm:inbound-endpoint path="in-processorChain" exchange-pattern="request-response"/>
        <processor-chain>
            <logger message="check1"/>
            <logger message="check2"/>
        </processor-chain>
    </flow>

    <flow name="customProcessor">
        <vm:inbound-endpoint path="customProcessor" exchange-pattern="request-response"/>
        <custom-processor class="org.mule.tck.testmodels.mule.TestMessageProcessor"/>
        <logger level="INFO"/>
    </flow>

    <flow name="choice">
        <vm:inbound-endpoint path="in-choice" exchange-pattern="request-response"/>
        <choice>
            <when expression="payload == 'test1'">
                <logger message="check1"/>
            </when>
            <when expression="payload == 'test2'">
                <logger message="check2"/>
            </when>
            <otherwise>
                <logger message="check3"/>
            </otherwise>
        </choice>
    </flow>

    <flow name="choice2">
        <vm:inbound-endpoint path="in-choice2" exchange-pattern="request-response"/>
        <choice>
            <when expression="payload == 'test1'">
                <collection-splitter/>
                <logger message="check"/>
            </when>
            <when expression="payload == 'test2'">
                <logger message="check"/>
            </when>
            <otherwise>
                <collection-splitter/>
                <logger message="check"/>
            </otherwise>
        </choice>
    </flow>

    <flow name="scatterGather">
        <vm:inbound-endpoint path="in-scatterGather" exchange-pattern="request-response"/>
        <scatter-gather>
            <logger message="check1"/>
            <processor-chain>
                <logger message="check2"/>
                <logger message="check3"/>
            </processor-chain>
        </scatter-gather>
    </flow>

    <flow name="all">
        <vm:inbound-endpoint path="in-all" exchange-pattern="request-response"/>
        <all>
            <processor-chain>
                <logger/>
            </processor-chain>
            <processor-chain>
                <logger/>
            </processor-chain>
        </all>
        <logger message="Log after a scope"/>
    </flow>

    <flow name="all2">
        <vm:inbound-endpoint path="in-all2" exchange-pattern="request-response"/>
        <all>
            <processor-chain>
                <collection-splitter/>
                <logger message="check"/>
            </processor-chain>
            <processor-chain>
                <collection-splitter/>
                <logger message="check"/>
            </processor-chain>
        </all>
        <logger message="Log after a scope"/>
    </flow>

    <flow name="all3">
        <vm:inbound-endpoint path="in-all3" exchange-pattern="request-response"/>
        <all>
            <logger message="check"/>
            <logger message="check"/>
        </all>
        <logger message="Log after a scope"/>
    </flow>

    <flow name="foreach">
        <vm:inbound-endpoint path="in-foreach" exchange-pattern="request-response"/>
        <foreach collection="#[{'one','two'}]">
            <logger/>
        </foreach>
        <logger message="Log after a scope"/>
    </flow>

    <flow name="enricher">
        <vm:inbound-endpoint path="in-enricher" exchange-pattern="request-response"/>
        <enricher>
            <append-string-transformer message="Hello"/>
            <enrich target="#[header:OUTBOUND:helloHeader]"/>
            <enrich target="#[header:OUTBOUND:helloHeader2]"/>
        </enricher>
        <enricher target="#[header:OUTBOUND:echoHeader]" source="#[payload]">
            <processor-chain>
                <echo-component/>
                <echo-component/>
            </processor-chain>
        </enricher>
    </flow>

    <flow name="until-successful">
        <vm:inbound-endpoint path="until-successful" exchange-pattern="request-response"/>
        <until-successful objectStore-ref="objectStore">
            <vm:outbound-endpoint path="out-us" exchange-pattern="request-response"/>
        </until-successful>
        <logger message="check1"/>
    </flow>

    <flow name="until-successful-with-processor-chain">
        <vm:inbound-endpoint path="until-successful-with-processor-chain" exchange-pattern="request-response"/>
        <until-successful objectStore-ref="objectStore">
            <processor-chain>
                <logger message="check1"/>
                <vm:outbound-endpoint path="out-us" exchange-pattern="request-response"/>
            </processor-chain>
        </until-successful>
        <logger message="check2"/>
    </flow>

    <flow name="until-successful-with-enricher">
        <vm:inbound-endpoint path="until-successful-with-enricher" exchange-pattern="request-response"/>
        <until-successful objectStore-ref="objectStore">
            <enricher source="#[payload]" target="#[payload]">
                <append-string-transformer message="Hello"/>
            </enricher>
        </until-successful>
        <append-string-transformer message="Hello"/>
    </flow>

    <flow name="async">
        <vm:inbound-endpoint path="in-async" exchange-pattern="request-response"/>
        <async>
            <logger message="check1"/>
            <logger message="check2"/>
        </async>
    </flow>

    <flow name="filters">
        <vm:inbound-endpoint path="in-filter" exchange-pattern="request-response"/>
        <payload-type-filter expectedType="java.lang.String"/>
        <or-filter>
            <exception-type-filter expectedType="java.lang.Throwable"/>
            <payload-type-filter expectedType="java.lang.String"/>
        </or-filter>
    </flow>

    <flow name="idempotent-msg-filter">
        <vm:inbound-endpoint path="idem-msg-filter" exchange-pattern="request-response"/>
        <idempotent-message-filter idExpression="#[message:id]">
            <in-memory-store entryTTL="1000" expirationInterval="2000" maxEntries="3000"/>
        </idempotent-message-filter>
        <logger level="INFO"/>
    </flow>

    <flow name="idempotent-secure-hash-msg-filter">
        <vm:inbound-endpoint path="idem-sh-msg-filter" exchange-pattern="request-response"/>
        <idempotent-secure-hash-message-filter idExpression="#[message:id]">
            <in-memory-store entryTTL="1000" expirationInterval="2000" maxEntries="3000"/>
        </idempotent-secure-hash-message-filter>
        <logger level="INFO"/>
    </flow>

    <flow name="subflow">
        <vm:inbound-endpoint path="in-subflow" exchange-pattern="request-response"/>
        <echo-component/>
        <flow-ref name="subflow-call"/>
    </flow>

    <flow name="subflow2">
        <vm:inbound-endpoint path="in-subflow2" exchange-pattern="request-response"/>
        <echo-component/>
        <flow-ref name="subflow-call"/>
        <logger/>
    </flow>

    <flow name="subflow/With/Slash">
        <vm:inbound-endpoint path="in-subflow3" exchange-pattern="request-response"/>
        <echo-component/>
        <flow-ref name="subflow/call"/>
        <logger/>
    </flow>

    <sub-flow name="subflow-call">
        <splitter expression="#[{'one'}]"/>
        <logger/>
    </sub-flow>

    <sub-flow name="subflow/call">
        <splitter expression="#[{'one'}]"/>
        <logger/>
    </sub-flow>

    <flow name="catch-es">
        <vm:inbound-endpoint path="in-catch" exchange-pattern="request-response"/>
        <test:component throwException="true"/>
        <catch-exception-strategy>
            <logger/>
        </catch-exception-strategy>
    </flow>

    <flow name="rollback-es">
        <vm:inbound-endpoint path="in-rollback" exchange-pattern="request-response"/>
        <test:component throwException="true"/>
        <rollback-exception-strategy>
            <logger/>
            <on-redelivery-attempts-exceeded>
                <echo-component/>
            </on-redelivery-attempts-exceeded>
        </rollback-exception-strategy>
    </flow>

    <flow name="choice-es">
        <vm:inbound-endpoint path="in-choice-es" exchange-pattern="request-response"/>
        <test:component throwException="true"/>
        <choice-exception-strategy>
            <rollback-exception-strategy when="#[exception.causedBy(java.io.IOException)]" maxRedeliveryAttempts="1">
                <echo-component/>
                <on-redelivery-attempts-exceeded>
                    <logger/>
                </on-redelivery-attempts-exceeded>
            </rollback-exception-strategy>
            <catch-exception-strategy>
                <echo-component/>
            </catch-exception-strategy>
        </choice-exception-strategy>
    </flow>

    <catch-exception-strategy name="Global_Exception_Strategy">
        <logger level="INFO"/>
        <logger level="INFO"/>
    </catch-exception-strategy>

    <flow name="global-es">
        <vm:inbound-endpoint path="in-global" exchange-pattern="request-response"/>
        <test:component throwException="true"/>
        <exception-strategy ref="Global_Exception_Strategy"/>
    </flow>

    <flow name="request-reply">
        <vm:inbound-endpoint path="request-reply" exchange-pattern="request-response"/>
        <request-reply storePrefix="mainFlow">
            <vm:outbound-endpoint path="request"/>
            <vm:inbound-endpoint path="reply"/>
        </request-reply>
        <logger message="ProcessReqReplyOrder"/>
    </flow>

    <flow name="handle-request-reply">
        <vm:inbound-endpoint path="request"/>
        <logger message="GenerateReqReplyOrder"/>
    </flow>

    <flow name="composite-source">
        <composite-source>
            <vm:inbound-endpoint path="cs1" exchange-pattern="request-response"/>
            <vm:inbound-endpoint path="cs2" exchange-pattern="request-response"/>
            <vm:inbound-endpoint path="cs3" exchange-pattern="request-response"/>
            <vm:inbound-endpoint path="cs4" exchange-pattern="request-response"/>
        </composite-source>
        <logger level="INFO"/>
    </flow>

    <flow name="first-successful">
        <vm:inbound-endpoint path="fsucc" exchange-pattern="request-response"/>
        <logger level="INFO"/>
        <first-successful>
            <http:outbound-endpoint address="http://localhost:6090/weather-forecast"/>
            <http:outbound-endpoint address="http://localhost:6091/weather-forecast"/>
            <http:outbound-endpoint address="http://localhost:6092/weather-forecast"/>
            <vm:outbound-endpoint path="dead-letter-queue"/>
        </first-successful>
    </flow>

    <flow name="round-robin">
        <vm:inbound-endpoint path="round-robin" exchange-pattern="request-response"/>
        <round-robin>
            <logger message="First-RRMP"/>
            <logger message="Second-RRMP"/>
            <logger message="Third-RRMP"/>
        </round-robin>
        <logger level="INFO"/>
    </flow>

    <flow name="recipient-list">
        <vm:inbound-endpoint path="recipient-list" exchange-pattern="request-response"/>
        <recipient-list enableCorrelation="ALWAYS" evaluator="payload" expression=""/>
        <logger level="INFO"/>
    </flow>

    <vm:endpoint name="recipient" path="recipient"/>

    <flow name="collectionAggregator">
        <vm:inbound-endpoint path="collection-agg" exchange-pattern="request-response"/>
        <collection-splitter/>
        <logger level="INFO"/>
        <collection-aggregator failOnTimeout="false" timeout="3600"/>
    </flow>

    <flow name="customAggregator">
        <vm:inbound-endpoint path="custom-agg" exchange-pattern="request-response"/>
        <collection-splitter/>
        <custom-aggregator class="org.mule.routing.outbound.AggregationTestCase$Aggregator" timeout="2000"
                           failOnTimeout="false"/>
        <logger level="INFO"/>
    </flow>

    <flow name="chunkAggregator">
        <vm:inbound-endpoint path="chunk-agg" exchange-pattern="request-response"/>
        <message-chunk-splitter messageSize="1"/>
        <logger level="INFO"/>
        <message-chunk-aggregator/>
        <logger level="INFO"/>
    </flow>

    <flow name="combineCollections">
        <vm:inbound-endpoint path="combine" exchange-pattern="request-response"/>
        <combine-collections-transformer/>
        <logger level="INFO"/>
    </flow>

    <flow name="wire-tap">
        <vm:inbound-endpoint path="wire-tap" exchange-pattern="request-response"/>
        <wire-tap>
            <vm:outbound-endpoint path="tapped.channel"/>
        </wire-tap>
        <logger level="INFO"/>
    </flow>
</mule>
