<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:util="http://www.springframework.org/schema/util"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-current.xsd
       http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
       http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd">

    <configuration defaultResponseTimeout="10" defaultTransactionTimeout="20" shutdownTimeout="30">
        <default-threading-profile maxBufferSize="42" maxThreadsActive="16"
                                   maxThreadsIdle="3" poolExhaustedAction="WAIT" threadTTL="60001"/>
    </configuration>

    <global-property name="doCompression" value="true"/>
    <global-property name="beanProperty1" value="this was set from the manager properties!"/>
    <global-property name="OS_Version" value="not found"/>

    <spring:bean name="txManagerFactory" class="org.mule.tck.testmodels.mule.TestTransactionManagerFactory"/>

    <custom-connector name="dummyConnector" class="org.mule.tck.testmodels.mule.TestConnector">
        <spring:property name="someProperty" value="someValue"/>
        <dispatcher-threading-profile maxBufferSize="2"/>
        <service-overrides
                xaTransactedMessageReceiver="org.mule.tck.testmodels.mule.TestMessageReceiver"
                messageFactory="org.mule.test.spring.MockMuleMessageFactory"/>
    </custom-connector>

    <custom-transformer name="TestCompressionTransformer"
                        class="org.mule.tck.testmodels.mule.TestCompressionTransformer" returnClass="java.lang.String">
        <spring:property name="beanProperty2" value="12"/>
        <spring:property name="containerProperty" value="myString"/>
    </custom-transformer>

    <endpoint name="fruitBowlEndpoint" address="test://fruitBowlPublishQ" exchange-pattern="one-way">
        <message-property-filter pattern="foo=bar"/>
    </endpoint>
    <endpoint name="waterMelonEndpoint" address="test://test.queue" exchange-pattern="one-way"
              encoding="UTF-8-TEST"/>
    <endpoint name="appleInEndpoint" address="test://AppleQueue" exchange-pattern="one-way"/>
    <endpoint name="appleResponseEndpoint" address="test://AppleResponseQueue" exchange-pattern="one-way"/>
    <endpoint name="orangeEndpoint" address="test://orangeQ" exchange-pattern="one-way">
        <property key="beanProperty2" value="12"/>
        <property key="containerProperty" value="myString"/>
    </endpoint>
    <endpoint name="testEPWithCS" address="test://test.queue2" exchange-pattern="one-way"/>

    <endpoint name="endpointWithProps" address="test://endpointWithProps" exchange-pattern="one-way">
        <properties>
            <spring:entry key="brand" value="Juicy Baby!"/>
            <spring:entry key="segments" value="9"/>
            <spring:entry key="radius" value="4.21"/>
            <spring:entry key="mapProperties">
                <spring:map>
                    <spring:entry key="prop1" value="prop1"/>
                    <spring:entry key="prop2" value="prop2"/>
                </spring:map>
            </spring:entry>
            <spring:entry key="listProperties">
                <spring:list>
                    <spring:value>prop1</spring:value>
                    <spring:value>prop2</spring:value>
                    <spring:value>prop3</spring:value>
                </spring:list>
            </spring:entry>
            <spring:entry key="arrayProperties">
                <spring:list>
                    <spring:value>prop4</spring:value>
                    <spring:value>prop5</spring:value>
                    <spring:value>prop6</spring:value>
                </spring:list>
            </spring:entry>
        </properties>
    </endpoint>

    <spring:bean name="apple" class="org.mule.tck.testmodels.fruit.Apple"/>

    <spring:bean name="orange" class="org.mule.tck.testmodels.fruit.Orange">
        <spring:property name="brand" value="Juicy Baby!"/>
        <spring:property name="segments" value="9"/>
        <spring:property name="radius" value="4.21"/>
        <spring:property name="mapProperties">
            <spring:map>
                <spring:entry key="prop1" value="prop1"/>
                <spring:entry key="prop2" value="prop2"/>
            </spring:map>
        </spring:property>
        <spring:property name="listProperties">
            <spring:list>
                <spring:value>prop1</spring:value>
                <spring:value>prop2</spring:value>
                <spring:value>prop3</spring:value>
            </spring:list>
        </spring:property>
        <spring:property name="arrayProperties">
            <spring:list>
                <spring:value>prop4</spring:value>
                <spring:value>prop5</spring:value>
                <spring:value>prop6</spring:value>
            </spring:list>
        </spring:property>
    </spring:bean>

    <interceptor-stack name="testInterceptorStack">
        <logging-interceptor/>
        <timer-interceptor/>
        <custom-interceptor class="org.mule.runtime.core.interceptor.LoggingInterceptor"/>
    </interceptor-stack>

    <custom-exception-strategy class="org.mule.tck.testmodels.mule.TestExceptionStrategy">
        <outbound-endpoint address=" test://component.exceptions " exchange-pattern="one-way"/>
        <spring:property name="testProperty" value="testValue"/>
    </custom-exception-strategy>

    <flow name="orangeComponent">
        <composite-source>
            <inbound-endpoint name="Orange" address="test://orange/" exchange-pattern="one-way">
                <transformer ref="TestCompressionTransformer"/>
                <response>
                    <transformer ref="TestCompressionTransformer"/>
                </response>
            </inbound-endpoint>
            <inbound-endpoint ref="orangeEndpoint" exchange-pattern="one-way">
                <payload-type-filter expectedType="java.lang.String"/>
                <transformer ref="TestCompressionTransformer"/>
                <property key="testLocal" value="value1"/>
            </inbound-endpoint>
        </composite-source>

        <component>
            <logging-interceptor/>
            <interceptor-stack ref="testInterceptorStack"/>
            <timer-interceptor/>
            <custom-entry-point-resolver-set class="org.mule.tck.testmodels.mule.TestEntryPointResolverSet">
                <spring:property name="testProperty" value="testValue"/>
            </custom-entry-point-resolver-set>
            <spring-object bean="orange"/>
            <binding interface="org.mule.tck.testmodels.fruit.FruitCleaner" method="wash">
                <outbound-endpoint address="test://do.wash" exchange-pattern="one-way"/>
            </binding>
            <binding interface="org.mule.tck.testmodels.fruit.FruitCleaner" method="polish">
                <outbound-endpoint address="test://do.polish" exchange-pattern="one-way"/>
            </binding>
        </component>

        <request-reply timeout="10001">
            <outbound-endpoint ref="appleInEndpoint" exchange-pattern="one-way">
                <transformer ref="TestCompressionTransformer"/>
            </outbound-endpoint>
            <inbound-endpoint ref="appleResponseEndpoint">
                <custom-aggregator class="org.mule.tck.testmodels.mule.TestResponseAggregator">
                    <spring:property name="testProperty" value="testValue"/>
                </custom-aggregator>
            </inbound-endpoint>
        </request-reply>

        <default-exception-strategy>
            <outbound-endpoint address="test://orange.exceptions" exchange-pattern="one-way"/>
        </default-exception-strategy>

    </flow>

    <!-- MULE-3932 Ensure interceptors can be used with shortcut component config -->
    <flow name="MULE3932Service">
        <component class="org.mule.tck.testmodels.fruit.Apple">
            <logging-interceptor/>
        </component>
    </flow>

    <flow name="appleComponent">
        <inbound-endpoint ref="appleInEndpoint">
            <payload-type-filter expectedType="java.lang.String"/>
            <idempotent-message-filter/>
        </inbound-endpoint>
        <component>
            <spring-object bean="apple"/>
        </component>
        <choice>
            <when>
                <outbound-endpoint address="test://appleQ2" name="TestApple-Out" exchange-pattern="one-way">
                    <transformer ref="TestCompressionTransformer"/>
                </outbound-endpoint>
                <payload-type-filter expectedType="java.lang.String"/>
            </when>
            <when>
                <outbound-endpoint ref="waterMelonEndpoint"/>
                <and-filter>
                    <regex-filter pattern="the quick brown (.*)"/>
                    <regex-filter pattern="(.*) brown (.*)"/>
                </and-filter>
            </when>
        </choice>
    </flow>

    <flow name="anotherComponent">
        <inbound-endpoint address="test://KiwiIn" exchange-pattern="one-way"/>
        <custom-aggregator class="org.mule.tck.testmodels.mule.TestCorrelationAggregator">
            <spring:property name="testProperty" value="testValue"/>
        </custom-aggregator>
        <component class="org.mule.tck.testmodels.fruit.Kiwi"/>
    </flow>

</mule>
