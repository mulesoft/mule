<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">

    <spring:beans>
        <spring:bean id="objectStore" class="org.mule.runtime.core.util.store.SimpleMemoryObjectStore"/>
    </spring:beans>

    <flow name="withSplitterAggregatorTest">
        <set-payload value="#[mel:{1,2}]"/>
        <collection-splitter/>
        <until-successful maxRetries="2" objectStore-ref="objectStore" millisBetweenRetries="2000">
            <processor-chain>
                <expression-component><![CDATA[mel:throw new Exception("error");]]></expression-component>
            </processor-chain>
        </until-successful>
        <collection-aggregator/>
        <!--wait until all events fail-->
        <custom-processor class="org.mule.test.integration.routing.UntilSuccessfulExceptionStrategyTestCase$LockProcessor"/>
        <set-payload value="ok"/>
        <error-handler>
            <on-error-continue>
                <!--release when all events have failed-->
                <custom-processor class="org.mule.test.integration.routing.UntilSuccessfulExceptionStrategyTestCase$WaitTwiceBeforeUnlockProcessor"/>
            </on-error-continue>
        </error-handler>
    </flow>


    <flow name="simpleTest">
        <until-successful maxRetries="2" objectStore-ref="objectStore" millisBetweenRetries="2000">
            <processor-chain>
                <expression-component><![CDATA[mel:throw new Exception("error");]]></expression-component>
            </processor-chain>
        </until-successful>
        <!--wait until all events fail-->
        <custom-processor class="org.mule.test.integration.routing.UntilSuccessfulExceptionStrategyTestCase$LockProcessor"/>
        <set-payload value="ok"/>
        <error-handler>
            <on-error-continue>
                <!--release when all events have failed-->
                <custom-processor class="org.mule.test.integration.routing.UntilSuccessfulExceptionStrategyTestCase$WaitOnceBeforeUnlockProcessor"/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="noRetriesSplitterAggregatorTest">
        <set-payload value="#[mel:{1,2}]"/>
        <collection-splitter/>
        <until-successful maxRetries="0" objectStore-ref="objectStore" millisBetweenRetries="2000">
            <processor-chain>
                <expression-component><![CDATA[mel:throw new Exception("error");]]></expression-component>
            </processor-chain>
        </until-successful>
        <collection-aggregator/>
        <!--wait until all events fail-->
        <custom-processor class="org.mule.test.integration.routing.UntilSuccessfulExceptionStrategyTestCase$LockProcessor"/>
        <set-payload value="ok"/>
        <error-handler>
            <on-error-continue>
                <!--release when all events have failed-->
                <custom-processor class="org.mule.test.integration.routing.UntilSuccessfulExceptionStrategyTestCase$WaitTwiceBeforeUnlockProcessor"/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="noRetriesSimpleTest">
        <until-successful maxRetries="0" objectStore-ref="objectStore" millisBetweenRetries="2000">
            <processor-chain>
                <expression-component><![CDATA[mel:throw new Exception("error");]]></expression-component>
            </processor-chain>
        </until-successful>
        <!--wait until all events fail-->
        <custom-processor class="org.mule.test.integration.routing.UntilSuccessfulExceptionStrategyTestCase$LockProcessor"/>
        <set-payload value="ok"/>
        <error-handler>
            <on-error-continue>
                <!--release when all events have failed-->
                <custom-processor class="org.mule.test.integration.routing.UntilSuccessfulExceptionStrategyTestCase$WaitOnceBeforeUnlockProcessor"/>
            </on-error-continue>
        </error-handler>
    </flow>

</mule>
