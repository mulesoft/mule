<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:spring="http://www.springframework.org/schema/beans" xmlns:test="http://www.mulesoft.org/schema/mule/test" xmlns:http="http://www.mulesoft.org/schema/mule/http"
    xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
       http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd
       http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
       http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">

    <http:listener-config name="listenerConfig3" host="localhost" port="${port3}"/>
    <http:request-config name="requestConfig3" host="localhost" port="${port3}"/>
    <http:listener-config name="listenerConfig2" host="localhost" port="${port2}"/>
    <http:request-config name="requestConfig2" host="localhost" port="${port2}"/>
    <http:listener-config name="listenerConfig1" host="localhost" port="${port1}"/>
    <http:request-config name="requestConfig1" host="localhost" port="${port1}"/>

    <set-variable name="addP1" variableName="P1" value="P1_VALUE"/>
    <set-variable name="addP2" variableName="P2" value="P2_VALUE"/>
    <set-variable name="addP3" variableName="P3" value="P3_VALUE"/>
    <set-variable name="addP4" variableName="P4" value="P4_VALUE"/>

    <!-- Test Flows -->

    <flow name="GetInvocationPropertyInFlow" processingStrategy="synchronous">
        <test:assert expression="#[P1 == 'P1_VALUE']" />
    </flow>

    <flow name="SetInvocationPropertyInFlow" processingStrategy="synchronous">
        <processor ref="addP1" />
    </flow>

    <flow name="OverwritePropertyValueInFlow" processingStrategy="synchronous">
        <set-variable variableName="P1" value="P1_VALUE_NEW"/>
    </flow>

    <flow name="propagationInSameFlow">
        <processor ref="addP1" />
        <response>
            <test:assert expression="#[P1]" />
            <test:assert expression="#[P2]" />
        </response>
        <test:assert expression="#[P1]" />
        <test:assert expression="#[flowVars['P2'] == null]" />
        <processor ref="addP2" />
        <test:assert expression="#[P1]" />
        <test:assert expression="#[P2]" />
    </flow>

    <flow name="noPropagationInDifferentFlowHttp">
        <processor ref="addP1" />
        <test:assert expression="#[P1]" />
        <http:request config-ref="requestConfig2" path="/"/>
    </flow>
    <flow name="noPropagationInDifferentFlowHttp-2">
        <http:listener config-ref="listenerConfig2" path="/" />
        <test:assert expression="#[flowVars['P1'] == null]" />
    </flow>

    <flow name="AsyncFlow">
        <test:assert expression="#[testThread != Thread.currentThread()]" />
        <processor ref="addP3" />
        <test:assert expression="#[P1]" />
        <test:assert expression="#[P2]" />
        <test:assert expression="#[flowVars.P3]" />
    </flow>

    <flow name="HTTPRequestResponseEndpointFlowMidFlow">
        <processor ref="addP1" />
        <http:request path="/" config-ref="requestConfig1" />
        <test:assert expression="#[P1]" />
    </flow>
    <flow name="HTPPEchoFlow">
        <http:listener path="/" config-ref="listenerConfig1" />
        <echo-component />
    </flow>

    <flow name="propagationThroughFlowRefToFlow">
        <processor ref="addP1" />
        <test:assert expression="#[P1]" />
        <flow-ref name="FlowRef-1" />
        <test:assert expression="#[P1]" />
        <test:assert expression="#[P2]" />
        <test:assert expression="#[flowVars.P4]" />
        <flow-ref name="FlowRef-2" />
        <test:assert expression="#[P1]" />
        <test:assert expression="#[P2]" />
        <test:assert expression="#[flowVars['P3'] == null]" />
        <test:assert expression="#[flowVars.P4]" message="I failed" />
    </flow>
    <flow name="FlowRef-1" processingStrategy="synchronous">
        <test:assert expression="#[P1]" />
        <processor ref="addP2" />
        <flow-ref name="FlowRef-3" />
        <test:assert expression="#[flowVars.P4]" message="I failed" />
    </flow>
    <flow name="FlowRef-2" processingStrategy="asynchronous">
        <test:assert expression="#[P1]" />
        <test:assert expression="#[P2]" />
        <processor ref="addP3" />
        <flow-ref name="FlowRef-3" />
        <test:assert expression="#[flowVars.P4]" />
    </flow>
    <flow name="FlowRef-3" processingStrategy="synchronous">
        <test:assert expression="#[P1]" />
        <test:assert expression="#[P2]" />
        <processor ref="addP4" />
        <test:assert expression="#[flowVars.P4]" />
    </flow>
    <flow name="OverwriteInFlowRef">
        <processor ref="addP1" />
        <test:assert expression="#[P1 == 'P1_VALUE']" />
        <flow-ref name="OverwriteInFlowRef-1" />
        <test:assert expression="#[P1 == 'P1_VALUE_NEW']" />
    </flow>
    <flow name="OverwriteInFlowRef-1" processingStrategy="synchronous">
        <set-variable variableName="P1" value="P1_VALUE_NEW"/>
    </flow>

    <flow name="propagationThroughFlowRefToSubFlow">
        <processor ref="addP1" />
        <test:assert expression="#[P1]" />
        <flow-ref name="SubFlowRef-1" />
        <test:assert expression="#[P1]" />
        <test:assert expression="#[P2]" />
        <flow-ref name="SubFlowRef-2" />
        <test:assert expression="#[P1]" />
        <test:assert expression="#[P2]" />
        <test:assert expression="#[flowVars.P3]" />
        <test:assert expression="#[flowVars.P4]" />
    </flow>
    <sub-flow name="SubFlowRef-1">
        <test:assert expression="#[P1]" />
        <processor ref="addP2" />
    </sub-flow>
    <sub-flow name="SubFlowRef-2">
        <test:assert expression="#[P1]" />
        <test:assert expression="#[P2]" />
        <processor ref="addP3" />
        <flow-ref name="SubFlowRef-3" />
        <test:assert expression="#[flowVars.P4]" />
    </sub-flow>
    <sub-flow name="SubFlowRef-3">
        <test:assert expression="#[P1]" />
        <test:assert expression="#[P2]" />
        <test:assert expression="#[flowVars.P3]" />
        <processor ref="addP4" />
    </sub-flow>
    <flow name="OverwriteInSubFlowRef">
        <processor ref="addP1" />
        <test:assert expression="#[P1 == 'P1_VALUE']" />
        <flow-ref name="OverwriteInSubFlowRef-1" />
        <test:assert expression="#[P1 == 'P1_VALUE_NEW']" />
    </flow>
    <flow name="OverwriteInSubFlowRef-1" processingStrategy="synchronous">
        <set-variable variableName="P1" value="P1_VALUE_NEW"/>
    </flow>

    <flow name="propagationThroughAsyncElement">
        <processor ref="addP1" />
        <async>
            <processor ref="addP2" />
            <test:assert expression="#[P1]" />
            <test:assert expression="#[P2]" />
        </async>
    </flow>
    <flow name="propertyAddedInAsyncElementNotAddedinFlow">
        <processor ref="addP1" />
        <async>
            <processor ref="addP2" />
        </async>
        <test:assert expression="#[P1]" />
        <test:assert expression="#[flowVars['P2'] == null]" />
    </flow>

    <flow name="propagationThroughWireTap">
        <processor ref="addP1" />
        <test:assert expression="#[P1]" />
        <wire-tap>
            <test:assert expression="#[P1]" />
        </wire-tap>
        <test:assert expression="#[P1]" />
    </flow>
    <flow name="propertyAddedInWireTapNotAddedinFlow">
        <wire-tap>
            <flow-ref name="WireTap2-2" />
        </wire-tap>
        <test:assert expression="#[flowVars['P1'] == null]" />
    </flow>
    <sub-flow name="WireTap2-2">
        <processor ref="addP1" />
        <test:assert expression="#[P1]" />
    </sub-flow>

    <flow name="propagationThroughEnricher">
        <processor ref="addP1" />
        <test:assert expression="#[P1]" />
        <enricher target="#[flowVars.test]">
            <test:assert expression="#[P1]" />
        </enricher>
        <test:assert expression="#[P1]" />
    </flow>
    <flow name="propertyAddedInEnricherNotAddedinFlow">
        <enricher target="#[flowVars.test]">
            <flow-ref name="Enricher2-2" />
        </enricher>
        <test:assert expression="#[flowVars['P1'] == null]" />
    </flow>
    <sub-flow name="Enricher2-2">
        <processor ref="addP1" />
        <test:assert expression="#[P1]" />
    </sub-flow>

    <flow name="propagateToRoutesInAll">
        <processor ref="addP1" />
        <test:assert expression="#[P1]" />
        <all>
            <test:assert expression="#[P1]" />
            <test:assert expression="#[P1]" />
        </all>
    </flow>
    <flow name="propagateThroughAllRouterWithResults">
        <processor ref="addP1" />
        <test:assert expression="#[P1]" />
        <all>
            <echo-component />
            <echo-component />
        </all>
        <test:assert expression="#[P1]" />
    </flow>
    <flow name="propagateThroughAllRouterWithNoResults">
        <processor ref="addP1" />
        <test:assert expression="#[P1]" />
        <all>
            <test:queue name="tmp" />
            <test:queue name="tmp2" />
        </all>
        <test:assert expression="#[P1]" />
    </flow>
    <flow name="propagateBetweenRoutes">
        <all>
            <processor ref="addP1" />
            <test:assert expression="#[P1]" />
        </all>
    </flow>
    <flow name="propagateFromRouteToNextProcessorSingleRoute">
        <all>
            <processor ref="addP1" />
        </all>
        <test:assert expression="#[P1]" />
    </flow>
    <flow name="propagateFromRouteToNextProcessorMultipleRoutes">
        <all>
            <processor ref="addP1" />
            <processor ref="addP2" />
        </all>
        <test:assert expression="#[P1]" />
    </flow>
    <flow name="propagateFromRouteToNextProcessorNoResult">
        <all>
            <processor-chain>
                <processor ref="addP1" />
                <test:queue name="tmp3" />
            </processor-chain>
        </all>
        <test:assert expression="#[P1]" />
    </flow>
    <flow name="AllAsync">
        <processor ref="addP1" />
        <test:assert expression="#[P1]" />
        <all>
            <async>
                <flow-ref name="All-1" />
            </async>
            <async>
                <flow-ref name="All-2" />
            </async>
        </all>
        <test:assert expression="#[P1]" />
        <test:assert expression="#[flowVars['P2'] == null]" />
        <test:assert expression="#[flowVars['P3'] == null]" />
    </flow>
    <sub-flow name="All-1">
        <processor ref="addP2" />
        <test:assert expression="#[P1]" />
        <test:assert expression="#[P2]" />
    </sub-flow>
    <sub-flow name="All-2">
        <processor ref="addP3" />
        <test:assert expression="#[P1]" />
        <test:assert expression="#[flowVars['P2'] == null]" />
        <test:assert expression="#[P3]" />
    </sub-flow>

    <flow name="propogationOfPropertiesInMessageSplitWithSplitter" processingStrategy="synchronous">
        <processor ref="addP1" />
        <collection-splitter />
        <test:assert expression="#[payload is org.mule.tck.testmodels.fruit.Fruit]" count="3" />
        <test:assert expression="#[P1]" />
    </flow>

    <flow name="aggregationOfPropertiesFromMultipleMessageWithAggregator">
        <flow-ref name="propogationOfPropertiesInMessageSplitWithSplitter" />
        <processor ref="addP2" />
        <collection-aggregator />
        <test:assert expression="#[P1]" />
        <test:assert expression="#[P2]" />
    </flow>

    <flow name="defaultExceptionStrategy">
        <processor ref="addP1" />
        <test:component throwException="true" />
        <default-exception-strategy>
            <test:assert expression="#[P1]" />
        </default-exception-strategy>
    </flow>

    <flow name="catchExceptionStrategy">
        <processor ref="addP1" />
        <test:component throwException="true" />
        <catch-exception-strategy>
            <test:assert expression="#[P1]" />
        </catch-exception-strategy>
    </flow>

    <flow name="defaultExceptionStrategyAfterCallingSubflow">
        <set-variable variableName="P1" value="P1_VALUE"/>
        <flow-ref name="TestSubFlow"/>
        <set-variable variableName="P2" value="P2_VALUE"/>
        <message-filter throwOnUnaccepted="true">
            <payload-type-filter expectedType="java.lang.NoSuchFieldError"/>
        </message-filter>
        <default-exception-strategy>
           <processor-chain>
               <processor-chain>
                   <test:assert expression="#[flowVars.P1]" />
                   <test:assert expression="#[flowVars.P2]" />
               </processor-chain>
            </processor-chain>
        </default-exception-strategy>
    </flow>

    <sub-flow name="TestSubFlow">
        <http:request config-ref="requestConfig3" path="/" >
            <http:success-status-code-validator values="0..599"/>
        </http:request>
    </sub-flow>

    <flow name="TestSubFlowServer">
        <http:listener path="/" config-ref="listenerConfig3"/>
        <test:component throwException="true"/>
    </flow>

</mule>
