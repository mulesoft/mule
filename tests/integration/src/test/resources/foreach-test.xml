<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xmlns:script="http://www.mulesoft.org/schema/mule/scripting"
      xmlns:mule-xml="http://www.mulesoft.org/schema/mule/xml"
      xmlns:json="http://www.mulesoft.org/schema/mule/json"
      xsi:schemaLocation="
               http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
               http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
               http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd
               http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
               http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
               http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">

    <flow name="minimal-config">
        <foreach>
            <test:component/>
            <test:queue name="out"/>
        </foreach>
    </flow>

    <flow name="minimal-config-plus-mp">
        <foreach>
            <test:component/>
            <test:queue name="out"/>
        </foreach>
        <script:transformer>
            <script:script engine="groovy">
            	payload.add("added after foreach")
            	result = payload
            </script:script>
        </script:transformer>
    </flow>

    <flow name="minimal-config-expression">
        <foreach collection="#[message.inboundProperties.names]">
            <test:component/>
            <test:queue name="out"/>
        </foreach>
    </flow>

    <flow name="partitioned-config">
        <foreach batchSize="${batch.size}">
            <test:component/>
            <test:queue name="out"/>
        </foreach>
    </flow>

    <flow name="parent-message-config">
        <foreach rootMessageVariableName="parent">
            <test:component/>
            <set-variable variableName="parent2" value="#[flowVars.parent]" />
        </foreach>
        <set-property propertyName="parent" value="#[flowVars.parent2]"/>
    </flow>

    <flow name="message-collection-config">
        <foreach>
            <test:assert expression="#[message.outboundProperties['out']=='out'+counter]" />
            <set-variable variableName="totalMessages" value="#[counter]"/>
        </foreach>
        <test:assert expression="#[totalMessages==10]" />
        <set-property propertyName="totalMessages" value="#[totalMessages]"/>
    </flow>

    <flow name="message-collection-config-one-way">
        <foreach>
            <test:assert expression="#[message.inboundProperties['out']=='out'+counter]" />
            <set-variable variableName="totalMessages" value="#[counter]"/>
        </foreach>
        <logger level="WARN" message="variable:totalMessages: #[flowVars.totalMessages]"/>
        <test:assert expression="#[totalMessages==10]" />
    </flow>

    <flow name="map-config">
        <foreach>
            <test:component/>
            <set-variable variableName="totalMessages" value="#[flowVars.counter]" />
        </foreach>
        <set-property propertyName="totalMessages" value="#[flowVars.totalMessages]"/>
        <test:assert expression="#[totalMessages == 2]" />
    </flow>

    <flow name="map-expression-config">
        <foreach collection="#[message.inboundProperties.names]">
            <test:component/>
            <set-variable variableName="totalMessages" value="#[flowVars.counter]" />
        </foreach>
        <set-property propertyName="totalMessages" value="#[flowVars.totalMessages]"/>
    </flow>

    <flow name="process-order-update">
        <foreach collection="#[xpath3('/PurchaseOrder/Items/Item')]">
            <set-variable variableName="total" value="#[counter]" />
        </foreach>
    </flow>

    <flow name="process-json-update">
        <json:json-to-object-transformer returnClass="java.util.Map"/>
        <test:assert expression="#[payload.order.items.size() == 2]" />
        <foreach collection="#[payload.order.items]">
            <script:component>
                <script:script engine="groovy">
                    <![CDATA[
                    def root = flowVars.rootMessage.payload.value
                    def key = "key3-" + flowVars.counter
                    root.order.items << [(key) : "je"]
                    ]]>
                </script:script>
            </script:component>
        </foreach>
        <test:assert expression="#[payload is Map]" />
        <test:assert expression="#[payload.order.items.size() == 4]" />
    </flow>

    <flow name="array-expression-config">
        <set-variable variableName="loops" value="0" />
        <foreach>
            <script:component>
                <script:script engine="groovy">
                    def loops = flowVars.loops.toInteger()
                    loops++
                    flowVars['loops'] = loops + ""
                </script:script>
            </script:component>
        </foreach>
        <test:assert expression="#[flowVars.loops == '3']" />
    </flow>

    <flow name="counter-scope">
        <foreach>
            <test:component/>
        </foreach>
        <test:assert expression="#[flowVars.counter == null]"/>
    </flow>

    <flow name="counter-two-foreach-independence">
        <foreach>
            <test:component/>
            <set-variable variableName="totalMessages" value="#[flowVars.counter]" />
        </foreach>
        <foreach>
            <test:component/>
            <set-variable variableName="totalMessages" value="#[flowVars.counter]" />
        </foreach>
        <set-property propertyName="msg-total-messages" value="#[flowVars.totalMessages]"/>
    </flow>

    <flow name="nested-foreach">
        <foreach>
            <foreach>
                <test:component/>
                <test:queue name="out"/>
            </foreach>
        </foreach>
    </flow>

    <flow name="nested-foreach-counters">
        <foreach>
            <foreach>
                <test:component/>
                <set-property propertyName="j" value="#[flowVars.counter]"/>
                <test:queue name="out"/>
            </foreach>
            <set-property propertyName="i" value="#[flowVars.counter]"/>
            <test:queue name="out"/>
        </foreach>
    </flow>

    <flow name="foreach-properties-restored">
        <set-variable variableName="counter" value="hello" />
        <set-variable variableName="rootMessage" value="world" />
        <foreach>
            <test:component/>
            <test:queue name="out"/>
        </foreach>
        <test:assert expression="#[counter == 'hello']" />
        <test:assert expression="#[rootMessage == 'world']" />
    </flow>

    <flow name="mvel-list">
        <foreach collection="#[['foo', 'bar']]">
            <test:component/>
            <test:queue name="out"/>
        </foreach>
    </flow>

    <flow name="mvel-map">
        <foreach collection="#[['key1' : 'val1', 'key2':'val2']]">
            <test:component/>
            <logger level="ERROR" message="message-#[counter]: #[payload]"/>
            <test:queue name="out"/>
        </foreach>
    </flow>

    <flow name="mvel-collection">
        <foreach collection="#[['key1' : 'val1', 'key2':'val2'].values()]">
            <test:component/>
            <test:queue name="out"/>
        </foreach>
    </flow>

    <flow name="mvel-array">
        <foreach collection="#[{'foo', 'bar'}]">
            <flow-ref name="assertIterable" />
        </foreach>
    </flow>

    <flow name="expression-iterable">
        <foreach collection="#[iterable]">
            <flow-ref name="assertIterable" />
        </foreach>
    </flow>
    
    <sub-flow name="assertIterable">
        <test:component/>
        <test:assert expression="#[payload instanceof String]"  message="hoal"/>
        <logger level="ERROR" message="message-#[counter]: #[payload]"/>
        <test:queue name="out"/>
    </sub-flow>
    
    <flow name="mvel-error">
        <foreach collection="#[invalid]">
            <test:component/>
        </foreach>
    </flow>
    
    <flow name="foreachWithAsync">
		<foreach>
			<async>
				<flow-ref name="setTestProperties" />
			</async>
		</foreach>
		<flow-ref name="setTestProperties" />
	</flow>

	<sub-flow name="setTestProperties">
		<set-variable variableName="value1" value="value1" />
		<set-variable variableName="value2" value="value2" />

		<set-property propertyName="value1" value="value1" />
		<set-property propertyName="value2" value="value2" />
		
		<test:assert expression="#[flowVars['value1'] == 'value1']" />
		<test:assert expression="#[flowVars['value2'] == 'value2']" />
		
		<test:assert expression="#[message.outboundProperties['value1'] == 'value1']" />
		<test:assert expression="#[message.outboundProperties['value2'] == 'value2']" />
		
		<expression-component>flowVars['latch'].countDown()</expression-component>
	</sub-flow>

    <sub-flow name="sub-flow-with-foreach">
        <foreach>
            <append-string-transformer message="y" />
        </foreach>
    </sub-flow>

</mule>
