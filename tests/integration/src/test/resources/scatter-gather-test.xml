<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xsi:schemaLocation="
               http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
               http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
               http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd">

    <spring:bean id="testMergeStrategy"
                 class="org.mule.test.routing.ScatterGatherRouterTestCase$TestAggregationStrategy"/>

    <flow name="minimalConfig">
        <scatter-gather>
            <set-payload value="apple"/>
            <set-payload value="banana"/>
            <set-payload value="orange"/>
        </scatter-gather>

        <flow-ref name="testRoutes"/>
    </flow>

    <flow name="timeout">
        <scatter-gather timeout="1000">
            <set-payload value="apple"/>
            <set-payload value="banana"/>
            <expression-component>java.lang.Thread.sleep(10000)</expression-component>
        </scatter-gather>
    </flow>

    <flow name="routeWithException">
        <scatter-gather timeout="1000">
            <set-payload value="apple"/>
            <test:component throwException="true"/>
            <set-payload value="orange"/>
        </scatter-gather>
    </flow>

    <flow name="routeWithExceptionWithMessage">
        <scatter-gather timeout="1000">
            <set-payload value="apple"/>
            <test:component throwException="true" exceptionText="I'm a message"/>
            <set-payload value="orange"/>
        </scatter-gather>
    </flow>

    <flow name="routeWithNonMuleException">
        <scatter-gather timeout="1000">
            <set-payload value="apple"/>
            <test:component throwException="true" exceptionToThrow="java.lang.NullPointerException" exceptionText="nonMule"/>
            <set-payload value="orange"/>
        </scatter-gather>
    </flow>

    <flow name="routeWithMelException">
        <scatter-gather timeout="1000">
            <set-payload value="apple"/>
            <set-payload value="#[invalidExpr]"/>
            <set-payload value="orange"/>
        </scatter-gather>
    </flow>

    <flow name="routeWithExceptionInSequentialProcessing">
        <scatter-gather>
            <threading-profile doThreading="false" />
            <set-payload value="apple"/>
            <test:component throwException="true"/>
            <set-payload value="orange"/>
        </scatter-gather>
    </flow>

    <flow name="customMergeStrategyByRef">
        <scatter-gather>
            <custom-aggregation-strategy ref="testMergeStrategy"/>

            <set-payload value="apple"/>
            <set-payload value="banana"/>
            <set-payload value="orange"/>
        </scatter-gather>
        <flow-ref name="testAggregationStrategy"/>
    </flow>

    <flow name="customMergeStrategyByName">
        <scatter-gather>
            <custom-aggregation-strategy
                    class="org.mule.test.routing.ScatterGatherRouterTestCase$TestAggregationStrategy"/>

            <set-payload value="apple"/>
            <set-payload value="banana"/>
            <set-payload value="orange"/>
        </scatter-gather>
        <flow-ref name="testAggregationStrategy"/>
    </flow>

    <flow name="sequentialProcessing">
        <scatter-gather>
            <threading-profile doThreading="false"/>

            <processor-chain>
                <set-payload value="apple"/>
                <custom-processor class="org.mule.test.routing.ScatterGatherRouterTestCase$ThreadCaptor" />
            </processor-chain>
            <processor-chain>
                <set-payload value="banana"/>
                <custom-processor class="org.mule.test.routing.ScatterGatherRouterTestCase$ThreadCaptor" />
            </processor-chain>
            <processor-chain>
                <set-payload value="orange"/>
                <custom-processor class="org.mule.test.routing.ScatterGatherRouterTestCase$ThreadCaptor" />
            </processor-chain>
        </scatter-gather>

        <flow-ref name="testRoutes"/>
    </flow>

    <flow name="exceptionStrategy">
        <scatter-gather timeout="1000">
            <set-payload value="apple"/>
            <test:component throwException="true"/>
            <test:component throwException="true"/>
        </scatter-gather>

        <error-handler>
            <on-error-continue>
                <test:assert expression="#[exception is org.mule.runtime.core.routing.CompositeRoutingException]"/>
                <test:assert expression="#[exception.getExceptionForRouteIndex(0) == null]"/>
                <test:assert expression="#[exception.getExceptionForRouteIndex(1) != null]"/>
                <test:assert expression="#[exception.getExceptionForRouteIndex(2) != null]"/>
            </on-error-continue>
        </error-handler>
    </flow>

    <flow name="failedEventInAggregationStrategy">
        <scatter-gather>
            <custom-aggregation-strategy class="org.mule.test.routing.ScatterGatherRouterTestCase$FlatteningTestAggregationStrategy" />

            <set-payload value="apple" />
            <processor-chain>
                <flow-ref name="setEventVariables" />
                <set-payload value="banana" />
                <test:component throwException="true"/>
            </processor-chain>
        </scatter-gather>

        <test:assert expression="#[payload[0].getMessage().getPayload().equals('apple')]" />
        <test:assert expression="#[payload[1].getMessage().getPayload().equals('banana')]" />
        <test:assert expression="#[payload[1].getFlowVariable('flow').equals('var')]" />
        <test:assert expression="#[payload[1].getSession().getProperty('session').equals('sessionvar')]" />
    </flow>

    <flow name="failingMergeStrategy">
        <scatter-gather>
            <custom-aggregation-strategy
                    class="org.mule.test.routing.ScatterGatherRouterTestCase$FailingAggregationStrategy"/>

            <set-payload value="apple"/>
            <set-payload value="banana"/>
            <set-payload value="orange"/>
        </scatter-gather>
    </flow>

    <flow name="messageProperties">
        <flow-ref name="setEventVariables" />

        <flow-ref name="minimalConfig"/>

        <test:assert expression="#[flowVars['flow'] == 'var']"/>
        <test:assert expression="#[sessionVars['session'] == 'sessionvar']"/>
    </flow>

    <flow name="requestResponseInboundEndpoint">
        <scatter-gather>
            <set-payload value="apple"/>
            <set-payload value="banana"/>
            <set-payload value="orange"/>
        </scatter-gather>

        <flow-ref name="testRoutes"/>
    </flow>

    <flow name="oneWayInboundEndpoint">
        <scatter-gather>
            <set-payload value="apple"/>
            <set-payload value="banana"/>
            <set-payload value="orange"/>
        </scatter-gather>

        <flow-ref name="testRoutes"/>
    </flow>

    <flow name="routesWithForeachAndInboundEndpoint">
        <scatter-gather>
            <foreach>
                <set-property propertyName="timeStamp" value="#[server.dateTime]"/>
            </foreach>
            <foreach>
                <set-property propertyName="timeStamp" value="#[server.dateTime]"/>
            </foreach>
            <foreach>
                <set-property propertyName="timeStamp" value="#[server.dateTime]"/>
            </foreach>
        </scatter-gather>

        <flow-ref name="testRoutes"/>
    </flow>

    <flow name="oneWayRouteWithSingleResponse">
        <set-session-variable variableName="stuff" value="apple"/>
        <scatter-gather>
            <async>
                <flow-ref name="propertyToPayload"/>
            </async>
            <flow-ref name="propertyToPayload"/>
        </scatter-gather>

        <test:assert expression="#[payload == 'apple']"/>
    </flow>

    <flow name="oneWayRouteWithMultipleResponses">
        <scatter-gather>
            <set-payload value="apple"/>
            <set-payload value="banana"/>
            <set-payload value="orange"/>
            <async>
                <flow-ref name="log"/>
            </async>
        </scatter-gather>

        <flow-ref name="testRoutes"/>
        <test:assert expression="#[payload.size() == 3]"/>
    </flow>

    <flow name="oneWayRoutesOnly">
        <set-payload value="apple" />

        <scatter-gather>
            <async>
                <flow-ref name="log"/>
            </async>
            <async>
                <flow-ref name="log"/>
            </async>
        </scatter-gather>

        <test:assert expression="#[payload == 'apple']"/>
    </flow>

    <flow name="expressionFilterRoute">
        <set-payload value="apple" />

        <scatter-gather>
            <processor-chain>
                <expression-filter expression="#[1 == 0 ]"/>
                <set-payload value="kiwi" />
            </processor-chain>
            <set-payload value="banana"/>
            <set-payload value="orange"/>
        </scatter-gather>

        <test:assert expression="#[payload.size() == 2]"/>
        <test:assert expression="#[payload[0].payload == 'banana']"/>
        <test:assert expression="#[payload[1].payload == 'orange']"/>
    </flow>

    <flow name="propertyToPayload">
        <set-payload value="#[sessionVars.stuff]"/>
    </flow>

    <flow name="doesThreading">

        <scatter-gather>
            <flow-ref name="captureThreadAndWait" />
            <flow-ref name="captureThreadAndWait" />
            <flow-ref name="captureThreadAndWait" />
        </scatter-gather>

    </flow>

    <flow name="setsVariablesAfterRouting">
        <scatter-gather>
            <set-payload value="data 1"/>
            <set-payload value="data 2"/>
        </scatter-gather>
        <set-variable variableName="foo" value="bar" />

        <flow-ref name="assertFlowVars" />

        <foreach collection="#[payload]">
            <test:assert expression="#[flowVars.foo.equals('bar')]" count="2" />
        </foreach>

        <flow-ref name="assertFlowVars" />
    </flow>

    <flow name="dataType">
        <scatter-gather>
            <set-payload value="apple" mimeType="text/plain"/>
            <set-payload value="banana"/>
            <set-payload value="orange"/>
        </scatter-gather>
    </flow>

    <sub-flow name="assertFlowVars">
        <test:assert expression="#[flowVars.foo.equals('bar')]" />
    </sub-flow>

    <flow name="log">
        <logger level="INFO" message="one-way vm"/>
    </flow>

    <sub-flow name="testAggregationStrategy">
        <test:assert expression="#[payload == 'apple banana orange']"/>
    </sub-flow>

    <sub-flow name="captureThreadAndWait">
        <custom-processor class="org.mule.test.routing.ScatterGatherRouterTestCase$ThreadCaptor" />
        <expression-component>flowVars['latch'].await()</expression-component>
    </sub-flow>

    <sub-flow name="testRoutes">
        <combine-collections-transformer/>
        <test:assert expression="#[payload[0] == 'apple']"/>
        <test:assert expression="#[payload[1] == 'banana']"/>
        <test:assert expression="#[payload[2] == 'orange']"/>
    </sub-flow>

    <sub-flow name="setEventVariables">
        <set-variable variableName="flow" value="var"/>
        <set-session-variable variableName="session" value="sessionvar"/>
    </sub-flow>

</mule>
