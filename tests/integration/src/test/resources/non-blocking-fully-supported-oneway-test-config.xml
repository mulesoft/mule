<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xsi:schemaLocation="
               http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
               http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd">

    <configuration defaultProcessingStrategy="non-blocking">
        <expression-language>
            <global-functions>
                def assertPayload(){payload == org.mule.tck.junit4.AbstractMuleContextTestCase.TEST_MESSAGE}
            </global-functions>
        </expression-language>
    </configuration>

    <flow name="flow">
        <expression-component>flowVars['requestThread'] = Thread.currentThread()</expression-component>
        <test:non-blocking-processor/>
        <test:assert expression="#[assertPayload()]"/>
        <test:assert expression="#[flowVars['requestThread'] != Thread.currentThread()]"/>
    </flow>

    <flow name="subFlow">
        <expression-component>flowVars['requestThread'] = Thread.currentThread()</expression-component>
        <flow-ref name="subFlowChild"/>
        <test:assert expression="#[assertPayload()]"/>
        <test:assert expression="#[flowVars['requestThread'] != Thread.currentThread()]"/>
    </flow>
    <sub-flow name="subFlowChild">
        <test:non-blocking-processor/>
        <test:assert expression="#[assertPayload()]"/>
        <test:assert expression="#[flowVars['requestThread'] != Thread.currentThread()]"/>
    </sub-flow>

    <flow name="childFlow">
        <expression-component>flowVars['requestThread'] = Thread.currentThread()</expression-component>
        <flow-ref name="childFlowChild"/>
        <test:assert expression="#[assertPayload()]"/>
        <test:assert expression="#[flowVars['requestThread'] != Thread.currentThread()]"/>
        <test:assert count="1" expression="#[flow.name=='childFlow']"/>
    </flow>
    <flow name="childFlowChild">
        <test:non-blocking-processor/>
        <test:assert expression="#[assertPayload()]"/>
        <test:assert expression="#[flowVars['requestThread'] != Thread.currentThread()]"/>
    </flow>

    <flow name="processorChain">
        <expression-component>flowVars['requestThread'] = Thread.currentThread()</expression-component>
        <processor-chain>
            <test:assert-intercepting responseSameThread="false" responseExpression="#[assertPayload()]"/>
            <test:non-blocking-processor/>
            <test:assert expression="#[assertPayload()]"/>
            <test:assert expression="#[flowVars['requestThread'] != Thread.currentThread()]"/>
        </processor-chain>
        <test:non-blocking-processor/>
        <test:assert expression="#[assertPayload()]"/>
        <test:assert expression="#[flowVars['requestThread'] != Thread.currentThread()]"/>
    </flow>

    <flow name="filterAccepts">
        <expression-component>flowVars['requestThread'] = Thread.currentThread()</expression-component>
        <expression-filter expression="#[true]"/>
        <test:non-blocking-processor/>
        <test:assert expression="#[assertPayload()]"/>
        <test:assert expression="#[flowVars['requestThread'] != Thread.currentThread()]"/>
    </flow>

    <flow name="filterRejects">
        <expression-filter expression="#[false]"/>
        <test:non-blocking-processor/>
        <test:assert count="0"/>
    </flow>

    <flow name="filterAfterNonBlockingAccepts">
        <expression-component>flowVars['requestThread'] = Thread.currentThread()</expression-component>
        <test:non-blocking-processor/>
        <expression-filter expression="#[true]"/>
        <test:assert expression="#[assertPayload()]"/>
        <test:assert expression="#[flowVars['requestThread'] != Thread.currentThread()]"/>
    </flow>

    <flow name="filterAfterNonBlockingRejects">
        <expression-component>flowVars['requestThread'] = Thread.currentThread()</expression-component>
        <test:non-blocking-processor/>
        <test:assert expression="#[assertPayload()]"/>
        <test:assert expression="#[flowVars['requestThread'] != Thread.currentThread()]"/>
        <expression-filter expression="#[false]"/>
        <test:assert count="0"/>
    </flow>

    <flow name="filterAfterEnricherBeforeNonBlocking">
        <expression-component>flowVars['requestThread'] = Thread.currentThread()</expression-component>
        <enricher source="#[payload]" target="#[payload]">
            <set-payload value="#[payload]"/>
        </enricher>
        <expression-filter expression="#[false]"/>
        <test:non-blocking-processor/>
        <test:assert count="0"/>
    </flow>

    <flow name="filterBeforeNonBlockingAccepts">
        <expression-component>flowVars['requestThread'] = Thread.currentThread()</expression-component>
        <expression-filter expression="#[true]"/>
        <test:non-blocking-processor/>
        <test:assert expression="#[assertPayload()]"/>
        <test:assert expression="#[flowVars['requestThread'] != Thread.currentThread()]"/>
    </flow>

    <flow name="filterBeforeNonBlockingRejects">
        <expression-component>flowVars['requestThread'] = Thread.currentThread()</expression-component>
        <expression-filter expression="#[false]"/>
        <test:non-blocking-processor/>
        <test:assert count="0"/>
    </flow>

    <flow name="security-filter">
        <expression-component>flowVars['requestThread'] = Thread.currentThread()</expression-component>
        <custom-processor class="org.mule.processor.SecurityFilterMessageProcessor"/>
        <test:non-blocking-processor/>
        <test:assert expression="#[assertPayload()]"/>
        <test:assert expression="#[flowVars['requestThread'] != Thread.currentThread()]"/>
    </flow>

    <flow name="transformer">
        <expression-component>flowVars['requestThread'] = Thread.currentThread()</expression-component>
        <expression-transformer expression="#[true]"/>
        <test:non-blocking-processor/>
        <test:assert expression="#[assertPayload()]"/>
        <test:assert expression="#[flowVars['requestThread'] != Thread.currentThread()]"/>
    </flow>

    <flow name="choice">
        <expression-component>flowVars['requestThread'] = Thread.currentThread()</expression-component>
        <choice>
            <when expression="#[true]">
                <test:assert-intercepting responseSameThread="false" responseExpression="#[assertPayload()]"/>
                <test:non-blocking-processor/>
            </when>
        </choice>
        <test:non-blocking-processor/>
        <test:assert expression="#[assertPayload()]"/>
        <test:assert expression="#[flowVars['requestThread'] != Thread.currentThread()]"/>
    </flow>

    <flow name="enricher">
        <expression-component>flowVars['requestThread'] = Thread.currentThread()</expression-component>
        <enricher source="#[payload]" target="#[payload]">
            <processor-chain>
                <test:assert-intercepting responseSameThread="false" responseExpression="#[assertPayload()]"/>
                <test:non-blocking-processor/>
            </processor-chain>
        </enricher>
        <test:non-blocking-processor/>
        <test:assert expression="#[assertPayload()]"/>
    </flow>

    <flow name="enricherIssue">
        <expression-component>flowVars['requestThread'] = Thread.currentThread()</expression-component>
        <enricher target="flowVars['match']">
            <set-payload value="false"/>
        </enricher>
        <message-filter>
            <expression-filter expression="#[true]"/>
        </message-filter>
        <test:non-blocking-processor/>
        <test:assert expression="#[assertPayload()]"/>
        <test:assert expression="#[flowVars['requestThread'] != Thread.currentThread()]"/>
    </flow>

    <flow name="enricherIssueNonBlocking">
        <expression-component>flowVars['requestThread'] = Thread.currentThread()</expression-component>
        <enricher target="flowVars['match']">
            <test:non-blocking-processor/>
        </enricher>
        <test:assert expression="#[flowVars['requestThread'] != Thread.currentThread()]"/>
        <message-filter>
            <expression-filter expression="#[true]"/>
        </message-filter>
        <test:non-blocking-processor/>
        <test:assert expression="#[flowVars['requestThread'] != Thread.currentThread()]"/>
    </flow>

    <flow name="enricherFlowVar">
        <expression-component>flowVars['requestThread'] = Thread.currentThread()</expression-component>
        <enricher target="flowVars[org.mule.NonBlockingFullySupportedFunctionalTestCase.FOO]">
            <test:non-blocking-processor/>
        </enricher>
        <test:assert expression="#[assertPayload()]"/>
        <test:assert expression="#[flowVars['requestThread'] != Thread.currentThread()]"/>
    </flow>

    <flow name="testOutboundEndpoint">
        <expression-component>flowVars['requestThread'] = Thread.currentThread()</expression-component>
        <outbound-endpoint address="test://test" exchange-pattern="request-response" />
        <test:assert expression="#[assertPayload()]"/>
        <test:assert expression="#[flowVars['requestThread'] != Thread.currentThread()]"/>
    </flow>

    <flow name="testOutboundEndpointError">
        <expression-component>flowVars['requestThread'] = Thread.currentThread()</expression-component>
        <outbound-endpoint address="test://AlwaysFail" exchange-pattern="request-response" />
        <catch-exception-strategy>
            <test:assert expression="#[assertPayload()]" />
            <test:assert expression="#[exception.causedBy(org.mule.api.routing.RoutingException)]" />
            <test:assert expression="#[flowVars['requestThread'] != Thread.currentThread()]"/>
        </catch-exception-strategy>
    </flow>

    <flow name="async">
        <async processingStrategy="asynchronous">
            <set-variable variableName="beforeThread" value="#[Thread.currentThread()]"/>
            <test:non-blocking-processor/>
            <test:assert count="1" expression="#[Thread.currentThread()!=beforeThread and assertPayload()]"/>
        </async>
        <test:non-blocking-processor/>
        <test:assert expression="#[assertPayload()]" />
    </flow>

</mule>
