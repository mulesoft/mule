<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:jms="http://www.mulesoft.org/schema/mule/transport/jms"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:vm="http://www.mulesoft.org/schema/mule/transport/vm"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xmlns:script="http://www.mulesoft.org/schema/mule/scripting"
      xsi:schemaLocation="
       http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
       http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd
       http://www.mulesoft.org/schema/mule/transport/jms http://www.mulesoft.org/schema/mule/transport/jms/current/mule-transport-jms.xsd
       http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
       http://www.mulesoft.org/schema/mule/transport/vm http://www.mulesoft.org/schema/mule/transport/vm/current/mule-transport-vm.xsd
       http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">

    <http:listener-config name="listenerConfig1" host="localhost" port="${port1}"/>
    <http:listener-config name="listenerConfig2" host="localhost" port="${port2}"/>

    <jms:activemq-connector name="activeMq" maxRedelivery="-1"/>
    <jms:activemq-connector name="activeMqRedelivery" maxRedelivery="${maxRedelivery}"/>


    <flow name="alwaysRollback">
      <vm:inbound-endpoint path="in">
          <vm:transaction action="ALWAYS_BEGIN"/>
      </vm:inbound-endpoint>
      <test:component throwException="true"/>
        <error-handler>
            <on-error-propagate/>
        </error-handler>
    </flow>

    <flow name="alwaysRollbackJmsNoTransaction" processingStrategy="synchronous">
      <jms:inbound-endpoint queue="in" connector-ref="activeMq"/>
      <test:component throwException="true"/>
        <error-handler>
            <on-error-propagate/>
        </error-handler>
    </flow>
    
    <flow name="rollbackWithComponent">
      <vm:inbound-endpoint path="in5">
          <vm:transaction action="ALWAYS_BEGIN"/>
      </vm:inbound-endpoint>
      <test:component throwException="true"/>
        <error-handler>
            <on-error-propagate>
                <script:component>
                    <script:script engine="groovy">
                        return "$payload Rolled Back"
                    </script:script>
                </script:component>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="fullyDefinedRollbackExceptionStrategyWithComponent">
        <vm:inbound-endpoint path="in6" exchange-pattern="request-response"/>
        <append-string-transformer message=" apt1"/>
        <test:component throwException="true"/>
        <error-handler>
            <on-error-propagate maxRedeliveryAttempts="${shortMaxRedelivery}">
                <append-string-transformer message=" apt2"/>
                <append-string-transformer message=" apt3"/>
                <on-redelivery-attempts-exceeded>
                    <append-string-transformer message=" apt4"/>
                    <script:component>
                        <script:script engine="groovy">
                            return "$payload groovified"
                        </script:script>
                    </script:component>
                </on-redelivery-attempts-exceeded>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="redeliveryExhaustedTransactional">
       <jms:inbound-endpoint queue="in2" connector-ref="activeMqRedelivery">
          <jms:transaction action="ALWAYS_BEGIN"/>
       </jms:inbound-endpoint>
       <test:component throwException="true"/>
        <error-handler>
            <on-error-propagate>
                <on-redelivery-attempts-exceeded>
                    <jms:jmsmessage-to-object-transformer/>
                    <append-string-transformer message=" consumed successfully"/>
                    <jms:outbound-endpoint queue="dlq" connector-ref="activeMqRedelivery">
                        <jms:transaction action="ALWAYS_JOIN"/>
                    </jms:outbound-endpoint>
                </on-redelivery-attempts-exceeded>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="redeliveryExhaustedNoTransaction">
       <jms:inbound-endpoint queue="in3" connector-ref="activeMq"/>
       <test:component throwException="true"/>
        <error-handler>
            <on-error-propagate maxRedeliveryAttempts="${maxRedelivery}">
                <on-redelivery-attempts-exceeded>
                    <append-string-transformer message=" consumed successfully"/>
                    <jms:outbound-endpoint queue="dlq" connector-ref="activeMqRedelivery"/>
                </on-redelivery-attempts-exceeded>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="httpRollbackOnly">
        <http:listener path="*" config-ref="listenerConfig1"/>
        <test:component throwException="true"/>
        <error-handler>
            <on-error-propagate/>
        </error-handler>
    </flow>

    <flow name="httpWithRedeliveryExhausted">
        <http:listener path="*" config-ref="listenerConfig2"/>
        <test:component throwException="true"/>
        <error-handler>
            <on-error-propagate maxRedeliveryAttempts="${shortMaxRedelivery}">
                <on-redelivery-attempts-exceeded>
                    <append-string-transformer message=" consumed successfully"/>
                </on-redelivery-attempts-exceeded>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="fullyDefinedRollbackExceptionStrategy">
        <vm:inbound-endpoint path="in2" exchange-pattern="request-response"/>
        <append-string-transformer message=" apt1"/>
        <test:component throwException="true"/>
        <error-handler>
            <on-error-propagate maxRedeliveryAttempts="${shortMaxRedelivery}">
                <append-string-transformer message=" apt2"/>
                <append-string-transformer message=" apt3"/>
                <on-redelivery-attempts-exceeded>
                    <append-string-transformer message=" apt4"/>
                    <append-string-transformer message=" apt5"/>
                </on-redelivery-attempts-exceeded>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="redeliveryPolicyRedefinition">
        <vm:inbound-endpoint path="in3">
            <idempotent-redelivery-policy idExpression="#[payload:]" useSecureHash="false"/>
            <vm:transaction action="ALWAYS_BEGIN"/>
        </vm:inbound-endpoint>
        <test:component throwException="true"/>
        <error-handler>
            <on-error-propagate/>
        </error-handler>
    </flow>

    <flow name="inboundEndpointMaxRedeliveryTakesPrecendence">
        <vm:inbound-endpoint path="in4">
            <idempotent-redelivery-policy maxRedeliveryCount="4"/>
            <vm:transaction action="ALWAYS_BEGIN"/>
        </vm:inbound-endpoint>
        <test:component throwException="true"/>
        <error-handler>
            <on-error-propagate maxRedeliveryAttempts="7"/>
        </error-handler>
    </flow>

    <flow name="rollbackExceptionStrategyCatchMessageRedeliveryDespiteChoiceConfiguration">
        <vm:inbound-endpoint path="in7">
            <vm:transaction action="ALWAYS_BEGIN"/>
        </vm:inbound-endpoint>
        <test:component throwException="true" exceptionToThrow="java.io.IOException"/>
        <error-handler>
            <on-error-propagate when="#[exception.causedBy(java.io.IOException)]" maxRedeliveryAttempts="2">
                <on-redelivery-attempts-exceeded>
                    <custom-processor class="org.mule.test.integration.exceptions.OnErrorPropagateTestCase$CallMessageProcessor"/>
                </on-redelivery-attempts-exceeded>
            </on-error-propagate>
            <on-error-continue/>
        </error-handler>
    </flow>

    <flow name="onErrorPropagateTypeMatch">
        <append-string-transformer message=" apt1"/>
        <test:component throwException="true"/>
        <error-handler>
            <on-error-propagate type="MULE:CUSTOM">
                <test:queue name="custom1"/>
            </on-error-propagate>
            <on-error-propagate type="MULE:GENERAL">
                <custom-processor class="org.mule.test.integration.exceptions.OnErrorPropagateTestCase$CallMessageProcessor"/>
            </on-error-propagate>
            <on-error-propagate type="ANY">
                <test:queue name="any1"/>
            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="onErrorPropagateTypeMatchAny">
        <append-string-transformer message=" apt1"/>
        <test:component throwException="true"/>
        <error-handler>
            <on-error-propagate type="MULE:CUSTOM">
                <test:queue name="custom2"/>
            </on-error-propagate>
            <on-error-propagate type="ANY">
                <custom-processor class="org.mule.test.integration.exceptions.OnErrorPropagateTestCase$CallMessageProcessor"/>
            </on-error-propagate>
        </error-handler>
    </flow>
    
</mule>
