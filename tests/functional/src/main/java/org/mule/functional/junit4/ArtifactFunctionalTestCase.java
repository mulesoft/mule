/*
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

package org.mule.functional.junit4;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.typeCompatibleWith;
import static org.mule.functional.util.AnnotationUtils.getAnnotationAttributeFrom;
import static org.mule.runtime.core.util.Preconditions.checkArgument;
import static org.mule.runtime.core.util.Preconditions.checkState;
import org.mule.functional.api.classloading.isolation.ClassPathClassifier;
import org.mule.functional.api.classloading.isolation.IsolatedClassLoaderExtensionsManagerConfigurationBuilder;
import org.mule.functional.api.classloading.isolation.IsolatedServiceProviderDiscoverer;
import org.mule.functional.junit4.runners.ArtifactClassLoaderHolderReflector;
import org.mule.functional.junit4.runners.ArtifactsClassLoaderHolderAware;
import org.mule.functional.junit4.runners.ArtifactClassLoaderRunner;
import org.mule.functional.junit4.runners.RunnerDelegateTo;
import org.mule.runtime.config.spring.SpringXmlConfigurationBuilder;
import org.mule.runtime.core.api.config.ConfigurationBuilder;
import org.mule.runtime.module.artifact.classloader.ArtifactClassLoader;
import org.mule.runtime.module.service.DefaultServiceDiscoverer;
import org.mule.runtime.module.service.MuleServiceManager;
import org.mule.runtime.module.service.ReflectionServiceProviderResolutionHelper;
import org.mule.runtime.module.service.ReflectionServiceResolver;

import java.util.List;

import org.junit.runner.RunWith;

/**
 * Base class for running {@link FunctionalTestCase} with class loader isolation using {@link ArtifactClassLoaderRunner}, a JUnit
 * {@link org.junit.runner.Runner}. {@link ArtifactClassLoaderRunner} classifies the classpath provided by
 * IDE/surfire-maven-plugin generates an equivalent {@link ClassLoader} hierarchy as standalone mode.
 * <p/>
 * The classification is based on the maven dependencies declared by the pom maven artifact that the test belongs to. In order to
 * classify the {@link java.net.URL}s from classpath it uses a dependency tree that holds also duplicates relationship for the
 * dependency graph.
 * <p/>
 * A dependency graph file has to be generated by using the plugin
 * <a href="https://github.com/ferstl/depgraph-maven-plugin">https://github.com/ferstl/depgraph-maven-plugin</a>. See
 * {@link org.mule.functional.classloading.isolation.maven.DependencyGraphMavenDependenciesResolver} for more details about how to
 * generate the dependency graph needed by this runner.
 * <p/>
 * The classification for {@link ClassLoader}s is based on dependencies scope, {@code provided} will go to the container,
 * {@code compile} to plugin and {@code test} to the application. For more information about the classification process see
 * {@link ClassPathClassifier}.
 * <p/>
 * For plugins it scans the classpath to search for classes annotated with
 * {@link org.mule.runtime.extension.api.annotation.Extension}, if a class is annotated it generates the metadata for the
 * extension on the fly and it also registers it to an {@link org.mule.runtime.extension.api.ExtensionManager}. Non extension
 * plugins sets the class loader filter based on {@code mule-module.properties} file.
 * <p/>
 * For {@link org.mule.runtime.api.service.Service}s it scans the classpath to search for
 * {@value org.mule.functional.classloading.isolation.classification.DefaultClassPathClassifier#SERVICE_PROPERTIES_FILE_NAME}
 * resources and based on that it gets the artifact to build the service class loader. Scope {@code provided} is used for getting
 * dependencies.
 * <p/>
 * By default this test runs internally with a {@link org.junit.runners.BlockJUnit4ClassRunner} runner. On those cases where the
 * test has to be run with another runner the {@link RunnerDelegateTo} should be used to define it.
 * <p/>
 * {@link ArtifactsClassLoaderHolderAware} defines that this class also needs to get access to {@link ArtifactClassLoader}s
 * created in order to load extension classes (they are not exposed to the application) for registering them
 * to the {@link org.mule.runtime.extension.api.ExtensionManager} and register {@link org.mule.runtime.api.service.Service}s.
 * <p/>
 * Due to the cost of reading the classpath, scanning the dependencies and classes to generate the {@link ClassLoader} is high,
 * this runner will hold an static reference to the {@link ClassLoader} created for the first test and will use the same during
 * the whole execution of the tests that are marked with the {@link RunWith} {@link ArtifactClassLoaderRunner}, so be aware that
 * static initializations or things related to this could be an issue and tests should be aware of this.
 *
 * @since 4.0
 */
@RunWith(ArtifactClassLoaderRunner.class)
public abstract class ArtifactFunctionalTestCase extends FunctionalTestCase {

  private static ArtifactClassLoaderHolderReflector artifactClassLoaderHolderReflector;

  /**
   * @return thread context class loader has to be the application {@link ClassLoader} created by the runner.
   */
  @Override
  protected ClassLoader getExecutionClassLoader() {
    return Thread.currentThread().getContextClassLoader();
  }

  @ArtifactsClassLoaderHolderAware
  private static final void setArtifactsClassLoaderHolder(final Object artifactClassLoaderHolder) {
    checkArgument(artifactClassLoaderHolder != null, "artifactClassLoaderHolder cannot be null");
    checkState(artifactClassLoaderHolderReflector == null,
               "artifactClassLoaderHolderReflector already set, it cannot be set again");

    artifactClassLoaderHolderReflector = new ArtifactClassLoaderHolderReflector(artifactClassLoaderHolder);
  }

  @Override
  protected ConfigurationBuilder getBuilder() throws Exception {
    ConfigurationBuilder builder = super.getBuilder();
    assertThat(builder.getClass(), typeCompatibleWith(SpringXmlConfigurationBuilder.class));
    return builder;
  }

  @Override
  protected void configureSpringXmlConfigurationBuilder(SpringXmlConfigurationBuilder builder) {
    builder
        .addServiceConfigurator(
                                new TestServicesMuleContextConfigurator(
                                                                        new MuleServiceManager(new DefaultServiceDiscoverer(new IsolatedServiceProviderDiscoverer(
                                                                                                                                                                  artifactClassLoaderHolderReflector
                                                                                                                                                                      .getServicesArtifactClassLoaders()),
                                                                                                                            new ReflectionServiceResolver(
                                                                                                                                                          new ReflectionServiceProviderResolutionHelper())))));
  }

  /**
   * Adds a {@link ConfigurationBuilder} that sets the {@link org.mule.runtime.extension.api.ExtensionManager} into the
   * {@link #muleContext}. This {@link ConfigurationBuilder} is set as the first element of the {@code builders} {@link List}
   *
   * @param builders the list of {@link ConfigurationBuilder}s that will be used to initialise the {@link #muleContext}
   */
  @Override
  protected void addBuilders(List<ConfigurationBuilder> builders) {
    super.addBuilders(builders);
    Class<?> runner = getAnnotationAttributeFrom(this.getClass(), RunWith.class, "value");
    if (runner == null || !runner.equals(ArtifactClassLoaderRunner.class)) {
      throw new IllegalStateException(this.getClass().getName() + " extends " + ArtifactFunctionalTestCase.class.getName()
          + " so it should be annotated to only run with: " + ArtifactClassLoaderRunner.class + ". See " + RunnerDelegateTo.class
          + " for defining a delegate runner to be used.");
    }

    if (artifactClassLoaderHolderReflector != null
        && !artifactClassLoaderHolderReflector.getPluginsArtifactClassLoaders().isEmpty()) {
      builders.add(0, new IsolatedClassLoaderExtensionsManagerConfigurationBuilder(artifactClassLoaderHolderReflector
          .getPluginsArtifactClassLoaders()));
    }
  }
}
