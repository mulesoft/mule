<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns="http://www.mulesoft.org/schema/mule/xml"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:mule="http://www.mulesoft.org/schema/mule/core"
            xmlns:spring="http://www.springframework.org/schema/beans"
            xmlns:schemadoc="http://www.mulesoft.org/schema/mule/schemadoc"
            targetNamespace="http://www.mulesoft.org/schema/mule/xml"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:import namespace="http://www.springframework.org/schema/beans"
                schemaLocation="http://www.springframework.org/schema/beans/spring-beans-3.1.xsd"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/core"
                schemaLocation="http://www.mulesoft.org/schema/mule/core/3.5/mule.xsd"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/schemadoc"
                schemaLocation="http://www.mulesoft.org/schema/mule/schemadoc/3.5/mule-schemadoc.xsd"/>

    <xsd:annotation>
        <xsd:documentation>
            The XML module contains a number of tools to help you read, transform, and write XML.
        </xsd:documentation>

        <xsd:appinfo>
            <schemadoc:short-name>xml</schemadoc:short-name>
            <schemadoc:page-title>XML Module</schemadoc:page-title>

            <schemadoc:additional-documentation where="after-common-elements">
            </schemadoc:additional-documentation>

            <schemadoc:additional-documentation where="after-specific-elements">
            </schemadoc:additional-documentation>
        </xsd:appinfo>
    </xsd:annotation>

    <!-- xml filters -->

    <xsd:element name="is-xml-filter" type="mule:abstractFilterType" substitutionGroup="mule:abstract-filter">
        <xsd:annotation>
            <xsd:documentation>
                Accepts XML messages only. Alternatively, you can set the "not" attribute to filter out XML messages.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="jxpath-filter" type="jxpathFilterType" substitutionGroup="mule:abstract-filter">
        <xsd:annotation>
            <xsd:documentation>
                Filters messages based on XPath expressions using JXPath.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="jxpathFilterType">
        <xsd:annotation>
            <xsd:documentation>
                Filters messages based on XPath expressions using JXPath.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="mule:patternFilterType">
                <xsd:sequence>
                    <xsd:element name="namespace" type="namespaceType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                A namespace declaration, expressed as {{prefix}} and {{uri}} attributes. The prefix can then be used inside the expression.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="context-property" type="spring:entryType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>A property that will be made available to the filter context. Expression Evaluators can be used to grab these properties from the message at runtime.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="lenient" type="mule:substitutableBoolean" default="true">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether or not errors are thrown if the XPath expression doesn't exist.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="expectedValue" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The expected value of the XPath expression evaluation. If the expected value matches the evaluation, the filter returns true.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="jaxen-filter" type="jaxenFilterType" substitutionGroup="mule:abstract-filter">
        <xsd:annotation>
            <xsd:documentation>
The Jaxen filter allows you to route messages based on XPath expressions. The Jaxen filter is generally faster than the JXPath filter and should be considered the first choice when using an XPath filter.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="jaxenFilterType">
        <xsd:annotation>
            <xsd:documentation>
                The Jaxen filter allows you to route messages based on XPath expressions.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="mule:patternFilterType">
                <xsd:sequence>
                    <xsd:element name="namespace" type="namespaceType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                A namespace declaration, expressed as {{prefix}} and {{uri}} attributes. The prefix can then be used inside the expression.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="context-property" type="spring:entryType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>A property that wil be made available to the filter context. Expression Evaluators can be used to grab these properties from the message at runtime.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="expectedValue" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The expected value of the XPath expression evaluation. If the expected value matches the evaluation, the filter returns true.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="xpath-filter" type="xpathFilterType" substitutionGroup="mule:abstract-filter">
        <xsd:annotation>
            <xsd:documentation>
        The XPath filter uses the JAXP libraries to filter XPath expressions. Available as of Mule 2.2.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="xpathFilterType">
        <xsd:complexContent>
            <xsd:extension base="mule:patternFilterType">
                <xsd:sequence>
                    <xsd:element name="namespace" type="namespaceType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                A namespace declaration, expressed as {{prefix}} and {{uri}} attributes. The prefix can then be used inside the expression.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="expectedValue" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The expected value of the XPath expression evaluation. If the expected value matches the evaluation, the filter returns true.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="schema-validation-filter" type="schemaValidationFilterType" substitutionGroup="mule:abstract-filter">
        <xsd:annotation>
            <xsd:documentation>
            The schema validation filter uses the JAXP libraries to validate your message against a schema. Available as of Mule 2.2.
            </xsd:documentation>
         </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="schemaValidationFilterType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractFilterType">
                <xsd:attribute name="schemaLocations" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The path to the schema file. You can specify multiple schema locations for validation.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="schemaLanguage" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The schema language to use. The default is "http://www.w3.org/2001/XMLSchema".
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="returnResult" type="xsd:boolean" default="true">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether the filter should cache the result of the XML. If this is false, the filter will be more efficient, but it won't allow you to read the XML again.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="resourceResolver-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Reference to a Spring bean that implements <code>org.w3c.dom.ls.LSResourceResolver</code>.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="errorHandler-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Reference to a Spring bean that implements <code>org.xml.sax.ErrorHandler</code>.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- xml transformers -->
    <!-- these just appear at the top level, there's no extended group -->

    <xsd:complexType name="xmlTransformerType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractTransformerType">
                <xsd:attribute name="outputEncoding" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>The encoding to use for the resulting XML/Text.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="acceptExternalEntities" type="mule:substitutableBoolean" default="false">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether to accept XML documents with references to external files.
                            Default value is false. Setting this value to true will make your application
                            vulnerable to XXE attacks. Use with extreme care.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="dom-to-xml-transformer" type="xmlTransformerType" substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                Converts an XML payload (Document, XML stream, Source, etc.) to a serialized String representation.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="dom-to-output-handler-transformer" type="xmlTransformerType"
                 substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                Converts an XML payload (Document, XML stream, Source, etc.) to an OutputHandler for efficient serialization.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="jxpath-extractor-transformer" type="jxpathExtractorType"
                 substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                The JXPathExtractor is a simple transformer that evaluates an XPath expression against the given bean and returns the result. By default, a single result will be returned. If multiple values are expected, set the {{singleResult}} property to {{false}}. In this case a {{List}} of values will be returned. Note the property is currently ignored for non-String/XML payloads.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="jxpathExtractorType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractTransformerType">
                <xsd:sequence>
                    <xsd:element name="namespace" type="namespaceType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                A namespace declaration, expressed as {{prefix}} and {{uri}} attributes. The prefix can then be used inside the expression.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="expression" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                The XPath expression.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                <xsd:attribute name="outputType">
                    <xsd:annotation>
                        <xsd:documentation>
                            The type of output the extractor should use: VALUE, XML, or NODE. By default, it returns the VALUE of the node.
                        </xsd:documentation>
                    </xsd:annotation>
                    <xsd:simpleType>
                        <xsd:restriction base="xsd:NMTOKEN">
                            <xsd:enumeration value="VALUE"/>
                            <xsd:enumeration value="XML"/>
                            <xsd:enumeration value="NODE"/>
                        </xsd:restriction>
                    </xsd:simpleType>
                </xsd:attribute>
                <xsd:attribute name="singleResult" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether the extractor should return a single result instead of a list. Defaults to true.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="xpath-extractor-transformer" type="xpathExtractorType"
        substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                The XPathExtractor is a simple transformer that evaluates an XPath expression
                using the JAXP libraries against the given bean and returns the result.
                By default, a String of the result will be returned. To return a Node, NodeSet,
                Boolean or Number result, the {{resultType}} attribute can be set.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="xpathExtractorType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractTransformerType">
                <xsd:sequence>
                    <xsd:element name="namespace" type="namespaceType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                A namespace declaration, expressed as {{prefix}} and {{uri}} attributes. The prefix can then be used inside the expression.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="expression" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The XPath expression.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="resultType" type="xpathResultType" >
                    <xsd:annotation>
                        <xsd:documentation>
                            The XPath result type (e.g. STRING or NODE).
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:simpleType name="xpathResultType">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="NODESET" />
            <xsd:enumeration value="NODE" />
            <xsd:enumeration value="STRING" />
            <xsd:enumeration value="BOOLEAN" />
            <xsd:enumeration value="NUMBER" />
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:element name="object-to-xml-transformer" type="objectToXmlType" substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                Converts a Java object to an XML representation using XStream.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="objectToXmlType">
        <xsd:complexContent>
            <xsd:extension base="xstreamTransformerType">
                <xsd:attribute name="acceptMuleMessage" type="mule:substitutableBoolean" default="false">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether the transformer will serialize the payload or the entire MuleMessage including not only its payload, but also its properties, correlation ID, etc.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="xml-to-dom-transformer" type="xmlTransformerType" substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                Transforms an XML message payload to an org.w3c.dom.Document.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="xml-to-object-transformer" type="xstreamTransformerType"
                 substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                Converts XML to Java bean graphs using XStream.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="xstreamTransformerType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractTransformerType">
                 <xsd:sequence>
                    <xsd:element name="alias" type="aliasType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>

                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="converter" type="converterType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                The core of XStream consists of a registry of Converters. The responsibility of a
                                Converter is to provide a strategy for converting particular types of objects found in
                                the object graph, to and from XML. XStream is provided with Converters for common types
                                such as primitives, String, File, Collections, arrays, and Dates. For a list of defautl convers
                                see: http://xstream.codehaus.org/converters.html
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="driverClass" type="mule:substitutableClass">
                    <xsd:annotation>
                        <xsd:documentation>
                            Which XStream driver class to use.  Unless you know what you are doing the default will be fine for most cases.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- JAXB Transformers -->
    <xsd:element name="jaxb-object-to-xml-transformer" type="jaxbTransformerType" substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                Converts a Java object to an XML representation using XStream.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="jaxb-xml-to-object-transformer" type="jaxbTransformerType"
                 substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                Converts XML to Java bean graphs using XStream.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="jaxbTransformerType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractTransformerType">
                <xsd:attribute name="jaxbContext-ref" type="xsd:string" use="required">
                        <xsd:annotation>
                            <xsd:documentation>
                                A reference to a JaxbContext created as a Spring bean
                            </xsd:documentation>
                        </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="jaxb-context" type="jaxbContextType" substitutionGroup="mule:abstract-extension"/>

    <xsd:complexType name="jaxbContextType">
         <xsd:complexContent>
            <xsd:extension base="mule:abstractExtensionType">
        <xsd:attribute name="name" type="xsd:string" use="required">
                <xsd:annotation>
                    <xsd:documentation>
                        The reference name of this context.  Usually this will be referenced by a JAXB transformer
                    </xsd:documentation>
                </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="packageNames" type="xsd:string" use="required">
                <xsd:annotation>
                    <xsd:documentation>
                        A colon-separated list of packages where JAXB classes live
                    </xsd:documentation>
                </xsd:annotation>
        </xsd:attribute>
        </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- End JAXB -->

    <xsd:element name="xslt-transformer" type="xsltTransformerType" substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>The XSLT transformer uses XSLT to transform the message payload. Transformation objects are pooled for better performance. You can set transformation context properties on the transformer and can pull these properties from the message using Expression Evaluators.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="xsltTransformerType">
        <xsd:complexContent>
            <xsd:extension base="xmlTransformerType">
                <xsd:sequence>
                    <xsd:element name="xslt-text" maxOccurs="1" minOccurs="0" type="xsltTextType">
                        <xsd:annotation>
                            <xsd:documentation>The inline XSLT script definition. This is not required if the {{xslt-file}} attribute is set.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="context-property" type="spring:entryType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>A property that wil be made available to the transform context. Expression Evaluators can be used to grab these properties from the message at runtime.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="maxIdleTransformers" type="mule:substitutableInt">
                    <xsd:annotation>
                        <xsd:documentation>Transformers are pooled for better throughput, since performing and XSL transformation can be expensive. This attribute controls how many instances will remain idle in the transformer pool.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="maxActiveTransformers" type="mule:substitutableInt">
                    <xsd:annotation>
                        <xsd:documentation>The total number of XSLT transformers that will get pooled at any given time.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="xsl-file" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>The full path to the XSL template file to use when performing the transformation. This can be a path on the local file system or on the classpath. This attribute is not required if the &lt;xslt-text&gt; element has been set.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="uriResolver-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>References the URI resolver to use when validating the XSL output. If not set, a default resolver will be used that checks for resources on the local file system and classpath.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="transformerFactoryClass" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>The fully qualified class name of the {{javax.xml.TransformerFactory}} instance to use. If not specified, the default JDK factory {{TransformerFactory.newInstance()}} will be used.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="xquery-transformer" type="xqueryTransformerType" substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>An Xml transformer uses XQuery to transform the message payload. Transformation objects are pooled for better performance. You can set transformation context properties on the transformer and can pull these properties from the message using Expression Evaluators.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="xqueryTransformerType">
        <xsd:complexContent>
            <xsd:extension base="xmlTransformerType">
                <xsd:sequence>
                    <xsd:element name="context-property" type="spring:entryType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>A property that wil be made available to the XQuery transform context. Expression Evaluators can be used to grab these properties from the message at runtime.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>

                    <xsd:element name="xquery-text" type="xsd:string" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>The inline XQuery script definition. This is not required if the &lt;xquery-file&gt; attribute is set.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>

                </xsd:sequence>
                <xsd:attribute name="maxIdleTransformers" type="mule:substitutableInt">
                    <xsd:annotation>
                        <xsd:documentation>Transformers are pooled for better throughput, since performing and XQuery transformation can be expensive. This attribute controls how many instances will remain idle in the transformer pool.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="maxActiveTransformers" type="mule:substitutableInt">
                    <xsd:annotation>
                        <xsd:documentation>The total number of XQuery transformers that will get pooled at any given time.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="xquery-file" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>The full path to the XQuery template file to use when performing the transformation. This can be a path on the local file system or on the classpath. This attribute is not required if the &lt;xquery-text&gt; element has been set.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="configuration-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            A reference to a Saxon configuration object to configure the transformer (configured as a Spring bean). If not set, the default Saxon configuration is used.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="xqueryTextType" mixed="true">
        <xsd:complexContent mixed="true">
            <xsd:extension base="mule:abstractMixedContentExtensionType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="xsltTextType">
        <xsd:sequence maxOccurs="1" minOccurs="1">
            <xsd:any namespace="http://www.w3.org/1999/XSL/Transform" minOccurs="0" maxOccurs="1"
                     processContents="lax"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:element name="xml-prettyprinter-transformer" type="xmlPrettyPrinterType"
                 substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                Formats an XML string using the Pretty Printer functionality in {{org.dom4j.io.OutputFormat}}.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="xmlPrettyPrinterType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractTransformerType">
                <xsd:attribute name="expandEmptyElements" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether to expand empty elements from &lt;tagName&gt; to &lt;tagName&gt;&lt;/tagName&gt;.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="indentEnabled" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether to enable indenting of the XML code. If true, the indent string and size are used.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="indentString" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The string to use as the indent, usually an empty space.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="indentSize" type="mule:substitutableInt">
                    <xsd:annotation>
                        <xsd:documentation>
                            The number of indent strings to use for each indent, such as "2" if {{indentString}} is set to an empty space and you want to use two empty spaces for each indent.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="lineSeparator" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The string to use for new lines, typically "\n".
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="newLineAfterNTags" type="mule:substitutableInt">
                    <xsd:annotation>
                        <xsd:documentation>
                            If the {{newlines}} attribute is true, the number of closing tags after which a newline
                            separator is inserted. For example, setting this to "5" will cause a newline to be inserted
                            after the output of five closing tags (including single tags).
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="newlines" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether newlines should be printed. If false, the XML is printed all on one line.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="newLineAfterDeclaration" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether a new line is printed after the XML declaration (assuming it is not supressed).
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="omitEncoding" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether the XML declaration line includes the encoding of the document. It is common to
                            suppress this in protocols such as SOAP.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="padText" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether to ensure that text immediately preceded by or followed by an element will be
                            "padded" with a single space. This is useful when you set {{trimText}} to true and want to
                            ensure that "the quick &lt;b&gt;brown&lt;/b&gt; fox" does not become "the quick&lt;b&gt;brown&lt;/b&gt;fox".
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="suppressDeclaration" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether to suppress the XML declaration line. It is common to suppress this in protocols
                            such as SOAP.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="trimText" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether to trim white space in the XML.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="XHTML" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether to use the XHTML standard, which is like HTML but passes an XML parser with real closed tags, and outputs CDATA sections with CDATA delimiters.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- xml support -->

    <xsd:element name="namespace-manager" type="namespaceManagerType" substitutionGroup="mule:abstract-extension"/>
    <xsd:complexType name="namespaceManagerType">
        <xsd:annotation>
            <xsd:documentation>
                A manager that allows global namespaces to be configured. These namespaces will be made available to
                expressions routers, filters and transformers.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="mule:abstractExtensionType">
                <xsd:sequence>
                    <xsd:element name="namespace" type="namespaceType" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attribute name="includeConfigNamespaces" type="xsd:boolean" default="false">
                    <xsd:annotation>
                        <xsd:documentation>If true, the top-level namespaces declared in this configuration file will be added to the Manager. Defaults to false.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="namespaceType">
        <xsd:annotation>
            <xsd:documentation>
                A namespace declaration for XPath expressions. The prefix used here can be used inside XPath expressions.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="prefix" type="xsd:string" use="required"/>
        <xsd:attribute name="uri" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="aliasType">
        <xsd:annotation>
            <xsd:documentation>
                An alias used when serializing object to XML. The Alias replaces a fully qualified class name
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
        <xsd:attribute name="class" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="converterType">
        <xsd:annotation>
            <xsd:documentation>
                defines one or more class names for converters to be used by XStream to handle different object types.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="class" type="xsd:string" use="required"/>
    </xsd:complexType>
</xsd:schema>
