<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns="http://www.mulesoft.org/schema/mule/json"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:mule="http://www.mulesoft.org/schema/mule/core"
            xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
            xmlns:mxml="http://www.mulesoft.org/schema/mule/xml"
            xmlns:schemadoc="http://www.mulesoft.org/schema/mule/schemadoc"
            targetNamespace="http://www.mulesoft.org/schema/mule/json"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/core"
                schemaLocation="http://www.mulesoft.org/schema/mule/core/3.6/mule.xsd"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/xml"
                schemaLocation="http://www.mulesoft.org/schema/mule/xml/3.6/mule-xml.xsd"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/schemadoc"
                schemaLocation="http://www.mulesoft.org/schema/mule/schemadoc/3.6/mule-schemadoc.xsd"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/validation"
                schemaLocation="http://www.mulesoft.org/schema/mule/validation/3.7/mule-extension-validation.xsd"/>

    <xsd:annotation>
        <xsd:documentation>
            The JSON module contains a number of tools to help you read, transform, and write JSON.
        </xsd:documentation>

        <xsd:appinfo>
            <schemadoc:short-name>json</schemadoc:short-name>
            <schemadoc:page-title>JSON Module</schemadoc:page-title>

            <schemadoc:additional-documentation where="after-common-elements">
            </schemadoc:additional-documentation>

            <schemadoc:additional-documentation where="after-specific-elements">
            </schemadoc:additional-documentation>
        </xsd:appinfo>
    </xsd:annotation>

    <xsd:element name="validate-schema" type="validateSchemaType" substitutionGroup="validation:validator-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Validates that the message payload represents a Json compliant with a
                given Json schema.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="is-json-filter" type="jsonFilterType" substitutionGroup="mule:abstract-filter">
        <xsd:annotation>
            <xsd:documentation>
                A filter that will determine if the current message payload is a JSON encoded message.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="jsonFilterType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractFilterType">
                <xsd:attribute name="validateParsing" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Will validate that the JSON string can be parsed. This can be expensive so the default is
                            false.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="json-to-object-transformer" type="jsonToObjectTransformerType"
                 substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                A transformer that will convert a JSON encoded object graph to a java object. The object type is
                determined by the 'returnClass' attribute. Note that this transformers supports Arrays and Lists. For
                example, to
                convert a JSON string to an array of org.foo.Person, set the {{returnClass=org.foo.Person\[\]}}.

                The JSON engine can be configured using the jsonConfig attribute. This is an object reference to an
                instance of:
                net.sf.json.JsonConfig. This can be created as a spring bean.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="json-to-xml-transformer" type="mule:abstractTransformerType"
        substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                Converts a JSON string to an XML string
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="xml-to-json-transformer" type="mule:abstractTransformerType"
                 substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                Converts an XML string to a JSON string
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="json-xslt-transformer" type="mxml:xsltTransformerType" substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                Uses XSLT to transform a JSON string
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="json-schema-validation-filter" type="mxml:schemaValidationFilterType" substitutionGroup="mule:abstract-filter">
        <xsd:annotation>
            <xsd:documentation>
                Validate JSON against an XML schema.
                This element is deprecated. Use validate-schema instead
            </xsd:documentation>
         </xsd:annotation>
    </xsd:element>

    <xsd:element name="object-to-json-transformer" type="objectToJsonTransformerType"
                 substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                Converts a java object to a JSON encoded object that can be consumed by other languages such as
                Javascript or Ruby.

                The JSON Object mapper can be configured using the {{mapper-ref}} attribute. This is an object reference
                to an
                instance of:
                {{org.codehaus.jackson.Mapper}}. This can be created as a spring bean. Usually the default mapper is
                sufficient.

                Often users will want to configure exclusions or inclusions when serializing objects. This can be done
                by
                using the Jackson annotations directly on the object (see
                [http://jackson.codehaus.org/1.3.0/javadoc/org/codehaus/jackson/annotate/package-frame.html])
                If it is not possible to annotate the object directly, mixins can be used to add annotations to an
                object using AOP.
                There is a good description of this method here:
                [http://www.cowtowncoder.com/blog/archives/08-01-2009_08-31-2009.html].
                To configure mixins for you objects, either configure the
                {{mapper-ref}} attribute or register them with the transformer using the &lt;serialization-mixin&gt;
                element.

                The returnClass for this transformer is usually {{java.lang.String}}, {{byte[]}} can also be used.

                At this time the transformer does not support streaming.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="mapper" type="mapperType" substitutionGroup="mule:abstract-mixed-content-extension">
        <xsd:annotation>
            <xsd:documentation>
                The Jackson mapper to use with a JSON transformer. This isn't required but can be used to configure mixins on the mapper.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="jsonTransformerType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractTransformerType">
                <xsd:attribute name="mapper-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The JSON engine can be configured using this attribute. This is an object
                            reference to an instance of:
                            {{org.codehaus.jackson.map.ObjectMapperpper}}. This can be created as a bean and injected.  This can be created using the &lt;mapper/&gt; element.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="objectToJsonTransformerType">
        <xsd:complexContent>
            <xsd:extension base="jsonTransformerType">
                <xsd:sequence minOccurs="0" maxOccurs="unbounded">
                    <xsd:element name="serialization-mixin" type="mixin"/>
                </xsd:sequence>
                <xsd:attribute name="sourceClass" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Restrict the accepted source class object to a specific type. If not set the transformer
                            will handle all source types. Note that if you need to specify an array type you need to
                            postfix the class name with '[]'. For example, if you want to ensure the transformer only
                            accepts an Orange[], you set the sourceClass to 'org.mule.tck.testmodels.fruit.Orange[]'.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="validateSchemaType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractMessageProcessorType">
                <xsd:sequence>
                    <xsd:element name="schema-redirects" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>
                                Allows to redirect any given URI in the Schema (or even the schema
                                location itself) to any other specific URI. The most common use case for this
                                feature is to map external namespace URIs without the need to a local resource
                            </xsd:documentation>
                        </xsd:annotation>
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="schema-redirect" minOccurs="1" maxOccurs="unbounded" type="schemaRedirectType" />
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="schemaLocation" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The location in which the schema to validate against is to be found. This attribute
                            supports URI representations such as "http://org.mule/schema.json" or
                            "resource:/schema.json". It also supports a most common classpath reference
                            such as simply "schema.json"
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="dereferencing" type="dereferencingType" use="optional" default="CANONICAL">
                    <xsd:annotation>
                        <xsd:documentation>
                            Draft v4 defines two dereferencing modes: canonical and inline. Canonical will be the default option but INLINE can also be specified.
                            When validating a v3 draft this attribute is ignored.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="schemaRedirectType">
        <xsd:annotation>
            <xsd:documentation>
                A redirection between a "from" and a "to" location
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="from" type="xsd:string" use="required" />
        <xsd:attribute name="to" type="xsd:string" use="required" />
    </xsd:complexType>

    <xsd:simpleType name="dereferencingType">
        <xsd:annotation>
            <xsd:documentation>
                A dereferencing type that also allows property placeholders.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:union>
            <xsd:simpleType>
                <xsd:restriction base="mule:propertyPlaceholderType"/>
            </xsd:simpleType>
            <xsd:simpleType>
                <xsd:restriction base="xsd:NMTOKEN">
                    <xsd:enumeration value="CANONICAL"/>
                    <xsd:enumeration value="INLINE"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:union>
    </xsd:simpleType>


    <xsd:complexType name="jsonToObjectTransformerType">
        <xsd:complexContent>
            <xsd:extension base="jsonTransformerType">
                <xsd:sequence minOccurs="0" maxOccurs="unbounded">
                    <xsd:element name="deserialization-mixin" type="mixin"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="mixin" mixed="true">

        <xsd:attribute name="mixinClass" type="xsd:NMTOKEN" use="required">
            <xsd:annotation>
                <xsd:documentation>
                    The fully qualified classname of the mixin class that defines the annotations to overlay on the
                    object. This must be an abstract class or interface.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="targetClass" type="xsd:NMTOKEN" use="required">
            <xsd:annotation>
                <xsd:documentation>
                    The fully qualified classname of the target class that will have the annotations injected.
                    This is the object class that gets serialized or deserialized.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="mapperType" mixed="true">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractMixedContentExtensionType">
                <xsd:sequence minOccurs="0" maxOccurs="unbounded">
                    <xsd:element type="mixin" name="mixin"/>
                </xsd:sequence>
                <xsd:attribute name="name" type="xsd:string" use="required">
                <xsd:annotation>
                    <xsd:documentation>
                        The name of the mapper that is used to make a reference to it by the transformer elements.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

</xsd:schema>
