<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:spring="http://www.springframework.org/schema/beans"
    xmlns:httpn="http://www.mulesoft.org/schema/mule/httpn"
    xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
       http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
       http://www.mulesoft.org/schema/mule/httpn http://www.mulesoft.org/schema/mule/httpn/current/mule-httpn.xsd">

    <spring:bean id="doSpringWork"
        class="org.mule.test.module.spring.remoting.DoSomeWork" />

    <!-- Transform a byte[] from an Http request into a Spring RemoteInvocation 
        instance. -->
    <custom-transformer name="springInputXform"
        class="org.mule.runtime.module.spring.remoting.ObjectToRemoteInvocationTransformer" />
    <!-- Convert an Object to a Spring RemoteInvocationResult and then into 
        a byte[] for return to the caller via Http. -->
    <custom-transformer name="springOutputXform"
        class="org.mule.runtime.module.spring.remoting.ObjectToRemoteInvocationResultTransformer" />

    <httpn:listener-config name="listenerConfig">
        <httpn:listener-connection host="localhost" port="${port1}"/>
    </httpn:listener-config>


    <!-- SpringHttpInvokerComponent will receive a RemoteInvocation and execute 
        the requested method on a POJO specified by "serviceClass". -->
    <flow name="doSomeWorkViaSpring">

        <!-- Listen on 8003 for Http requests. Use springInputXform to convert 
            a byte[] from Http into a RemoteInvocation. Use springOutputXform to convert 
            a Object from the Mule pipeline into a RemoteInvocationResult and then into 
            a byte[]. -->
        <httpn:listener path="springService" config-ref="listenerConfig"/>
        <transformer ref="springInputXform" />
        <response>
            <transformer ref="springOutputXform" />
        </response>

        <pooled-component>
            <prototype-object
                class="org.mule.runtime.module.spring.remoting.SpringRemoteInvokerComponent">
                <properties>

                    <!-- Instead of setting the class, provide SpringHttpInvokerComponent 
                        with a Spring managed bean instead. (This doesn't work yet because I don't 
                        know how to teach SpringHttpInvokerComponent to find Spring beans.) -->
                    <spring:entry key="serviceBean"
                        value-ref="doSpringWork" />

                    <!-- Set the serviceInterface property of Spring's RemoteInvocationBasedExporter -->
                    <spring:entry key="serviceInterface"
                        value="org.mule.test.module.spring.remoting.WorkInterface" />

                    <!-- Set other properties of Spring's RemoteInvocationBasedExporter 
                        i.e. registerTraceInterceptor and remoteInvocationExecutor -->
                </properties>
            </prototype-object>
        </pooled-component>

    </flow>

</mule>
