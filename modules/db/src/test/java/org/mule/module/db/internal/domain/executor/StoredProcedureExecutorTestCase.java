/*
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package org.mule.module.db.internal.domain.executor;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.sameInstance;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.fail;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.RETURNS_DEEP_STUBS;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import org.mule.module.db.internal.domain.autogeneratedkey.AutoGeneratedKeyStrategy;
import org.mule.module.db.internal.domain.connection.DbConnection;
import org.mule.module.db.internal.domain.query.Query;
import org.mule.module.db.internal.domain.query.QueryTemplate;
import org.mule.module.db.internal.domain.statement.StatementFactory;
import org.mule.module.db.internal.result.statement.StatementResultHandler;
import org.mule.tck.junit4.AbstractMuleTestCase;
import org.mule.tck.size.SmallTest;

import java.sql.SQLException;
import java.sql.Statement;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

@SmallTest
@RunWith(MockitoJUnitRunner.class)
public class StoredProcedureExecutorTestCase extends AbstractMuleTestCase
{

    @Mock
    private StatementFactory statementFactory;

    @Mock
    private StatementResultHandler statementResultHandler;

    private StoredProcedureExecutor executor;

    @Before
    public void before()
    {
        executor = new StoredProcedureExecutor(statementFactory, statementResultHandler);
    }

    @Test
    public void statementClosedIfKeyGenerationFails() throws Exception
    {
        Statement statement = mock(Statement.class);
        AutoGeneratedKeyStrategy autoGeneratedKeyStrategy = mock(AutoGeneratedKeyStrategy.class);

        SQLException exception = mock(SQLException.class);
        when(autoGeneratedKeyStrategy.execute(any(Statement.class), any(QueryTemplate.class))).thenThrow(exception);

        try {
            executor.doExecuteQuery(mock(DbConnection.class), statement, mock(Query.class, RETURNS_DEEP_STUBS), autoGeneratedKeyStrategy);
            fail("Was expecting a failure");
        } catch (SQLException e) {
            assertThat(e, is(sameInstance(exception)));
            verify(statement).close();
        }
    }
}
