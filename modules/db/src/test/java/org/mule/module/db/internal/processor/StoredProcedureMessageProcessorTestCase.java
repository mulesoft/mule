/*
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

package org.mule.module.db.internal.processor;

import static org.mockito.Matchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.mule.module.db.internal.domain.transaction.TransactionalAction.NOT_SUPPORTED;

import java.io.Closeable;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.mule.module.db.internal.domain.autogeneratedkey.AutoGeneratedKeyStrategy;
import org.mule.module.db.internal.domain.connection.DbConnection;
import org.mule.module.db.internal.domain.executor.QueryExecutor;
import org.mule.module.db.internal.domain.executor.QueryExecutorFactory;
import org.mule.module.db.internal.domain.query.Query;
import org.mule.module.db.internal.domain.query.QueryParamValue;
import org.mule.module.db.internal.resolver.database.DbConfigResolver;
import org.mule.module.db.internal.resolver.query.QueryResolver;
import org.mule.tck.junit4.AbstractMuleTestCase;
import org.mule.tck.size.SmallTest;

@SmallTest
@RunWith(MockitoJUnitRunner.class)
public class StoredProcedureMessageProcessorTestCase extends AbstractMuleTestCase
{
    @Mock
    private DbConfigResolver dbConfigResolver;
    @Mock
    private QueryResolver queryResolver;
    @Mock
    private QueryExecutorFactory queryExecutorFactory;
    @Mock
    private DbConnection dbConnection;
    @Mock
    private QueryParamValue queryParamValue;
    @Mock
    private Closeable param;
    @Mock
    private Query query;
    @Mock
    private QueryExecutor queryExecutor;

    @Test
    public void paramsAreClosedAfterExecutionIfCloseable() throws Exception
    {
        StoredProcedureMessageProcessor spMessageProcessor = new StoredProcedureMessageProcessor(dbConfigResolver, queryResolver,
                queryExecutorFactory, NOT_SUPPORTED, false);
        spMessageProcessor.doExecuteQuery(dbConnection, query);
        verify(param).close();
    }

    @Before
    public void before() throws SQLException
    {
        List<QueryParamValue> params = new ArrayList<QueryParamValue>();
        params.add(queryParamValue);
        when(queryParamValue.getValue()).thenReturn(param);
        when(queryExecutorFactory.create()).thenReturn(queryExecutor);
        when(queryExecutor.execute(any(DbConnection.class), any(Query.class), any(AutoGeneratedKeyStrategy.class))).thenReturn(new Object());
        when(query.getParamValues()).thenReturn(params);
    }
}
