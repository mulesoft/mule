<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:this="http://www.mulesoft.org/schema/mule/this"
      xmlns:operation="http://www.mulesoft.org/schema/mule/operation"
      xmlns:heisenberg="http://www.mulesoft.org/schema/mule/heisenberg"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
          http://www.mulesoft.org/schema/mule/operation http://www.mulesoft.org/schema/mule/operation/current/mule-operation.xsd
          http://www.mulesoft.org/schema/mule/heisenberg http://www.mulesoft.org/schema/mule/heisenberg/current/mule-heisenberg.xsd
          http://www.mulesoft.org/schema/mule/this http://www.mulesoft.org/schema/mule/this/current/mule-this.xsd">

    <!-- Use Case 1.1: Errors thrown by mule operations within the same app -->

    <!-- 1.1.1. Using namespace THIS -->
    <flow name="raiseErrorWithinThisNamespace">
        <this:raise-this />
    </flow>

    <operation:def name="raiseThis" displayName="." summary=".">
        <operation:output>
            <operation:payload-type type="void"/>
        </operation:output>
        <operation:body>
            <this:raise-custom />
        </operation:body>
    </operation:def>

    <operation:def name="raiseCustom" displayName="." summary=".">
        <operation:output>
            <operation:payload-type type="void"/>
        </operation:output>
        <operation:body>
            <operation:raise-error type="CUSTOM" />
        </operation:body>
    </operation:def>

    <!-- 1.1.2. Errors from the core -->
    <flow name="divisionByZeroFlow">
        <this:division-by-zero />
    </flow>

    <operation:def name="divisionByZero" displayName="." summary=".">
        <operation:output>
            <operation:payload-type type="void"/>
        </operation:output>
        <operation:body>
            <set-payload value="#[84 / 0]" />
        </operation:body>
    </operation:def>

    <!-- 1.1.3: Errors from other extension -->
    <flow name="heisenbergCureCancerFlow">
        <this:heisenberg-cure-cancer />
    </flow>

    <operation:def name="heisenbergCureCancer" displayName="." summary=".">
        <operation:output>
            <operation:payload-type type="void"/>
        </operation:output>
        <operation:body>
            <heisenberg:cure-cancer />
        </operation:body>
    </operation:def>

    <!-- 1.1.4: Using the new operation:raise-error -->
    <flow name="usingOperationRaiseErrorFlow" >
        <this:raise-custom />
    </flow>


    <!-- Use Case 1.2: Error mapping on invocation -->
    <flow name="errorMappingOnInvocationFlow">
        <this:raise-custom>
            <error-mapping sourceType="THIS:CUSTOM" targetType="MY:MAPPED"/>
        </this:raise-custom>
    </flow>


    <!-- Use Case 1.3: Error mapping inside body -->
    <flow name="errorMappingInsideBodyFlow">
        <this:with-mapping-inside-body />
    </flow>

    <operation:def name="withMappingInsideBody" displayName="." summary=".">
        <operation:output>
            <operation:payload-type type="void"/>
        </operation:output>
        <operation:body>
            <heisenberg:cure-cancer>
                <error-mapping sourceType="HEISENBERG:HEALTH" targetType="MY:MAPPED"/>
            </heisenberg:cure-cancer>
        </operation:body>
    </operation:def>

    <operation:def name="mappingAnyInsideBody" displayName="." summary=".">
        <operation:output>
            <operation:payload-type type="void"/>
        </operation:output>
        <operation:body>
            <heisenberg:cure-cancer>
                <error-mapping targetType="MY:MAPPED"/>
            </heisenberg:cure-cancer>
        </operation:body>
    </operation:def>

    <flow name="transitiveMappingFlow">
        <this:transitive-mapping />
    </flow>

    <operation:def name="transitiveMapping" displayName="." summary=".">
        <operation:output>
            <operation:payload-type type="void"/>
        </operation:output>
        <operation:body>
            <heisenberg:cure-cancer>
                <error-mapping sourceType="HEISENBERG:HEALTH" targetType="MY:MAPPED"/>
                <error-mapping sourceType="MY:MAPPED" targetType="MY:TRANSITIVE"/>
            </heisenberg:cure-cancer>
        </operation:body>
    </operation:def>

    <flow name="mappingChildAfterParentFlow">
        <this:mapping-child-after-parent />
    </flow>

    <operation:def name="mappingChildAfterParent" displayName="." summary=".">
        <operation:output>
            <operation:payload-type type="void"/>
        </operation:output>
        <operation:body>
            <heisenberg:cure-cancer>
                <error-mapping sourceType="HEISENBERG:CONNECTIVITY" targetType="MY:MAPPEDCONNECTIVITY"/>
                <error-mapping sourceType="HEISENBERG:HEALTH" targetType="MY:MAPPEDHEALTH"/>
            </heisenberg:cure-cancer>
        </operation:body>
    </operation:def>

    <!-- Combination of 1.2 and 1.3 -->
    <flow name="errorMappingInsideBodyAndInInvocationFlow">
        <this:with-mapping-inside-body >
            <error-mapping sourceType="MY:MAPPED" targetType="MY:MAPPED_TWICE"/>
        </this:with-mapping-inside-body>
    </flow>

    <!-- Use Case 1.4: Payload is not set when operation raises errors -->
    <flow name="operationSettingPayloadAndRaisingErrorFlow">
        <try>
            <set-payload value="Payload before calling the operation" />
            <this:set-payload-and-raise-error />
            <error-handler>
                <on-error-continue />
            </error-handler>
        </try>
    </flow>

    <operation:def name="setPayloadAndRaiseError" >
        <operation:output>
            <operation:payload-type type="string" />
        </operation:output>
        <operation:body>
            <set-payload value="Payload set within the operation" />
            <operation:raise-error type="CUSTOM" />
        </operation:body>
    </operation:def>

    <!-- This test is intended to avoid a change breaking backwards for the old behavior of flows (opposite to the
         use case 1.4) -->
    <flow name="backwardsCompatibleAwfulBehaviorFlow">
        <try>
            <set-payload value="Payload before calling the referenced flow" />
            <flow-ref name="setPayloadAndRaiseErrorFlow" />
            <error-handler>
                <on-error-continue />
            </error-handler>
        </try>
    </flow>

    <flow name="setPayloadAndRaiseErrorFlow">
        <try>
            <set-payload value="Payload set within the referenced flow" />
            <raise-error type="APP:CUSTOM" />
        </try>
    </flow>
</mule>
