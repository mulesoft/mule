<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:operation="http://www.mulesoft.org/schema/mule/operation"
      xmlns:this="http://www.mulesoft.org/schema/mule/this"
      xmlns:test-components="http://www.mulesoft.org/schema/mule/test-components"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/test-components http://www.mulesoft.org/schema/mule/test-components/current/mule-test-components.xsd
        http://www.mulesoft.org/schema/mule/operation http://www.mulesoft.org/schema/mule/operation/current/mule-operation.xsd
        http://www.mulesoft.org/schema/mule/this http://www.mulesoft.org/schema/mule/this/current/mule-this.xsd">

    <operation:def name="helloWorld" displayName="Hello World operation" summary="Returns a polite greeting">
        <operation:parameters>
            <operation:parameter name="receiver" type="string" summary="The name of the person being greeted"/>
            <operation:optional-parameter name="greeting" type="string" summary="The greeting message" defaultValue="Hello, ">
                <operation:description>The greeting message appended before the receivers name</operation:description>
            </operation:optional-parameter>
            <operation:optional-parameter name="prefix" type="string" summary="The receiver's prefix" defaultValue="">
                <operation:description>The prefix added to the receiver</operation:description>
            </operation:optional-parameter>
            <operation:optional-parameter name="suffix" type="string" summary="The receiver's suffix">
                <operation:description>The suffix added to the receiver</operation:description>
            </operation:optional-parameter>
        </operation:parameters>
        <operation:output>
            <operation:payload-type type="string"/>
        </operation:output>
        <operation:body>
            <test-components:intercept-value ref="helloWorld" value="#[params]"/>

            <choice>
                <when expression="#[payload != null or attributes != null]">
                    <raise-error type="MULE:ANY" description="payload or attributes not null"/>
                </when>
            </choice>
            
            <set-payload
                    value="#['$(params.greeting) $(params.prefix) $(params.receiver) $(if(params.suffix == null) '' else params.suffix)']"/>
        </operation:body>
    </operation:def>

    <operation:def name="introduceMyself" summary="Returns an introductory message. Like a sir.">
        <operation:parameters>
            <operation:parameter name="name" type="string" summary="The gentleman's name"/>
            <operation:parameter name="nationalID" type="string" summary="The gentleman's identification"/>
        </operation:parameters>
        <operation:output>
            <operation:payload-type type="string"/>
            <operation:attributes-type type="string"/>
        </operation:output>
        <operation:body>
            <test-components:intercept-value ref="introduceMyself" value="#[params]"/>

            <choice>
                <when expression="#[sizeOf(vars) > 0]">
                    <raise-error type="MULE:ANY" description="vars not empty"/>
                </when>
            </choice>

            <set-payload value="#['Hello lad, my name is $(params.name)']"/>
            <!-- TODO: Set attributes -->
        </operation:body>
    </operation:def>

    <operation:def name="helloAndIntroduce" displayName="Hello and Introduce" summary="Says Hello and introduces itself">
        <operation:parameters>
            <operation:parameter name="receiver" type="string" summary="The name of the person being greeted"/>
            <operation:parameter name="myName" type="string" summary="The gentleman's name"/>
            <operation:parameter name="myNationalID" type="string" summary="The gentleman's identification"/>
            <operation:optional-parameter name="greeting" type="string" summary="The greeting message" defaultValue="Hello, ">
                <operation:description>The greeting message appended before the receivers name</operation:description>
            </operation:optional-parameter>
            <operation:optional-parameter name="prefix" type="string" summary="The receiver's prefix" defaultValue="">
                <operation:description>The prefix added to the receiver</operation:description>
            </operation:optional-parameter>
            <operation:optional-parameter name="suffix" type="string" summary="The receiver's suffix">
                <operation:description>The suffix added to the receiver</operation:description>
            </operation:optional-parameter>
        </operation:parameters>
        <operation:output>
            <operation:payload-type type="string"/>
            <operation:attributes-type type="string"/>
        </operation:output>
        <operation:body>
            <this:hello-world greeting="#[params.greeting]"
                              receiver="#[params.receiver]"
                              prefix="#[params.prefix]"
                              suffix="#[params.suffix]"
                              target="helloWorld"/>

            <this:introduce-myself name="#[params.myName]"
                                   nationalID="#[params.myNationalID]"/>

            <set-payload value="#[vars.helloWorld ++ ' ' ++ payload]"/>
            <!-- TODO: Set attributes -->

            <set-variable variableName="doNot" value="escape this chain"/>
        </operation:body>
    </operation:def>

    <operation:def name="helloPlace" displayName="Hello to a place" summary="Says Hello to a place">
        <operation:parameters>
            <operation:parameter name="greeting" type="string" summary="The greeting message"/>
            <operation:optional-parameter name="city" type="string" summary="The name of a city to say hello to"/>
            <operation:optional-parameter name="country" type="string" summary="The name of a country to say hello to"/>
            <operation:exclusive-optionals exclusiveOptionals="city,country" oneRequired="true"/>
        </operation:parameters>
        <operation:output>
            <operation:payload-type type="string"/>
            <operation:attributes-type type="string"/>
        </operation:output>
        <operation:body>
            <this:hello-world greeting="#[params.greeting]"
                              receiver="#[if(params.city != null) params.city else params.country]"/>
        </operation:body>
    </operation:def>

    <operation:def name="nonBlockingHelloWorld" displayName="Non Blocking Hello World operation" summary="Returns a polite greeting performed in a non-blocking fashion">
        <operation:parameters>
            <operation:parameter name="receiver" type="string" summary="The name of the person being greeted"/>
            <operation:optional-parameter name="greeting" type="string" summary="The greeting message" defaultValue="Hello, ">
                <operation:description>The greeting message appended before the receivers name</operation:description>
            </operation:optional-parameter>
            <operation:optional-parameter name="prefix" type="string" summary="The receiver's prefix" defaultValue="">
                <operation:description>The prefix added to the receiver</operation:description>
            </operation:optional-parameter>
            <operation:optional-parameter name="suffix" type="string" summary="The receiver's suffix">
                <operation:description>The suffix added to the receiver</operation:description>
            </operation:optional-parameter>
        </operation:parameters>
        <operation:output>
            <operation:payload-type type="string"/>
        </operation:output>
        <operation:body>
            <!-- This is for testing that processors are picked up when inside other components -->
            <choice>
                <when expression="#[true]">
                    <test-components:non-blocking/>
                </when>
            </choice>

            <test-components:non-blocking>
                <test-components:content>#['$(params.greeting) $(params.prefix) $(params.receiver) $(if(params.suffix == null) '' else params.suffix)']</test-components:content>
            </test-components:non-blocking>
        </operation:body>
    </operation:def>

    <operation:def name="blockingHelloWorld" displayName="Blocking Hello World operation" summary="Returns a polite greeting performed in a blocking fashion">
        <operation:parameters>
            <operation:parameter name="receiver" type="string" summary="The name of the person being greeted"/>
            <operation:optional-parameter name="greeting" type="string" summary="The greeting message" defaultValue="Hello, ">
                <operation:description>The greeting message appended before the receivers name</operation:description>
            </operation:optional-parameter>
            <operation:optional-parameter name="prefix" type="string" summary="The receiver's prefix" defaultValue="">
                <operation:description>The prefix added to the receiver</operation:description>
            </operation:optional-parameter>
            <operation:optional-parameter name="suffix" type="string" summary="The receiver's suffix">
                <operation:description>The suffix added to the receiver</operation:description>
            </operation:optional-parameter>
        </operation:parameters>
        <operation:output>
            <operation:payload-type type="string"/>
        </operation:output>
        <operation:body>
            <test-components:non-blocking/>

            <!-- This is for testing that processors are picked up when inside other components -->
            <choice>
                <when expression="#[false]">
                    <set-payload value="Unimportant payload value that will be overwritten"/>
                </when>
            </choice>

            <test-components:non-blocking>
                <test-components:content>#['$(params.greeting) $(params.prefix) $(params.receiver) $(if(params.suffix == null) '' else params.suffix)']</test-components:content>
            </test-components:non-blocking>
        </operation:body>
    </operation:def>

    <!-- Implemented recursively for testing purposes -->
    <operation:def name="repeatedHelloWorld" displayName="Recursive Hello World operation" summary="Returns polite greeting repeated a given number of times">
        <operation:parameters>
            <operation:parameter name="receiver" type="string" summary="The name of the person being greeted"/>
            <operation:parameter name="count" type="number" summary="The number of times to repeat the greeting message"/>
            <operation:optional-parameter name="greeting" type="string" summary="The greeting message" defaultValue="Hello, ">
                <operation:description>The greeting message appended before the receivers name</operation:description>
            </operation:optional-parameter>
            <operation:optional-parameter name="prefix" type="string" summary="The receiver's prefix" defaultValue="">
                <operation:description>The prefix added to the receiver</operation:description>
            </operation:optional-parameter>
            <operation:optional-parameter name="suffix" type="string" summary="The receiver's suffix">
                <operation:description>The suffix added to the receiver</operation:description>
            </operation:optional-parameter>
        </operation:parameters>
        <operation:output>
            <operation:payload-type type="string"/>
        </operation:output>
        <operation:body>
            <choice>
                <when expression="#[params.count > 0]">
                    <this:repeated-hello-world receiver="#[params.receiver]"
                                               count="#[params.count - 1]"
                                               greeting="#[params.greeting]"
                                               prefix="#[params.prefix]"
                                               suffix="#[params.suffix]"
                                               target="recursionOutput"/>

                    <this:hello-world greeting="#[params.greeting]"
                                      receiver="#[params.receiver]"
                                      prefix="#[params.prefix]"
                                      suffix="#[params.suffix]"/>

                    <test-components:non-blocking>
                        <test-components:content>#[payload ++ if(vars.recursionOutput != null) vars.recursionOutput else '']</test-components:content>
                    </test-components:non-blocking>
                </when>
            </choice>
        </operation:body>
    </operation:def>

</mule>
