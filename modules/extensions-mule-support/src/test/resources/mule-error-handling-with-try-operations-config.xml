<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:this="http://www.mulesoft.org/schema/mule/this"
      xmlns:operation="http://www.mulesoft.org/schema/mule/operation"
      xmlns:heisenberg="http://www.mulesoft.org/schema/mule/heisenberg"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
          http://www.mulesoft.org/schema/mule/operation http://www.mulesoft.org/schema/mule/operation/current/mule-operation.xsd
          http://www.mulesoft.org/schema/mule/heisenberg http://www.mulesoft.org/schema/mule/heisenberg/current/mule-heisenberg.xsd
          http://www.mulesoft.org/schema/mule/this http://www.mulesoft.org/schema/mule/this/current/mule-this.xsd">

    <!-- Use case 1.4: Silencing errors within operation -->
    <flow name="flowCallingOperationThatSilencesOneSpecificErrorAndRaisesAnother">
        <this:operation-silencing-one-specific-error-and-raising-another />
    </flow>

    <operation:def name="operationSilencingOneSpecificErrorAndRaisingAnother" >
        <operation:output>
            <operation:payload-type type="void"/>
        </operation:output>
        <operation:body>
            <try>
                <heisenberg:cure-cancer />
                <error-handler>
                    <on-error-continue type="HEISENBERG:HEALTH"> <!-- catching HEALTH but not OAUTH2 -->
                        <operation:raise-error type="CUSTOM" />
                    </on-error-continue>
                </error-handler>
            </try>
        </operation:body>
    </operation:def>

    <flow name="flowCallingOperationThatSilencesAllErrorsAndRaisesAnother">
        <this:operation-silencing-all-errors-and-raising-another />
    </flow>

    <operation:def name="operationSilencingAllErrorsAndRaisingAnother" >
        <operation:output>
            <operation:payload-type type="void"/>
        </operation:output>
        <operation:body>
            <try>
                <heisenberg:cure-cancer />
                <error-handler>
                    <on-error-continue> <!-- catching all -->
                        <operation:raise-error type="CUSTOM" />
                    </on-error-continue>
                </error-handler>
            </try>
        </operation:body>
    </operation:def>

    <flow name="flowCallingOperationThatSilencesAllHeisenbergErrorsAndRaisesAnother">
        <this:operation-silencing-all-heisenberg-errors-and-raising-another />
    </flow>

    <operation:def name="operationSilencingAllHeisenbergErrorsAndRaisingAnother" >
        <operation:output>
            <operation:payload-type type="void"/>
        </operation:output>
        <operation:body>
            <try>
                <heisenberg:cure-cancer />
                <error-handler>
                    <on-error-continue type="HEISENBERG:*">
                        <operation:raise-error type="HEALTH" />
                    </on-error-continue>
                </error-handler>
            </try>
        </operation:body>
    </operation:def>

    <operation:def name="operationSilencingAllHealthErrorsWithinACatchAll" >
        <operation:output>
            <operation:payload-type type="void"/>
        </operation:output>
        <operation:body>
            <try>
                <heisenberg:cure-cancer />
                <error-handler>
                    <on-error-continue> <!-- this catches all -->
                        <try>
                            <heisenberg:cure-cancer />
                            <operation:raise-error type="HEALTH" />
                            <error-handler>
                                <on-error-continue type="*:HEALTH" /> <!-- this catches both HEALTH errors, so OAUTH2 is propagated -->
                            </error-handler>
                        </try>
                    </on-error-continue>
                </error-handler>
            </try>
        </operation:body>
    </operation:def>

    <operation:def name="operationWithMultipleOnErrorContinues" >
        <operation:output>
            <operation:payload-type type="void"/>
        </operation:output>
        <operation:body>
            <try>
                <heisenberg:cure-cancer />
                <error-handler>
                    <on-error-continue type="HEISENBERG:HEALTH" />
                    <on-error-continue type="HEISENBERG:OAUTH2" />
                </error-handler>
            </try>
        </operation:body>
    </operation:def>

    <operation:def name="operationCatchingAllButWithWhen" >
        <operation:output>
            <operation:payload-type type="void"/>
        </operation:output>
        <operation:body>
            <try>
                <heisenberg:cure-cancer />
                <error-handler>
                    <on-error-continue type="HEISENBERG:*" when="#[someCondition()]" />
                </error-handler>
            </try>
        </operation:body>
    </operation:def>

    <operation:def name="operationRaisingUniqueErrorAndCatchingIt" >
        <operation:output>
            <operation:payload-type type="void"/>
        </operation:output>
        <operation:body>
            <try>
                <operation:raise-error type="UNIQUE" />
                <error-handler>
                    <on-error-continue type="THIS:UNIQUE" />
                </error-handler>
            </try>
        </operation:body>
    </operation:def>

    <flow name="nestedErrorsFlow">
        <this:nested-raise-errors/>
    </flow>
    
    <operation:def name="nestedRaiseErrors">
        <operation:output>
            <operation:payload-type type="void"/>
        </operation:output>
        <operation:body>
            <try>
                <try>
                    <try>
                        <operation:raise-error type="FIRST" description="First error" />
                        <error-handler>
                            <on-error-continue>
                                <operation:raise-error type="SECOND" description="Second error" />
                            </on-error-continue>
                        </error-handler>
                    </try>
                    <error-handler>
                        <on-error-continue>
                            <operation:raise-error type="THIRD" description="Third error" />
                        </on-error-continue>
                    </error-handler>
                </try>
                <error-handler>
                    <on-error-continue>
                        <operation:raise-error type="FOURTH" description="Fourth error" />
                    </on-error-continue>
                </error-handler>
            </try>
        </operation:body>
    </operation:def>
</mule>
