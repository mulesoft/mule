<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns="http://www.mulesoft.org/schema/mule/atom"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:mule="http://www.mulesoft.org/schema/mule/core"
            xmlns:schemadoc="http://www.mulesoft.org/schema/mule/schemadoc"
            xmlns:beans="http://www.springframework.org/schema/beans"
            targetNamespace="http://www.mulesoft.org/schema/mule/atom"
            elementFormDefault="qualified" attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:import namespace="http://www.springframework.org/schema/beans"
                schemaLocation="http://www.springframework.org/schema/beans/spring-beans-3.1.xsd"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/core"
                schemaLocation="http://www.mulesoft.org/schema/mule/core/3.9/mule.xsd"/>

    <xsd:import namespace="http://www.mulesoft.org/schema/mule/schemadoc"
                schemaLocation="http://www.mulesoft.org/schema/mule/schemadoc/3.9/mule-schemadoc.xsd"/>

    <xsd:annotation>
        <xsd:documentation>
            The Mule ATOM support makes it possible to integrate easily with Atom feeds and Atom Publishing Protocol servers via the Apache Abdera project.
        </xsd:documentation>

        <xsd:appinfo>
            <schemadoc:short-name>ATOM</schemadoc:short-name>
            <schemadoc:page-title>ATOM Module</schemadoc:page-title>

            <schemadoc:transport-features receiveEvents="true" dispatchEvents="true"
                                          requestEvents="true"
                                          transactions="false" streaming="true">
                <schemadoc:MEPs supported="one-way" default="one-way"/>
            </schemadoc:transport-features>
        </xsd:appinfo>
    </xsd:annotation>

    <xsd:element name="route-filter" type="routeFilterType"
                 substitutionGroup="mule:abstract-filter">
        <xsd:annotation>
            <xsd:documentation>
                Allows ATOM requests to be filtered by request path and HTTP verb.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="routeFilterType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractFilterType">
                <xsd:attribute name="route" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The URI request path made for an ATOM request. This matches against the path of the request URL. The route attribute defines a type of URI Template loosely based on Ruby on Rails style Routes. For example: "feed" or ":feed/:entry". For reference, see the Ruby On Rails routing http://guides.rubyonrails.org/routing.html
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="verbs" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            A comma-separated list of HTTP verbs that will be accepted by this filter. By default all verbs are accepted.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="entry-last-updated-filter" type="entryLastUpdateFilterType"
                 substitutionGroup="mule:abstract-filter">
        <xsd:annotation>
            <xsd:documentation>
                Will filter ATOM entry objects based on their last update date. This is useful for filtering older entries from the feed. This filter works only on Atom Entry objects not Feed objects.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="entryLastUpdateFilterType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractFilterType">
                <xsd:attribute name="lastUpdate" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            The date from which to filter events from. Any entries that were last updated before this date will not be accepted. The date format is: yyyy-MM-dd hh:mm:ss, for example 2008-12-25 13:00:00. If only the date is important you can omit the time part. You can set the value to 'now' to set the date and time that the server is started. Do not set this attribute if you want to receive all available entries then any new entries going forward. This is the default behaviour and suitable for many scenarios.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="acceptWithoutUpdateDate" type="mule:substitutableBoolean" default="true">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether an entry should be accepted if it doesn't have a Last Update date set.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="feed-last-updated-filter" type="feedLastUpdateFilterType" substitutionGroup="mule:abstract-filter">
        <xsd:annotation>
            <xsd:documentation>
                Will filter the whole ATOM Feed based on its last update date. This is useful for processing a feed that has not been updated since a specific date.
                This filter works only on Atom Feed objects.
                Typically it is better to set the lastUpdated attribute on an inbound ATOM endpoint with splitFeed=false rather than use this filter, however, this filter can be used elsewhere in a flow.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="feedLastUpdateFilterType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractFilterType">
                <xsd:attribute name="lastUpdate" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            The date from which to filter events from.  Any entries that were last updated before this date will not be accepted. The date format is
                            The format for the date is is: yyyy-MM-dd hh:mm:ss, for example 2008-12-25 13:00:00.
                            If only the date is important you can omit the time part.
                            You can set the value to 'now' to set the date and time that the server is started.

                            Do not set this attribute if you want to receive all available entries then any new entries going forward.
                            This is the default behaviour and suitable for many scenarios.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="acceptWithoutUpdateDate" type="mule:substitutableBoolean" default="true">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether a Feed should be accepted if it doesn't have a Last Update date set.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="object-to-feed-transformer" type="mule:abstractTransformerType" substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                Transforms the payload of the message to a {{org.apache.abdera.model.Feed}} instance.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="component" type="atomComponentType" substitutionGroup="mule:abstract-component">
        <xsd:annotation>
            <xsd:documentation>
                Represents an Abdera component.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="atomComponentType">
        <xsd:complexContent>
            <xsd:extension base="mule:defaultJavaComponentType">
                <xsd:attributeGroup ref="componentAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:attributeGroup name="componentAttributes">
        <xsd:attribute name="provider-ref" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    The id of the Atom provider that is defined as Spring bean.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:element name="feed-splitter" type="mule:baseSplitterType"
                 substitutionGroup="mule:abstract-intercepting-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Will split the entries of a feed into single entry objects. Each entry will be a separate message in Mule.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="entry-builder-transformer" type="entryBuilderTransformerType"
                 substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                A transformer that uses expressions to configure an Atom Entry. The user can specify one or more expressions that are used to configure properties on the bean.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="entryBuilderTransformerType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractTransformerType">
                <xsd:sequence minOccurs="1" maxOccurs="unbounded">
                    <xsd:element name="entry-property">
                        <xsd:complexType>
                            <xsd:attribute name="name" use="required">
                                <xsd:annotation>
                                    <xsd:documentation>
                                        The name of the atom property
                                    </xsd:documentation>
                                </xsd:annotation>
                                <xsd:simpleType>
                                    <xsd:restriction base="mule:substitutableName">
                                        <xsd:enumeration value="content"/>
                                        <xsd:enumeration value="summary"/>
                                        <xsd:enumeration value="id"/>
                                        <xsd:enumeration value="title"/>
                                        <xsd:enumeration value="draft"/>
                                        <xsd:enumeration value="updated"/>
                                        <xsd:enumeration value="published"/>
                                        <xsd:enumeration value="edited"/>
                                        <xsd:enumeration value="author"/>
                                        <xsd:enumeration value="contributor"/>
                                        <xsd:enumeration value="link"/>
                                        <xsd:enumeration value="category"/>
                                        <xsd:enumeration value="rights"/>
                                    </xsd:restriction>
                                </xsd:simpleType>
                            </xsd:attribute>
                            <xsd:attributeGroup ref="mule:expressionAttributes"/>
                            <xsd:attribute name="optional" type="mule:substitutableBoolean" use="optional">
                                <xsd:annotation>
                                    <xsd:documentation>An optional expression means that if the expression evaluates to null, it will continue to the next expression without error.
                                    </xsd:documentation>
                                </xsd:annotation>
                            </xsd:attribute>
                        </xsd:complexType>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
</xsd:schema>
