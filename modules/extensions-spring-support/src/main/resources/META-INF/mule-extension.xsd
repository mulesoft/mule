<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:mule="http://www.mulesoft.org/schema/mule/core"
            xmlns="http://www.mulesoft.org/schema/mule/extension"
            targetNamespace="http://www.mulesoft.org/schema/mule/extension"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/core"
                schemaLocation="http://www.mulesoft.org/schema/mule/core/current/mule.xsd"/>

    <xsd:annotation>
        <xsd:documentation>
            Configuration elements common to all Mule Extensions
        </xsd:documentation>
    </xsd:annotation>

    <xsd:element name="extensions-config" type="extensionsConfigType"
                 substitutionGroup="mule:abstract-configuration-extension">
        <xsd:annotation>
            <xsd:documentation>
                Application level configuration about how to handle Mule Extensions
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="extensionsConfigType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractConfigurationExtensionType">
                <xsd:sequence>
                    <xsd:choice>
                        <xsd:element name="dynamic-configuration-expiration" type="dynamicConfigurationExpirationType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>
                                    Configuration about how often to check for expirable dynamic configuration instances and actually do
                                    dispose them
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:choice>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="dynamicConfigurationExpirationType">
        <xsd:attribute name="frequency" type="mule:substitutableLong" use="required">
            <xsd:annotation>
                <xsd:documentation>
                    A scalar time value for how often should the platform check for expirable dynamic configs
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="timeUnit" type="mule:timeUnitType" use="required">
            <xsd:annotation>
                <xsd:documentation>
                    A time unit that qualifies the frequency attribute
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:element name="abstractConnectionProvider" abstract="true">
        <xsd:annotation>
            <xsd:documentation>
                Connection Providers are responsible for configuring, creating and managing
                connections
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="abstractConnectionProviderType">
        <xsd:annotation>
            <xsd:documentation>
                Abstract type for ConnectionProvider elements.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="mule:annotatedType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="dynamic-config-policy" type="dynamicConfigPolicyType">
        <xsd:annotation>
            <xsd:documentation>
                Settings which define how the platform should manage dynamic instances of a configuration element.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>


    <xsd:complexType name="dynamicConfigPolicyType">
        <xsd:annotation>
            <xsd:documentation>
                Settings which define how the platform should manage dynamic instances of a configuration element.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:choice>
                <xsd:element name="expiration-policy" type="expirationPolicyType" minOccurs="0" maxOccurs="1">
                    <xsd:annotation>
                        <xsd:documentation>
                            Configures the minimum amount of time that a dynamic configuration instance can remain idle
                            before the platform considers it eligible for expiration. This does not mean that the platform
                            will expire the instance at the exact moment that it becomes eligible. The platform will actually
                            purge the instances when it sees it fit.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:choice>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="expirationPolicyType">
        <xsd:attribute name="maxIdleTime" type="mule:substitutableLong" use="required">
            <xsd:annotation>
                <xsd:documentation>
                    A scalar time value for the maximum amount of time a dynamic configuration instance should be allowed
                    to be idle before it's considered eligible for expiration
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="timeUnit" type="mule:timeUnitType" use="required">
            <xsd:annotation>
                <xsd:documentation>
                    A time unit that qualifies the maxIdleTime attribute
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:simpleType name="operationTransactionalActionType">
        <xsd:annotation>
            <xsd:documentation>
                The type of joining action that operations can take
                regarding transactions. Possible values are:
                ALWAYS_JOIN - Always expects a transaction to be in progress when a message is received. If there is no
                transaction, an exception is thrown.
                JOIN_IF_POSSIBLE - Join the current transaction if one is available. Otherwise, no transaction is
                created.
                NOT_SUPPORTED - Execute outside any existent transaction.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:NMTOKEN">
            <xsd:enumeration value="ALWAYS_JOIN"/>
            <xsd:enumeration value="JOIN_IF_POSSIBLE"/>
            <xsd:enumeration value="NOT_SUPPORTED"/>
        </xsd:restriction>
    </xsd:simpleType>

</xsd:schema>
