<?xml version="1.0" encoding="UTF-8" ?>
<xsd:schema xmlns="http://www.mulesoft.org/schema/mule/module"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:mule="http://www.mulesoft.org/schema/mule/core"
            targetNamespace="http://www.mulesoft.org/schema/mule/module"
            attributeFormDefault="unqualified"
            elementFormDefault="qualified">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/core"
                schemaLocation="http://www.mulesoft.org/schema/mule/core/current/mule.xsd"/>

    <xsd:element name="module" type="moduleConfigType">
        <xsd:annotation>
            <xsd:documentation>
                Root element of a module that contains either properties, operations, or mule global elements as child.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="operation" type="operationType">
        <xsd:annotation>
            <xsd:documentation>
                An operation that will be exposed by the module, it behaves like a function as it has a set of input parameters and a single output
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="operationType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractExtensionType">
                <xsd:sequence>
                    <xsd:element name="parameters" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>
                                Set of parameters that wil be used to feed a new event, that will be passed through the scope defined by the body
                            </xsd:documentation>
                        </xsd:annotation>
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element ref="parameter" minOccurs="1" maxOccurs="unbounded"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="body">
                        <xsd:annotation>
                            <xsd:documentation>
                                Collection of message processors that can be callable from a scope.
                            </xsd:documentation>
                        </xsd:annotation>
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:group ref="mule:messageProcessorOrMixedContentMessageProcessor" maxOccurs="unbounded"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element ref="output" minOccurs="1" maxOccurs="1"/>
                </xsd:sequence>
                <xsd:attribute name="name" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            Every operation must be named so that it can be called in a mule application.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="parameter" type="parameterType">
        <xsd:annotation>
            <xsd:documentation>
                A parameter element defines an input value for the operation in which it is define. Such parameter must be defined with a meaningful name, a type which defines the kind of content the parameter must have and optionally a default value that will be used if the invocation to the operation does not defines a value for the parameter. The parameter can be accessed within the body definition of the operation using an expression such as #[mel: param.paramName]
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="parameterType">
        <xsd:complexContent>
            <xsd:extension base="mule:annotatedType">
                <xsd:attribute name="name" type="xsd:string" use="required"/>
                <xsd:attribute name="defaultValue" type="xsd:string" use="optional"/>
                <xsd:attribute name="use" type="useType" default="AUTO"/>
                <xsd:attribute name="type" use="required" type="xsd:string"/>
                <xsd:attribute name="password" type="xsd:boolean" default="false"/>
                <xsd:attribute name="role" type="roleParameterType" default="BEHAVIOUR"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="output" type="outputType">
        <xsd:annotation>
            <xsd:documentation>
                Defines the output of the operation if exists, void otherwise.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="outputType">
        <xsd:complexContent>
            <xsd:extension base="mule:annotatedType">
                <xsd:attribute name="type" type="xsd:string"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="property" type="propertyType">
        <xsd:annotation>
            <xsd:documentation>
                A property element defines an input value for the operation in which it is define. Such property must be defined with a meaningful name, a type which defines the kind of content the property must have and optionally a default value that will be used if the invocation to the operation does not defines a value for the property. The property can be accessed within the body definition of the operation using an expression such as #[mel: property.paramName]
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="propertyType">
        <xsd:complexContent>
            <xsd:extension base="mule:annotatedType">
                <xsd:attribute name="name" type="xsd:string" use="required"/>
                <xsd:attribute name="defaultValue" type="xsd:string" use="optional"/>
                <xsd:attribute name="use" type="useType" default="AUTO"/>
                <xsd:attribute name="type" type="xsd:string" use="required"/>
                <xsd:attribute name="password" type="xsd:boolean" default="false"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="moduleConfigType">
        <xsd:annotation>
            <xsd:documentation>
                A module is defined by three types of elements: properties, global elements and operations.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="mule:abstractExtensionType">
                <xsd:sequence maxOccurs="unbounded" minOccurs="1">
                    <xsd:choice minOccurs="1" maxOccurs="unbounded">
                        <xsd:element ref="property"/>
                        <xsd:element ref="operation" />
                        <xsd:group ref="mule:muleRootElements">
                            <xsd:annotation>
                                <xsd:documentation>
                                    Any global element that can be used in a mule application must be able to put within a module.
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:group>
                    </xsd:choice>
                </xsd:sequence>
                <xsd:attribute name="name" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            Name of the module that identifies it.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="category" type="categoryType" default="COMMUNITY">
                    <xsd:annotation>
                        <xsd:documentation>
                            Expected category of the module.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="vendor" type="xsd:string" default="MuleSoft">
                    <xsd:annotation>
                        <xsd:documentation>
                            Expected vendor of the module.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="minMuleVersion" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            Min Mule version that the extension requires to work correctly.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <!-- DSL XML attributes -->
                <xsd:attribute name="namespace" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            Expected namespace of the module to look for when generating the schemas. If left empty it will
                            default to http://www.mulesoft.org/schema/mule/[prefix], where [prefix] is the attribute prefix attribute value.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="prefix" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            Expected prefix of the module to look for when generating the schemas. If left empty it will create a
                            default one based on the extension's name, removing the words "extension", "module" or "connector" at
                            the end if they are present and hyphenizing the resulting name.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:simpleType name="categoryType">
        <xsd:annotation>
            <xsd:documentation>
                Set of defined categories for a module.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="COMMUNITY"/>
            <xsd:enumeration value="SELECT"/>
            <xsd:enumeration value="PREMIUM"/>
            <xsd:enumeration value="CERTIFIED"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="roleParameterType">
        <xsd:annotation>
            <xsd:documentation>
                Set of defined roles for a given parameter.
                BEHAVIOUR will render attributes;
                CONTENT implies support for DataWeave in place;
                PRIMARY works similarly to CONTENT although it also implies it will map to the payload
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="BEHAVIOUR"/>
            <xsd:enumeration value="CONTENT"/>
            <xsd:enumeration value="PRIMARY"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="useType">
        <xsd:annotation>
            <xsd:documentation>
                Set of defined uses for a given property/parameter.
                REQUIRED implies the property/parameter must be present. It can not be REQUIRED if the parameter/property has a defaultValue;
                OPTIONAL implies the property/parameter could be absent.
                AUTO will default at runtime to REQUIRED if defaultValue is absent, otherwise it will be marked as OPTIONAL.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="REQUIRED"/>
            <xsd:enumeration value="OPTIONAL"/>
            <xsd:enumeration value="AUTO"/>
        </xsd:restriction>
    </xsd:simpleType>
</xsd:schema>
