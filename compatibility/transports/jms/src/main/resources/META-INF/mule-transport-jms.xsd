<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns="http://www.mulesoft.org/schema/mule/transport/jms"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:mule="http://www.mulesoft.org/schema/mule/core"
            xmlns:transports="http://www.mulesoft.org/schema/mule/transports"
            xmlns:schemadoc="http://www.mulesoft.org/schema/mule/schemadoc"
            xmlns:spring="http://www.springframework.org/schema/beans"
            targetNamespace="http://www.mulesoft.org/schema/mule/transport/jms"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:import namespace="http://www.springframework.org/schema/beans"
                schemaLocation="http://www.springframework.org/schema/beans/spring-beans-3.1.xsd"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/core"
                schemaLocation="http://www.mulesoft.org/schema/mule/core/current/mule.xsd" />
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/transports"
                schemaLocation="http://www.mulesoft.org/schema/mule/transports/current/mule-transports.xsd" />
    <xsd:import namespace = "http://www.mulesoft.org/schema/mule/schemadoc"
                schemaLocation = "http://www.mulesoft.org/schema/mule/schemadoc/current/mule-schemadoc.xsd"/>

    <xsd:annotation>
        <xsd:documentation>The JMS transport provides support for sending messages via JMS queues.</xsd:documentation>
        <xsd:appinfo>
            <schemadoc:short-name>JMS</schemadoc:short-name>
            <schemadoc:page-title>JMS Transport</schemadoc:page-title>
            <schemadoc:transport-features receiveEvents="true" dispatchEvents="true"
                                          requestEvents="true" retries="true"
                                          transactions="true" transactionTypes="client ack, local, XA"
                                          streaming="false">
                <schemadoc:MEPs supported="one-way, request-response" default="one-way"/>
            </schemadoc:transport-features>
        </xsd:appinfo>
    </xsd:annotation>

    <!-- Generic JMS Connector -->
    <xsd:element name="connector" type="genericConnectorType" substitutionGroup="mule:abstract-shared-connector">
        <xsd:annotation>
            <xsd:documentation>
                The connector element configures a generic connector for sending and receiving messages over JMS queues.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="genericConnectorType">
        <xsd:complexContent>
            <xsd:extension base="transports:transactedConnectorType">
                <xsd:sequence minOccurs="0" maxOccurs="unbounded">
                    <xsd:element ref="abstract-jndi-name-resolver" minOccurs="0" maxOccurs="1"/>
                </xsd:sequence>

                <!-- The ConnectionFactory is required for non-vendor JMS configs -->
                <xsd:attribute name="connectionFactory-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Reference to the connection factory, which is required for non-vendor JMS configurations.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attributeGroup ref="jmsConnectorAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- Custom JMS Connector -->
    <xsd:element name="custom-connector" substitutionGroup="mule:abstract-shared-connector">
        <xsd:annotation>
            <xsd:documentation>
                The custom-connector element configures a custom connector for sending and receiving messages over JMS queues.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="transports:customConnectorType">
                    <xsd:sequence minOccurs="0" maxOccurs="unbounded">
                        <xsd:element ref="abstract-jndi-name-resolver" minOccurs="0" maxOccurs="1" />
                    </xsd:sequence>
                    <xsd:attributeGroup ref="jmsConnectorAttributes" />
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:attributeGroup name="jmsConnectorAttributes">
        <xsd:attribute name="redeliveryHandlerFactory-ref" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    Reference to the redelivery handler.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="acknowledgementMode" default="AUTO_ACKNOWLEDGE">
            <xsd:annotation>
                <xsd:documentation>
                    The acknowledgement mode to use: AUTO_ACKNOWLEDGE, CLIENT_ACKNOWLEDGE, or DUPS_OK_ACKNOWLEDGE.
                </xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
                <xsd:restriction base="xsd:NMTOKEN">
                    <xsd:enumeration value="AUTO_ACKNOWLEDGE"/>
                    <xsd:enumeration value="CLIENT_ACKNOWLEDGE"/>
                    <xsd:enumeration value="DUPS_OK_ACKNOWLEDGE"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="clientId" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    The ID of the JMS client.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="durable" type="mule:substitutableBoolean">
            <xsd:annotation>
                <xsd:documentation>
                    Whether to make all topic subscribers durable.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="noLocal" type="mule:substitutableBoolean">
            <xsd:annotation>
                <xsd:documentation>
                    If set to true, a subscriber will not receive messages that were published by its own connection.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="persistentDelivery" type="mule:substitutableBoolean">
            <xsd:annotation>
                <xsd:documentation>
                    If set to true, the JMS provider logs the message to stable storage as it is sent so that it can be recovered if delivery is unsuccessful.

                    A client marks a message as persistent if it feels that the application will have problems if the message is lost in transit. A client marks a message as non-persistent if an occasional lost message is tolerable. Clients use delivery mode to tell a JMS provider how to balance message transport reliability/throughput.

                    Delivery mode only covers the transport of the message to its destination. Retention of a message at the destination until its receipt is acknowledged is not guaranteed by a PERSISTENT delivery mode. Clients should assume that message retention policies are set administratively. Message retention policy governs the reliability of message delivery from destination to message consumer. For example, if a client's message storage space is exhausted, some messages as defined by a site specific message retention policy may be dropped.

                    A message is guaranteed to be delivered once-and-only-once by a JMS Provider if the delivery mode of the messge is persistent and if the destination has a sufficient message retention policy.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="honorQosHeaders" type="mule:substitutableBoolean">
            <xsd:annotation>
                <xsd:documentation>
                    If set to true, the message's QoS headers are honored. If false (the default), the connector settings override the message headers.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="maxRedelivery" type="mule:substitutableInt">
            <xsd:annotation>
                <xsd:documentation>
                    The maximum number of times to try to redeliver a message. Use -1 to accept messages with any redelivery count.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="cacheJmsSessions" type="mule:substitutableBoolean" default="true">
            <xsd:annotation>
                <xsd:documentation>
                    Whether to cache and re-use the JMS session and producer object instead of recreating them for each request. The default behaviour is to cache JMS Sessions and Producers (previous to 3.6, the default behaviuor was to not cache them). NOTE: This is NOT supported with XA transactions or JMS 1.0.2b.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="eagerConsumer" type="mule:substitutableBoolean">
            <xsd:annotation>
                <xsd:documentation>
                    Whether to create a consumer right when the connection is created instead of using lazy instantiation in the poll loop.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <!-- Defaults to org.mule.compatibility.transport.jms.JmsConstants.JMS_SPECIFICATION_102B  -->
        <xsd:attribute name="specification" default="1.0.2b">
            <xsd:annotation>
                <xsd:documentation>
                    The JMS specification to use: 1.0.2b (the default) or 1.1
                </xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
                <xsd:restriction base="xsd:NMTOKEN">
                    <xsd:enumeration value="1.0.2b"/>
                    <xsd:enumeration value="1.1"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="username" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    The user name for the connection
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="password" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    The password for the connection
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="numberOfConsumers" type="mule:substitutableInt">
            <xsd:annotation>
                <xsd:documentation>
                    The number of concurrent consumers that will be used to receive JMS messages. (Note: If you use this attribute, you should not configure the 'numberOfConcurrentTransactedReceivers', which has the same effect.)
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="jndiInitialFactory" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    The initial factory class to use when connecting to JNDI.
                    DEPRECATED: use jndiNameResolver-ref propertie to configure this value.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="jndiProviderUrl" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    The URL to use when connecting to JNDI.
                    DEPRECATED: use jndiNameResolver-ref propertie to configure this value.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="jndiProviderProperties-ref" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    Reference to a Map that contains additional provider properties.
                    DEPRECATED: use jndiNameResolver-ref propertie to configure this value.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="connectionFactoryJndiName" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    The name to use when looking up the connection factory from JNDI.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="jndiDestinations" type="xsd:boolean">
            <xsd:annotation>
                <xsd:documentation>
                    Set this attribute to true if you want to look up queues or topics from JNDI instead of creating them from the session.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="forceJndiDestinations" type="xsd:boolean">
            <xsd:annotation>
                <xsd:documentation>
                    If set to true, Mule fails when a topic or queue cannot be retrieved from JNDI. If set to false, Mule will create a topic or queue from the JMS session if the JNDI lookup fails.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disableTemporaryReplyToDestinations" type="xsd:boolean">
            <xsd:annotation>
                <xsd:documentation>
                    If this is set to false (the default), when Mule performs request/response calls a temporary destination
                    will automatically be set up to receive a response from the remote JMS call.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="embeddedMode" type="xsd:boolean" default="false">
            <xsd:annotation>
                <xsd:documentation>
                    Some application servers, like WebSphere AS, don't allow certain methods to be called on JMS objects,
                    effectively limiting available features. Embedded mode tells Mule to avoid those whenever possible. Default is false.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>


    <!-- Vendor-specific JMS Connectors -->

    <xsd:complexType name="vendorJmsConnectorType">
        <xsd:complexContent>
            <xsd:extension base="transports:transactedConnectorType">
                <xsd:sequence minOccurs="0" maxOccurs="unbounded">
                    <xsd:element ref="abstract-jndi-name-resolver" minOccurs="0" maxOccurs="1"/>
                </xsd:sequence>

                <!-- Optional, a default ConnectionFactory is provided for vendor JMS configs -->
                <xsd:attribute name="connectionFactory-ref" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            Optional reference to the connection factory. A default connection factory is provided for vendor-specific JMS configurations.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attributeGroup ref="jmsConnectorAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="activemq-connector" type="activeMqConnectorType" substitutionGroup="mule:abstract-shared-connector">
        <xsd:annotation>
            <xsd:documentation>
                The activemq-connector element configures an ActiveMQ version of the JMS connector.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="activemq-xa-connector" type="activeMqConnectorType" substitutionGroup="mule:abstract-shared-connector">
        <xsd:annotation>
            <xsd:documentation>
                The activemq-xa-connector element configures an ActiveMQ version of the JMS connector with XA transaction support.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="activeMqConnectorType">
        <xsd:complexContent>
            <xsd:extension base="vendorJmsConnectorType">
                <xsd:attribute name="brokerURL" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                        The URL used to connect to the JMS server. If not set, the default is vm://localhost?broker.persistent=false&amp;broker.useJmx=false.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="mulemq-connector" type="muleMqConnectorType" substitutionGroup="mule:abstract-connector">
        <xsd:annotation>
            <xsd:documentation>
                The mulemq-connector element configures a MuleMQ version of the JMS connector.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="mulemq-xa-connector" type="muleMqConnectorType"
        substitutionGroup="mule:abstract-connector">
        <xsd:annotation>
            <xsd:documentation>
                The mulemq-xa-connector element configures a MuleMQ version of the JMS XA connector.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="muleMqConnectorType">
        <xsd:complexContent>
            <xsd:extension base="vendorJmsConnectorType">
                <xsd:attribute name="brokerURL" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The URL used to connect to the JMS server. If not set, the default is nsp://localhost:9000. When connecting to a cluster separate urls with a comma.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="bufferOutput" type="xsd:string" default="queued">
                    <xsd:annotation>
                        <xsd:documentation>
                           Specifies the type of write handler the client will use to send events to the realm. This can be either standard, direct or queued. Unless specified, standard is used. For better latencies use direct, however, this will impact CPU since each write is not buffered but flushed directly. The queued handler will improve CPU and may give better overall throughput since there will be some buffering between client and server. The best of both options is the standard, which attempts to write directly but will back off and buffer the IO flushes when throughput increases and impacts CPU.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="syncWrites" type="mule:substitutableBoolean" default="false">
                    <xsd:annotation>
                        <xsd:documentation>
                            Sets whether each write to the store will also call sync on the file system to ensure all data is written to the disk, default is false.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="syncBatchSize" type="mule:substitutableInt" default="50">
                    <xsd:annotation>
                        <xsd:documentation>
                            Sets the size of the write sync batch, default is 50, range is 1 to Integer.MAX_VALUE.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="syncTime" type="mule:substitutableInt" default="20">
                    <xsd:annotation>
                        <xsd:documentation>
                            Sets the time interval between sync batches, default is 20 milliseconds, range is 1 to Integer.MAX_VALUE.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="globalStoreCapacity" type="mule:substitutableInt" default="5000">
                    <xsd:annotation>
                        <xsd:documentation>
                            Sets that the default channel/queue capacity setting which will prevent publishing of further events once topic or queue is full, default is 5000, valid range is 1 to Integer.MAX_VALUE.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="maxUnackedSize" type="mule:substitutableInt" default="100">
                    <xsd:annotation>
                        <xsd:documentation>
                            Specifies the maximum number of unacknowledged events a connection will keep in memory before beginning to remove the oldest, default is 100, range is 1 to Integer.MAX_VALUE.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="useJMSEngine" type="mule:substitutableBoolean" default="true">
                    <xsd:annotation>
                        <xsd:documentation>
                            All JMS Topics require this setting to be true, however, if you wish to use different channel types with different fanout engines (in MULEMQ+ only), this can be set to false.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="queueWindowSize" type="mule:substitutableInt" default="100">
                    <xsd:annotation>
                        <xsd:documentation>
                            When using queues, this specifies the number of messages that the server will send in each block between acknowledgments, default is 100, range is 1 to Integer.MAX_VALUE.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="autoAckCount" type="mule:substitutableInt" default="50">
                    <xsd:annotation>
                        <xsd:documentation>
                            When auto acknowledgment mode is selected, rather than ack each event, each nth event will be acknowledged, default is 50, range is 1 to Integer.MAX_VALUE.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="enableSharedDurable" type="mule:substitutableBoolean" default="false">
                    <xsd:annotation>
                        <xsd:documentation>
                            Allows more than 1 durable subscriber on a topic sharing the same name, with only 1 consuming the events. When the first durable disconnects, the second will take over and so on. Default is false.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="randomiseRNames" type="mule:substitutableBoolean" default="true">
                    <xsd:annotation>
                        <xsd:documentation>
                            With multiple RNAMEs, the ability to randomize the RNAMEs is useful for load balancing between cluster nodes.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="messageThreadPoolSize" type="mule:substitutableInt" default="30">
                    <xsd:annotation>
                        <xsd:documentation>
                            Indicates the maximum number of threads each connection will use to deliver asynchronous events, default is 30, range is 1 to Integer.MAX_VALUE
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="discOnClusterFailure" type="mule:substitutableBoolean" default="true">
                    <xsd:annotation>
                        <xsd:documentation>
                                Indicates whether the client connection will be disconnected when the cluster fails, which will cause automatic reconnect to occur, default is true.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="initialRetryCount" type="mule:substitutableInt" default="2">
                    <xsd:annotation>
                        <xsd:documentation>
                            The maximum number of attempts a connection will try to connect to a realm on startup, default is 2, 0 is infinite, range is Integer.MIN_VALUE to Integer.MAX_VALUE
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="muleMqMaxRedelivery" type="mule:substitutableInt" default="100">
                    <xsd:annotation>
                        <xsd:documentation>
                            This indicates the size of the map of redelivered events to store for each consumer, once this limit is reached the oldest will be removed, default is 100, range is 1 to 100
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="retryCommit" type="mule:substitutableBoolean" default="false">
                    <xsd:annotation>
                        <xsd:documentation>
                          If a transacted session commit fails, if this is true, the commit will be retried until either it succeeds or fails with a transaction timeout, default is false.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="enableMultiplexedConnections" type="mule:substitutableBoolean" default="false">
                    <xsd:annotation>
                        <xsd:documentation>
                          if this is true, the session will be multiplexed on a single connection else a new socket is created for each session, default is false.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="weblogic-connector" type="vendorJmsConnectorType" substitutionGroup="mule:abstract-connector">
        <xsd:annotation>
            <xsd:documentation>
                The weblogic-connector element configures a WebLogic version of the JMS connector.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="websphere-connector" type="vendorJmsConnectorType" substitutionGroup="mule:abstract-connector">
        <xsd:annotation>
            <xsd:documentation>
                The websphere-connector element configures a WebSphere version of the JMS connector.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="transaction" type="mule:baseTransactionType" substitutionGroup="mule:abstract-transaction">
        <xsd:annotation>
            <xsd:documentation>
                The transaction element configures a transaction. Transactions allow a series of operations to be grouped together so that they can be rolled back if a failure occurs. Set the action (such as ALWAYS_BEGIN or JOIN_IF_POSSIBLE) and the timeout setting for the transaction.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="client-ack-transaction" type="mule:baseTransactionType" substitutionGroup="mule:abstract-transaction">
        <xsd:annotation>
            <xsd:documentation>
                The client-ack-transaction element configures a client acknowledgment transaction, which is identical to a transaction but with message acknowledgements. There is no notion of rollback with client acknowledgement, but this transaction can be useful for controlling how messages are consumed from a destination.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="jmsmessage-to-object-transformer" type="mule:abstractTransformerType" substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                The jmsmessage-to-object-transformer element configures a transformer that converts a JMS message into an object by extracting the message payload.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="object-to-jmsmessage-transformer" type="mule:abstractTransformerType" substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                The object-to-jmsmessage-transformer element configures a transformer that converts an object into one of five types of JMS messages, depending on the object passed in: java.lang.String -> javax.jms.TextMessage, byte[] -> javax.jms.BytesMessage, java.util.Map (primitive types) -> javax.jms.MapMessage, java.io.InputStream (or java.util.List of primitive types) -> javax.jms.StreamMessage, and java.lang.Serializable including java.util.Map, java.util.List, and java.util.Set objects that contain serializable objects (including primitives) -> javax.jms.ObjectMessage.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="inbound-endpoint" type="inboundEndpointType" substitutionGroup="transports:abstract-inbound-endpoint">
        <xsd:annotation>
            <xsd:documentation>
                The inbound-endpoint element configures an endpoint on which JMS messages are received.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="inboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="transports:abstractInboundEndpointType">
                <xsd:group ref="defaultEndpointElements"/>
                <xsd:attributeGroup ref="transports:allExchangePatterns"/>
                <xsd:attributeGroup ref="transports:defaultEndpointAttributes"/>
                <xsd:attributeGroup ref="addressAttributes"/>
                <xsd:attribute name="durableName" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            (As of 2.2.2) Allows the name for the durable topic subscription to be specified.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="xaPollingTimeout" type="mule:substitutableInt">
                    <xsd:annotation>
                        <xsd:documentation>
                            The number of milliseconds that a transacted message receiver will wait for an incoming message inside an active XA transaction.
                            When no polling timeout is configured, the transaction timeout will be used instead. This attribute is ignored when no XA transaction is configured.
                            NOTE: this value must be considered when the transaction timeout is configured. This means that the transaction timeout must be large enough to cover the polling timeout and the message processing times.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="outbound-endpoint" type="outboundEndpointType" substitutionGroup="transports:abstract-outbound-endpoint">
        <xsd:annotation>
            <xsd:documentation>
                The inbound-endpoint element configures an endpoint to which JMS messages are sent.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="outboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="transports:abstractOutboundEndpointType">
                <xsd:group ref="defaultEndpointElements"/>
                <xsd:attributeGroup ref="transports:allExchangePatterns"/>
                <xsd:attributeGroup ref="transports:defaultEndpointAttributes"/>
                <xsd:attributeGroup ref="addressAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="endpoint" type="globalEndpointType" substitutionGroup="mule:abstract-global-endpoint">
        <xsd:annotation>
            <xsd:documentation>
                The endpoint element configures a global JMS endpoint definition.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="globalEndpointType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractGlobalEndpointType">
                <xsd:group ref="defaultEndpointElements"/>
                <xsd:attributeGroup ref="transports:allExchangePatterns"/>
                <xsd:attributeGroup ref="transports:defaultEndpointAttributes"/>
                <xsd:attributeGroup ref="addressAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:attributeGroup name="addressAttributes">
        <xsd:attribute name="queue" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    The queue name. This attribute cannot be used with the topic attribute (the two are exclusive).
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="topic" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    The topic name. The "topic:" prefix will be added automatically. This attribute cannot be used with the queue attribute (the two are exclusive).
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disableTemporaryReplyToDestinations" type="xsd:boolean">
            <xsd:annotation>
                <xsd:documentation>
                    If this is set to false (the default), when Mule performs request/response calls a temporary destination
                    will automatically be set up to receive a response from the remote JMS call.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <!-- these include option/repeats - should be embedded once -->
    <!-- this is a modified version of what is in mule.xsd, allowing either a selector or a
         normal filter to be set -->
    <xsd:group name="defaultEndpointElements">
        <xsd:sequence>
            <xsd:group ref="transports:commonDefaultEndpointElements"/>
            <xsd:element ref="mule:abstract-xa-transaction" minOccurs="0"/>
            <xsd:choice>
                <!--xsd:element ref="mule:abstract-filter" minOccurs="0"/>    -->
                <xsd:element name="selector" type="jmsSelectorFilter" minOccurs="0"/>
            </xsd:choice>
            <!-- <xsd:element ref="mule:abstract-security-filter" minOccurs="0"/> -->
            <xsd:group ref="mule:propertiesGroup"/>
        </xsd:sequence>
    </xsd:group>

    <xsd:complexType name="jmsSelectorFilter">
        <xsd:annotation>
            <xsd:documentation>
                Sets a selector on the underlying JMS transport. It is not a standard Mule filter and cannot be combined with other filters.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="expression" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>
                    The expression to search for in the property.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:element name="property-filter" substitutionGroup="mule:abstract-filter">
        <xsd:annotation>
            <xsd:documentation>
                The property-filter element configures a filter that allows you to filter messages based on a JMS property.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="mule:abstractFilterType">
                    <xsd:attribute name="propertyName" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                The name of the JMS property.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="propertyClass" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                The class type of the JMS property.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="expression" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                The expression to search for in the property.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="pattern" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                The regular expression pattern to search for in the property. In most cases, if you set both the expression and pattern attributes, only the pattern is used.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="abstract-jndi-name-resolver" abstract="true" type="abstractJndiNameResolverType">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for jndi-name-resolver strategy elements.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="abstractJndiNameResolverType">
        <xsd:annotation>
            <xsd:documentation>
                A service to resolve JNDI names.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="mule:abstractExtensionType"/>
        </xsd:complexContent>
    </xsd:complexType>


    <xsd:element name="default-jndi-name-resolver" type="defaultJndiNameResolverType" substitutionGroup="abstract-jndi-name-resolver"/>

    <xsd:complexType name="defaultJndiNameResolverType">
        <xsd:annotation>
            <xsd:documentation>
                A deafult strategy to resolve JNDI names.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="abstractJndiNameResolverType">
                <xsd:attribute name="jndiInitialFactory" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The initial factory class to use when connecting to JNDI.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="jndiProviderUrl" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The URL to use when connecting to JNDI.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="jndiProviderProperties-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Reference to a Map that contains additional provider properties.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="initialContextFactory-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Reference to a javax.naming.spi.InitialContextFactory implementation that will be used to create the JDNI context.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="custom-jndi-name-resolver" type="customJndiNameResolverType" substitutionGroup="abstract-jndi-name-resolver"/>

    <xsd:complexType name="customJndiNameResolverType">
        <xsd:annotation>
            <xsd:documentation>
                A custom strategy to resolve JNDI names.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="abstractJndiNameResolverType">
                <xsd:sequence>
                    <xsd:element ref="spring:property" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                Spring-style property element for custom configuration.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="class" type="mule:substitutableClass" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            An implementation of the LifecycleAdapter interface.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="caching-connection-factory" type="connectionFactoryPoolType" substitutionGroup="mule:abstract-shared-extension">
        <xsd:annotation>
            <xsd:documentation>
                DEPRECATED: This element is deprecated from Mule 3.6.  This can still but used in 3.6, but it not necessary given that from Mule 3.6 JMS connections cache Sessions/Producers by default when a CachingConnectionFactory has not been configured explicitly.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="connectionFactoryPoolType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractExtensionType">
                <xsd:attribute name="name" type="mule:substitutableName" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            Identifies the pool so that a connector can reference it.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="sessionCacheSize" type="mule:substitutableInt" use="optional" default="1">
                    <xsd:annotation>
                        <xsd:documentation>
                            Defines the maximum amount of connections that can be in the pool.
                            NOTE: This cache size is the maximum limit for the number of cached Sessions per session acknowledgement type (auto, client, dups_ok, transacted).
                            As a consequence, the actual number of cached Sessions may be up to four times as high as the specified value - in the unlikely case of mixing and matching different acknowledgement types.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="cacheProducers" type="mule:substitutableBoolean" use="optional" default="true">
                    <xsd:annotation>
                        <xsd:documentation>
                            Indicates whether to cache JMS MessageProducers for the JMS connection. Default is true
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="connectionFactory-ref" type="mule:substitutableName" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            Reference to the connection factory
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="username" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The user name for the connection
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="password" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The password for the connection
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
</xsd:schema>
