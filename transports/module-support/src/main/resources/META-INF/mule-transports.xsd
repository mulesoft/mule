<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<xsd:schema xmlns="http://www.mulesoft.org/schema/mule/transports"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:mule="http://www.mulesoft.org/schema/mule/core"
            xmlns:mule-cxf="http://www.mulesoft.org/schema/mule/cxf"
            xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
            xmlns:management="http://www.mulesoft.org/schema/mule/management"
            xmlns:spring="http://www.springframework.org/schema/beans"
            targetNamespace="http://www.mulesoft.org/schema/mule/transports"
            attributeFormDefault="unqualified"
            elementFormDefault="qualified">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:import namespace="http://www.springframework.org/schema/beans"
                schemaLocation="http://www.springframework.org/schema/beans/spring-beans-4.1.xsd"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/core"
                schemaLocation="http://www.mulesoft.org/schema/mule/core/current/mule.xsd"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/cxf"
                schemaLocation="http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/scripting"
                schemaLocation="http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/management"
                schemaLocation="http://www.mulesoft.org/schema/mule/management/current/mule-management.xsd"/>

    <!-- Core -->

    <xsd:element name="abstract-inbound-endpoint" abstract="true" type="abstractInboundEndpointType" substitutionGroup="mule:abstract-message-source">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for inbound endpoint elements. Inbound endpoints receive messages from the underlying transport. The message payload is then delivered to the component for processing.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractInboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractMessageSourceType">
                <xsd:attribute name="name" type="mule:substitutableName">
                    <xsd:annotation>
                        <xsd:documentation>
                            Identifies the endpoint in the registry. There is no need to set the 'name' attribute on inbound or outbound endpoints, only on global endpoints.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-outbound-endpoint" abstract="true" type="abstractOutboundEndpointType" substitutionGroup="mule:abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                A placeholder for outbound endpoint elements. Outbound endpoints dispatch messages to the underlying transport.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="abstractOutboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractMessageProcessorType">
                <xsd:attribute name="name" type="mule:substitutableName">
                    <xsd:annotation>
                        <xsd:documentation>
                            Identifies the endpoint in the registry. There is not need to set the 'name' attribute on inbound or outbound endpoints, only on global endpoints.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="endpointConfigurationType">
        <xsd:complexContent>
            <xsd:extension base="mule:configurationType">
                <xsd:sequence>
                    <xsd:element name="default-dispatcher-threading-profile" type="mule:threadingProfileType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                The default dispatching threading profile, which modifies the default-threading-profile values and is used by endpoints for dispatching messages. This can also be configured on connectors, in which case the connector configuration is used instead of this default.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="default-receiver-threading-profile" type="mule:threadingProfileType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                The default receiving threading profile, which modifies the default-threading-profile values and is used by endpoints for receiving messages. This can also be configured on connectors, in which case the connector configuration is used instead of this default.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="default-service-threading-profile" type="mule:threadingProfileType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                The default service threading profile, which modifies the default-threading-profile and is used by services for processing messages. This can also be configured on models or services, in which case these configurations will be used instead of this default.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="java-interface-binding" type="pojoBindingType" substitutionGroup="scripting:script-additional-config">
        <xsd:annotation>
            <xsd:documentation>
                A binding associates a Mule endpoint with an injected Java interface (this is like using Spring to inject a bean, but instead of calling a method on the bean a message is sent to an endpoint). Script bindings will only work with Java-based scripting languages. Right now there is no validation on when languages support Java bindinngs because there are so many scripting languages.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="pojoBindingType">
        <xsd:sequence>
            <xsd:element ref="abstract-outbound-endpoint" minOccurs="1" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="interface" use="required" type="mule:substitutableClass">
            <xsd:annotation>
                <xsd:documentation>
                    The interface to be injected. A proxy will be created that implements this interface by calling out to the endpoint.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="method" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                    The method on the interface that should be used. This can be omitted if the interface has a single method.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:element name="set-session-variable" type="mule:setVariableType" substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                A transformer that adds session variables.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="remove-session-variable" type="mule:removeVariableType" substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                A transformer that remove session variables by name or regular expression.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="set-attachment" type="setAttachmentType" substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                A transformer that adds an attachment to the outbound scope.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="setAttachmentType">
        <xsd:complexContent>
            <xsd:extension base="mule:commonMessagePartTransformerType">
                <xsd:attribute name="attachmentName" type="mule:attributeType" use="required"/>
                <xsd:attribute name="value" type="mule:attributeType" use="required"/>
                <xsd:attribute name="contentType" type="mule:attributeType" use="required"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="remove-attachment" type="removeAttachmentType" substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                A transformer that removes an attachment in the outbound scope.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="removeAttachmentType">
        <xsd:complexContent>
            <xsd:extension base="mule:commonMessagePartTransformerType">
                <xsd:attribute name="attachmentName" type="mule:attributeType" use="required"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="copy-attachments" type="copyAttachmentType" substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                A transformer that copy inbound attachment to outbound attachment scope by name or regular expression.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="copyAttachmentType">
        <xsd:complexContent>
            <xsd:extension base="mule:commonMessagePartTransformerType">
                <xsd:attribute name="attachmentName" type="mule:attributeType" use="required"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="set-correlation-id" type="setCorrelationIdType" substitutionGroup="mule:abstract-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Sets the correlation ID of the current event/message. Replaces message-info-mapping.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="setCorrelationIdType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractMessageProcessorType">
                <xsd:attribute name="correlationId" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The value to be set on the correlation ID. Supports expressions.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!--==============================================================-->
    <!--   Endpoint elements                                          -->
    <!--==============================================================-->

    <xsd:element name="endpoint" type="globalEndpointType" substitutionGroup="mule:abstract-global-endpoint">
        <xsd:annotation>
            <xsd:documentation>
                A global endpoint, which acts as a template that can be used to construct an inbound or outbound endpoint elsewhere in the configuration by referencing the global endpoint name. Each transport implements its own endpoint element, with a more friendly syntax, but this generic element can be used with any transport by supplying the correct address URI. For example, "vm://foo" describes a VM transport endpoint.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="globalEndpointTypeWithoutExchangePattern">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractGlobalEndpointType">
                <xsd:group ref="defaultEndpointElements"/>
                <xsd:attributeGroup ref="defaultEndpointAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:complexType name="globalEndpointType">
        <xsd:complexContent>
            <xsd:extension base="globalEndpointTypeWithoutExchangePattern">
                <xsd:attributeGroup ref="allExchangePatterns"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <!-- extend this type for endpoints that support XA transactions -->
    <xsd:complexType name="globalEndpointWithXaType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractGlobalEndpointType">
                <xsd:group ref="defaultXaEndpointElements"/>
                <xsd:attributeGroup ref="defaultEndpointAttributes"/>
                <xsd:attributeGroup ref="allExchangePatterns"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="inbound-endpoint" type="inboundEndpointType" substitutionGroup="abstract-inbound-endpoint">
        <xsd:annotation>
            <xsd:documentation>
                An inbound endpoint receives messages via the associated transport. As with global endpoints, each transport implements its own inbound endpoint element.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="inboundEndpointTypeWithoutExchangePattern">
        <xsd:complexContent>
            <xsd:extension base="abstractInboundEndpointType">
                <xsd:group ref="defaultEndpointElements"/>
                <xsd:attributeGroup ref="defaultEndpointAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:complexType name="inboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="inboundEndpointTypeWithoutExchangePattern">
                <xsd:attributeGroup ref="allExchangePatterns"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <!-- extend this type for endpoints that support XA transactions -->
    <xsd:complexType name="inboundEndpointWithXaType">
        <xsd:complexContent>
            <xsd:extension base="abstractInboundEndpointType">
                <xsd:group ref="defaultXaEndpointElements"/>
                <xsd:attributeGroup ref="defaultEndpointAttributes"/>
                <xsd:attributeGroup ref="allExchangePatterns"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="outbound-endpoint" type="outboundEndpointType" substitutionGroup="abstract-outbound-endpoint">
        <xsd:annotation>
            <xsd:documentation>
                An outbound endpoint sends messages via the associated transport. As with global endpoints, each transport implements its own outbound endpoint element.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="outboundEndpointTypeWithoutExchangePattern">
        <xsd:complexContent>
            <xsd:extension base="abstractOutboundEndpointType">
                <xsd:group ref="defaultEndpointElements"/>
                <xsd:attributeGroup ref="defaultEndpointAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:complexType name="outboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="outboundEndpointTypeWithoutExchangePattern">
                <xsd:attributeGroup ref="allExchangePatterns"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:complexType name="outboundEndpointWithXaType">
        <xsd:complexContent>
            <xsd:extension base="abstractOutboundEndpointType">
                <xsd:group ref="defaultXaEndpointElements"/>
                <xsd:attributeGroup ref="allExchangePatterns"/>
                <xsd:attributeGroup ref="defaultEndpointAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="response">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:group ref="endpointMessageProcessorElements" minOccurs="1" maxOccurs="unbounded"/>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>

    <!-- these include option/repeats - should be embedded once -->
        <!-- these include option/repeats - should be embedded once -->
    <xsd:group name="commonDefaultEndpointElements">
        <xsd:sequence>
            <xsd:group ref="endpointMessageProcessorElements" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element ref="response" minOccurs="0"/>
            <xsd:element ref="mule:abstract-redelivery-policy" minOccurs="0"/>
            <xsd:element ref="mule:abstract-transaction" minOccurs="0"/>
        </xsd:sequence>
    </xsd:group>

    <xsd:group name="defaultEndpointElements">
        <xsd:sequence>
            <xsd:group ref="commonDefaultEndpointElements"/>
            <xsd:element ref="mule:abstract-reconnection-strategy" minOccurs="0"/>
            <xsd:element ref="mule:abstract-multi-transaction" minOccurs="0"/>
            <xsd:group ref="mule:propertiesGroup"/>
        </xsd:sequence>
    </xsd:group>

    <xsd:group name="defaultXaEndpointElements">
        <xsd:sequence>
            <xsd:group ref="commonDefaultEndpointElements"/>
            <xsd:element ref="mule:abstract-xa-transaction" minOccurs="0"/>
            <xsd:group ref="mule:propertiesGroup"/>
        </xsd:sequence>
    </xsd:group>

    <xsd:group name="endpointMessageProcessorElements">
        <xsd:choice>
            <xsd:element ref="mule:abstract-transformer" />
            <xsd:element ref="mule:abstract-filter" />
            <xsd:element ref="mule:abstract-security-filter"/>
            <xsd:element ref="mule:abstract-intercepting-message-processor"/>
            <xsd:element ref="mule:abstract-observer-message-processor"/>
            <xsd:element ref="mule:processor"/>
            <xsd:element ref="mule:custom-processor"/>
            <xsd:element ref="mule:abstract-mixed-content-message-processor"/>
        </xsd:choice>
    </xsd:group>

    <xsd:attributeGroup name="defaultEndpointAttributes">
        <xsd:attributeGroup ref="restrictedEndpointAttributes"/>
        <!-- these next two attributes are mutually exclusive and one is required.
             but there is no way to define this in a schema... -->
        <!-- endpoint references - dynamically checked to make sure not top level -->
        <xsd:attribute name="ref" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    A reference to a global endpoint, which is used as a template to construct this endpoint. A template fixes the address (protocol, path, host, etc.), and may specify initial values for various properties, but further properties can be defined locally (as long as they do not change the address in any way).
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <!-- explicit or global endpoints -->
        <xsd:attribute name="address" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    The generic address for this endpoint. If this attribute is used, the protocol must be specified as part of the URI. Alternatively, most transports provide their own attributes for specifying the address (path, host, etc.). Note that the address attribute cannot be combined with 'ref' or with the transport-provided alternative attributes.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:attributeGroup name="restrictedEndpointAttributes">
        <xsd:attributeGroup ref="mule:mimeTypeAttributes"/>
        <xsd:attribute name="responseTimeout" type="mule:substitutableInt">
            <xsd:annotation>
                <xsd:documentation>
                    The timeout for a response if making a synchronous endpoint call
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="encoding" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    String encoding used for messages.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="connector-ref" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    The name of the connector associated with this endpoint. This must be specified if more than one connector is defined for this transport.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="transformer-refs" type="xsd:NMTOKENS">
            <xsd:annotation>
                <xsd:documentation>
                    A list of the transformers that will be applied (in order) to the message before it is delivered to the component.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="responseTransformer-refs" type="xsd:NMTOKENS">
            <xsd:annotation>
                <xsd:documentation>
                    A list of the transformers that will be applied (in order) to the synchronous response before it is returned via the transport.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disableTransportTransformer" type="mule:substitutableBoolean" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                    Don't use the default inbound/outbound/response transformer which corresponds to this endpoint's transport, if any.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:complexType name="endpointRefType">
        <xsd:attribute name="address" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    The destination address for a reply message.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="ref" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    The reference name of a global endpoint to use. If this EndpointRef will be associated to a message such as a Reply-To address, this endpoint ref has to be available on the remote Mule instance that reads the Reply-To address.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:attributeGroup name="allExchangePatterns">
        <xsd:attribute name="exchange-pattern">
            <xsd:annotation>
                <xsd:documentation>
                </xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
                <xsd:restriction base="xsd:NMTOKEN">
                    <xsd:enumeration value="one-way"/>
                    <xsd:enumeration value="request-response"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
    </xsd:attributeGroup>
    <xsd:attributeGroup name="oneWayOnlyExchangePattern">
        <xsd:attribute name="exchange-pattern">
            <xsd:annotation>
                <xsd:documentation>
                </xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
                <xsd:restriction base="xsd:NMTOKEN">
                    <xsd:enumeration value="one-way"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:element name="default-exception-strategy" type="mule:serviceExceptionStrategyType">
        <xsd:annotation>
            <xsd:documentation>
                Provides default exception handling with endpoint routing.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <!-- Custom connector element -->

    <xsd:element name="custom-connector" type="customConnectorType" substitutionGroup="mule:abstract-connector">
        <xsd:annotation>
            <xsd:documentation>
                A user-defined connector.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="customConnectorType">
        <xsd:complexContent>
            <xsd:extension base="connectorType">
                <!-- This is already on the standard connector (but probably shouldn't be...)
                <xsd:sequence>
                    <xsd:element ref="spring:property" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                Spring-style property element for custom configuration.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                 -->
                <xsd:attribute name="class" type="mule:substitutableClass" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            A class that implements the Connector interface.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="recipient-list" substitutionGroup="mule:abstract-routing-message-processor">
        <xsd:annotation>
            <xsd:documentation>
                Sends the same message to multiple endpoints, over the same endpoint, or implements routing-slip behavior where the next destination for the message is determined from message properties or the payload. The recipients can be extracted from the message using an expression, or you can specify a static list of recipient endpoints. (As of version 2.1)
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="mule:abstractRoutingMessageProcessorType">
                    <xsd:attributeGroup ref="mule:expressionAttributes"/>
                    <!--  See MULE-5069 <xsd:attributeGroup ref="allExchangePatterns" />-->
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <!--==============================================================-->
    <!--   Connector support                                          -->
    <!--==============================================================-->

    <xsd:complexType name="connectorType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractConnectorType">
                <xsd:sequence>
                    <!-- for normal connectors, this is for emergency use only, but it is
                         critical for custom connector -->
                    <xsd:element ref="spring:property" minOccurs="0" maxOccurs="unbounded"/>
                    <xsd:element name="receiver-threading-profile" type="mule:threadingProfileType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                The threading profile to use when a connector receives messages.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="dispatcher-threading-profile" type="mule:threadingProfileType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                The threading profile to use when a connector dispatches messages.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element ref="mule:abstract-reconnection-strategy" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Reconnection strategy that defines how Mule should handle a connection failure.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="service-overrides" type="serviceOverridesType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Service overrides allow the connector to be further configured/customized by allowing parts of the transport implementation to be overridden, for example, the message receiver or dispatcher implementation, or the message adaptor that is used.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="dynamicNotification" type="mule:substitutableBoolean" default="false">
                    <xsd:annotation>
                        <xsd:documentation>
                            Enables dynamic notifications for notifications fired by this connector. This allows listeners to be registered dynamically at runtime via the MuleContext, and the configured notification can be changed. This overrides the default value defined in the 'configuration' element.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="validateConnections" type="mule:substitutableBoolean" default="true">
                    <xsd:annotation>
                        <xsd:documentation>
                            Causes Mule to validate connections before use. Note that this is only a configuration hint,
                            transport implementations may or may not make an extra effort to validate the connection. Default is true.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="dispatcherPoolFactory-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Allows Spring beans to be defined as a dispatcher pool factory
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="serviceOverridesType">
        <xsd:attribute name="messageReceiver" type="xsd:string"/>
        <xsd:attribute name="transactedMessageReceiver" type="xsd:string"/>
        <xsd:attribute name="xaTransactedMessageReceiver" type="xsd:string"/>
        <xsd:attribute name="dispatcherFactory" type="xsd:string"/>
        <xsd:attribute name="inboundTransformer" type="xsd:string"/>
        <xsd:attribute name="outboundTransformer" type="xsd:string"/>
        <xsd:attribute name="responseTransformer" type="xsd:string"/>
        <xsd:attribute name="endpointBuilder" type="xsd:string"/>
        <xsd:attribute name="messageFactory" type="xsd:string"/>
        <xsd:attribute name="serviceFinder" type="xsd:string"/>
        <xsd:attribute name="sessionHandler" type="xsd:string"/>
        <xsd:attribute name="inboundExchangePatterns" type="xsd:string"/>
        <xsd:attribute name="outboundExchangePatterns" type="xsd:string"/>
        <xsd:attribute name="defaultExchangePattern" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="transactedConnectorType">
        <xsd:complexContent>
            <xsd:extension base="connectorType">
                <xsd:attribute name="createMultipleTransactedReceivers" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether to create multiple concurrent receivers for this connector. This property is used by transports that support transactions, specifically receivers that extend the TransactedPollingMessageReceiver, and provides better throughput.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="numberOfConcurrentTransactedReceivers" type="mule:substitutableInt">
                    <xsd:annotation>
                        <xsd:documentation>
                            If createMultipleTransactedReceivers is set to true, the number of concurrent receivers that will be launched.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!--==============================================================-->
    <!--   JNDI support                                               -->
    <!--==============================================================-->

    <xsd:complexType name="jndiConnectorType">
        <xsd:complexContent>
            <xsd:extension base="connectorType">
                <xsd:sequence>
                    <xsd:element name="jndi-provider-property" type="mule:keyValueType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                Direct setting of a JNDI property.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="jndi-provider-properties" type="mule:mapType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Direct setting of JNDI properties (allows access to the full Spring map entry).
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="jndiContext-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Set the complete context directly, via a bean reference.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="jndiInitialFactory" type="mule:substitutableClass">
                    <xsd:annotation>
                        <xsd:documentation>
                            The initial context factory to use. The value of the property should be the fully qualified class name of the factory class that will create an initial context.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="jndiProviderUrl" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The service provider to use. The value of the property should contain a URL string (such as "ldap://somehost:389").
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="jndiUrlPkgPrefixes" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The list of package prefixes to use when loading in URL context factories. The value of the property should be a colon-separated list of package prefixes for the class name of the factory class that will create a URL context factory.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- Scripting -->
    
    <xsd:element name="component" type="defaultJavaWithBindingsComponentType" substitutionGroup="mule:abstract-component">
        <xsd:annotation>
            <xsd:documentation>
                A simple POJO (Plain Old Java Object) component that will be invoked by Mule when a message is received. The class or object instance to be used can be specified using a child object factory element, or via the 'class' attribute.  If the 'class' attribute is used, an object factory cannot be configured as well. Using the 'class' attribute is equivilant to using the propotype object factory ('prototype-object' child element).
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="defaultJavaWithBindingsComponentType">
        <xsd:complexContent>
            <xsd:extension base="mule:defaultJavaComponentType">
                <xsd:sequence>
                    <xsd:element name="binding" type="pojoBindingType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                A binding associates a Mule endpoint with an injected Java interface. This is like using Spring to inject a bean, but instead of calling a method on the bean, a message is sent to an endpoint.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="pooled-component" type="pooledJavaWithBindingsComponentType" substitutionGroup="mule:abstract-component">
        <xsd:annotation>
            <xsd:documentation>
                A pooled POJO (Plain Old Java Object) component that will be invoked by Mule when a message is received. The instance can be specified via a factory or a class.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="pooledJavaWithBindingsComponentType">
        <xsd:complexContent>
            <xsd:extension base="mule:defaultJavaComponentType">
                <xsd:sequence>
                    <xsd:element name="binding" type="pojoBindingType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                A binding associates a Mule endpoint with an injected Java interface. This is like using Spring to inject a bean, but instead of calling a method on the bean, a message is sent to an endpoint.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element ref="mule:abstract-pooling-profile" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>Characteristics of the object pool.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- Security -->
    <xsd:element name="http-security-filter" type="httpSecurityFilterType" substitutionGroup="mule:abstract-security-filter">
        <xsd:annotation>
            <xsd:documentation>
                Authenticate users via information in standard HTTP headers. Deprecated. Use http:basic-security-filter instead.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="httpSecurityFilterType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractSecurityFilterType">
                <xsd:attribute name="securityManager-ref" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>
                            A reference to the security manager. If not specified uses the default one.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="realm" type="xsd:string" use="required"/>
                <xsd:attribute name="securityProviders" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The delegate-security-provider to use for authenticating. Use this element
                            in case you have multiple security managers defined in your configuration.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- HTTP -->
    
    <xsd:element name="config" type="httpConfigType" substitutionGroup="mule:abstract-configuration-extension">
        <xsd:annotation>
            <xsd:documentation>
                HTTP global configuration
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="httpConfigType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractConfigurationExtensionType">
                <xsd:attribute name="useTransportForUris" type="mule:substitutableBoolean" default="false">
                    <xsd:annotation>
                        <xsd:documentation>
                            Backwards Compatabilty Flag: Since Mule 3.6, default HTTP URIs are resolved with the new HTTP connector (for example when using MuleClient). If set to true, this behavior is changed so that the HTTP transport is used.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- CXF -->
   
    <xsd:element name="jaxws-service" type="jaxWsServiceType" substitutionGroup="mule:abstract-intercepting-message-processor"/>
    <xsd:complexType name="jaxWsServiceType">
        <xsd:complexContent>
            <xsd:extension base="mule-cxf:webServiceType">
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    
    <xsd:element name="proxy-service" type="proxyServiceType" substitutionGroup="mule:abstract-intercepting-message-processor"/>
    <xsd:complexType name="proxyServiceType">
        <xsd:complexContent>
            <xsd:extension base="mule-cxf:webServiceType">
                <xsd:attributeGroup ref="mule-cxf:proxyAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <xsd:element name="simple-client" type="simpleClientTypeWithDecoupledEndpoint" substitutionGroup="mule:abstract-intercepting-message-processor"/>

    <xsd:complexType name="simpleClientTypeWithDecoupledEndpoint">
        <xsd:complexContent>
            <xsd:extension base="mule-cxf:simpleClientType">
                <xsd:attribute name="decoupledEndpoint" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The reply to endpoint for clients which have WS-Addressing enabled. 
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="jaxws-client" type="jaxwsClientTypeWithDecoupledEndpoint" substitutionGroup="mule:abstract-intercepting-message-processor"/>

    <xsd:complexType name="jaxwsClientTypeWithDecoupledEndpoint">
        <xsd:complexContent>
            <xsd:extension base="mule-cxf:jaxwsClientType">
                <xsd:attribute name="decoupledEndpoint" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The reply to endpoint for clients which have WS-Addressing enabled. 
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="proxy-client" type="proxyClientTypeWithDecoupledEndpoint" substitutionGroup="mule:abstract-intercepting-message-processor"/>

    <xsd:complexType name="proxyClientTypeWithDecoupledEndpoint">
        <xsd:complexContent>
            <xsd:extension base="mule-cxf:proxyClientType">
                <xsd:attribute name="decoupledEndpoint" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The reply to endpoint for clients which have WS-Addressing enabled. 
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <xsd:element name="wrapper-component" type="wrapperComponentType" substitutionGroup="mule:abstract-component">
        <xsd:annotation>
            <xsd:documentation>
                The WebServiceWrapperComponent class allows you to send the result of a web service call to another endpoint. 
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="wrapperComponentType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractComponentType">
                <xsd:attribute name="address" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The URL of the web service.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="addressFromMessage" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Specifies that the URL of the web service will be obtained from the message itself.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="wsdlPort" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The WSDL port you want to use to communicate to the service.
                         </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="operation" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The operation you want to invoke on the outbound endpoint.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- Management -->
    <xsd:element name="jmx-default-config" type="management:jmxDefaultConfigType" substitutionGroup="mule:abstract-agent"/>

    <xsd:element name="publish-notifications" type="publishNotificationType" substitutionGroup="mule:abstract-agent"/>
    <xsd:complexType name="publishNotificationType">
        <xsd:complexContent>
            <xsd:extension base="management:notificationLoggerAgentType">
                <xsd:sequence>
                    <xsd:element ref="abstract-outbound-endpoint" minOccurs="0" maxOccurs="1"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
</xsd:schema>