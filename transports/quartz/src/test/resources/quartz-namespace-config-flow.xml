<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:spring="http://www.springframework.org/schema/beans"
    xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz"
    xmlns:test="http://www.mulesoft.org/schema/mule/test"
    xsi:schemaLocation="
       http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
       http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
       http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd">

    <!-- Default config -->
    <quartz:connector name="quartzConnectorDefaults" />

    <!-- Inject the scheduler as a bean. -->
    <quartz:connector name="quartzConnector1"
        scheduler-ref="myScheduler" />

    <spring:bean id="myScheduler" factory-bean="mySchedulerFactory"
        factory-method="getScheduler" />

    <spring:bean id="mySchedulerFactory" class="org.quartz.impl.StdSchedulerFactory">
        <spring:constructor-arg>
            <spring:props>
                <spring:prop key="org.quartz.scheduler.instanceName">MuleScheduler1
                </spring:prop>
                <spring:prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool
                </spring:prop>
                <spring:prop key="org.quartz.threadPool.threadCount">3</spring:prop>
                <spring:prop key="org.quartz.scheduler.rmi.export">false</spring:prop>
                <spring:prop key="org.quartz.scheduler.rmi.proxy">false</spring:prop>
                <spring:prop key="org.quartz.jobStore.class">org.quartz.simpl.RAMJobStore
                </spring:prop>
            </spring:props>
        </spring:constructor-arg>
    </spring:bean>

    <!-- Default config but provide some factory properties. -->
    <quartz:connector name="quartzConnector2">
        <quartz:factory-property key="org.quartz.scheduler.instanceName"
            value="MuleScheduler2" />
        <quartz:factory-property key="org.quartz.threadPool.class"
            value="org.quartz.simpl.SimpleThreadPool" />
        <quartz:factory-property key="org.quartz.threadPool.threadCount"
            value="3" />
        <quartz:factory-property key="org.quartz.scheduler.rmi.export"
            value="false" />
        <quartz:factory-property key="org.quartz.scheduler.rmi.proxy"
            value="false" />
        <quartz:factory-property key="org.quartz.jobStore.class"
            value="org.quartz.simpl.RAMJobStore" />
    </quartz:connector>

    <endpoint name="scheduledDispatchEndpoint" address="vm://bar"
        exchange-pattern="one-way" />

    <spring:bean name="custJob"
        class="org.mule.transport.quartz.jobs.EventGeneratorJob" />


    <!--// START SNIPPET: example-1 -->
    <flow name="testService1">
        <description>
            This configuration will create an inbound event for testService1 at 12
            noon every day. The event payload
            will always have the same value 'foo'.
            </description>


        <quartz:inbound-endpoint name="qEP1"
            cronExpression="0 0 12 * * ?" jobName="job1" connector-ref="quartzConnector1">
            <quartz:event-generator-job>
                <quartz:payload>foo</quartz:payload>
            </quartz:event-generator-job>
        </quartz:inbound-endpoint>
        
        <test:component />

    </flow>
    <!--// END SNIPPET: example-1 -->

    <flow name="testService1Timezone">
        <description>
            This configuration will create an inbound event for testService1 at 12
            noon in "America/Argentina/Buenos_Aires" TZ every day. The event payload
            will always have the same value 'foo'.
            </description>


        <quartz:inbound-endpoint name="qEP1b"
            cronExpression="0 0 12 * * ?" cronTimeZone="America/Argentina/Buenos_Aires" jobName="job1b" connector-ref="quartzConnector1">
            <quartz:event-generator-job>
                <quartz:payload>foo</quartz:payload>
            </quartz:event-generator-job>
        </quartz:inbound-endpoint>
        
        <test:component />

    </flow>

    <!--// START SNIPPET: example-2 -->
    <flow name="testService2">
        <description>
            This configuration will create an inbound event for testService2 every 1
            second indefinitely. The event
            payload
            will always have the same value, which the contents of the file
            'payload-data.txt'. The file can be on
            the classpath of on the local file system.
            </description>

        <quartz:inbound-endpoint name="qEP2"
            repeatCount="10" repeatInterval="1000" jobName="job2"
            connector-ref="quartzConnector1">
            <quartz:event-generator-job>
                <quartz:payload file="payload-data.txt" />
            </quartz:event-generator-job>
        </quartz:inbound-endpoint>
        
        <test:component />

    </flow>
    <!--// END SNIPPET: example-2 -->

    <!--// START SNIPPET: example-3 -->
    <flow name="testService3">
        <description>
            This configuration will process a message and find a Job configured as a
            header called 'jobConfig' on
            the current message. We're using the test component here, but a real
            implementation will need to set a
            custom {{org.quartz.Job}}
            implementation as a header on the current message.
            Note that other expressions could be used to extract the job from an
            attachment or even a property
            within the payload itself.
            </description>

        <inbound-endpoint address="test://inbound3"
            exchange-pattern="one-way" />

        <test:component />

        <quartz:outbound-endpoint name="qEP3"
            repeatInterval="1000" jobName="job3" connector-ref="quartzConnector1">
            <quartz:custom-job-from-message
                evaluator="header" expression="jobConfig" />
        </quartz:outbound-endpoint>

    </flow>
    <!--// END SNIPPET: example-3 -->

    <!--// START SNIPPET: example-4 -->
    <flow name="testService4">
        <description>
            This configuration will store the outbound event in the local event store
            (this can be a database). Then
            on the 1st November at 8am the Job will be triggered and the custom job
            will get invoked. Notice that
            the repeatCount is set to 0, this mean the even will only happen once.
            If you wanted to fire an even
            every year at this time for the next 3 years then set the 'repeatCount' to
            2.
            The 'job-ref' refers to a bean configured inside the XML.
            </description>

        <inbound-endpoint address="test://inbound4"
            exchange-pattern="one-way" />

        <test:component />

        <quartz:outbound-endpoint name="qEP4"
            repeatCount="0" cronExpression="0 11 1 8 * ?" jobName="job4"
            connector-ref="quartzConnector1">
            <quartz:custom-job job-ref="custJob" />
        </quartz:outbound-endpoint>

    </flow>
    <!--// END SNIPPET: example-4 -->

    <!--// START SNIPPET: example-5 -->
    <flow name="testService5">
        <description>
            The endpoint polling Job will try and perform a 'request' on any Mule
            endpoint. If a result is received
            it will be handed off to this 'testService5' service for processing.
            The trigger will fire every 5 minutes starting at 2pm and
            ending at 2:55pm, every day. during this
            period the job will check the file directory /N/drop-data/in every 5
            minutes to see if any event data is
            available. The request will timeout after 4 seconds if there are no files in
            the directory.
            </description>


        <quartz:inbound-endpoint name="qEP5"
            cronExpression="0 0/5 14 * * ?" jobName="job5"
            connector-ref="quartzConnector1">
            <quartz:endpoint-polling-job>
                <quartz:job-endpoint address="file:///N/drop-data/in"
                    timeout="4000" />
            </quartz:endpoint-polling-job>
        </quartz:inbound-endpoint>
        
        <test:component />


    </flow>
    <!--// END SNIPPET: example-5 -->

    <!--// START SNIPPET: example-6 -->
    <flow name="testService6">
        <description>
            This outbound Quartz endpoint will receive an event after the component
            has processed it and store it in
            the event store. When the trigger kicks in at 10:15am everyday it will
            dispatch the event on the
            endpoint referenced as 'scheduledDispatchEndpoint'. Since the 'repeatCount'
            is set to 0, the event will
            only be sent out once.
            </description>

        <inbound-endpoint address="test://inbound6"
            exchange-pattern="one-way" />

        <test:component />

        <quartz:outbound-endpoint name="qEP6"
            repeatCount="0" cronExpression="0 15 10 * * ? *" jobName="job6"
            connector-ref="quartzConnector1">
            <quartz:scheduled-dispatch-job>
                <quartz:job-endpoint ref="scheduledDispatchEndpoint" />
            </quartz:scheduled-dispatch-job>
        </quartz:outbound-endpoint>

    </flow>
    <!--// END SNIPPET: example-6 -->

</mule>
