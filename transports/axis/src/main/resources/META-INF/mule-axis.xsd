<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns="http://www.mulesoft.org/schema/mule/axis"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
    xmlns:mule="http://www.mulesoft.org/schema/mule/core"
    xmlns:schemadoc="http://www.mulesoft.org/schema/mule/schemadoc"
    targetNamespace="http://www.mulesoft.org/schema/mule/axis"
    elementFormDefault="qualified"
    attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/core"
                schemaLocation="http://www.mulesoft.org/schema/mule/core/3.9/mule.xsd" />
        <xsd:import namespace = "http://www.mulesoft.org/schema/mule/schemadoc"
                schemaLocation = "http://www.mulesoft.org/schema/mule/schemadoc/3.9/mule-schemadoc.xsd"/>

    <xsd:annotation>
            <xsd:documentation>The Axis transport allows Mule managed components to be published as Axis services and allows components to invoke web services using Axis client calls.  
            </xsd:documentation>
            <xsd:appinfo>
                <schemadoc:short-name>Axis</schemadoc:short-name>
                <schemadoc:page-title>Axis Transport</schemadoc:page-title>
                <schemadoc:transport-features receiveEvents="true" dispatchEvents="true"
                            requestEvents="true" transactions="false" streaming="false">
                    <schemadoc:MEPs supported="one-way, request-response" default="request-response"/>
                </schemadoc:transport-features>
            </xsd:appinfo>
    </xsd:annotation>
    <xsd:element name="connector" type="axisConnectorType" substitutionGroup="mule:abstract-connector">
        <xsd:annotation>
            <xsd:documentation>
                The Axis connector consumes and provides web services via Axis. It supports all the [common connector attributes and properties|Configuring a Transport#commonConfig] as well as the following additional attributes: 
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="axisConnectorType">
        <xsd:complexContent>        
            <xsd:extension base="mule:connectorType">
                <xsd:sequence>
                    <xsd:element ref="bean-type" minOccurs="0" maxOccurs="unbounded"/>
                    <xsd:element name="supported-scheme" type="mule:valueType" minOccurs="0" maxOccurs="unbounded" />
                </xsd:sequence>
                <xsd:attribute name="axis-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Bean reference to the Axis server.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="clientConfig" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Configuration file to use when building the Axis client.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="clientProvider-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Bean reference to the client provider to use for creating the Axis client.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="doAutoTypes" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Use this property to configure whether the Axis server should automatically map types. This property only takes effect if you do not provide your own Axis server via the axis-ref property.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="serverConfig" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Configuration file to use when building the Axis server.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="serverProvider-ref" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Bean reference to the server provider that should be used to create the Axis server.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="treatMapAsNamedParams" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            The Axis connector treats a Map as a container for named parameters and unpacks them from the map. If your exposed service needs to take a Map as a parameter, set this property to false to prevent the connector from unpacking the Map. 
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="inbound-endpoint" type="inboundEndpointType" substitutionGroup="mule:abstract-inbound-endpoint"/>
    <xsd:complexType name="inboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractInboundEndpointType">
                <xsd:sequence>
                    <xsd:group ref="inboundPropertyElements"/>
                    <xsd:group ref="generalPropertyElements"/>
                    <xsd:group ref="mule:defaultEndpointElements"/>
                </xsd:sequence>
                <xsd:attributeGroup ref="inboundPropertyAttributes"/>
                <xsd:attributeGroup ref="generalPropertyAttributes"/>
                <xsd:attributeGroup ref="mule:allExchangePatterns"/>
                <xsd:attributeGroup ref="mule:defaultEndpointAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="outbound-endpoint" type="outboundEndpointType" substitutionGroup="mule:abstract-outbound-endpoint"/>
    <xsd:complexType name="outboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractOutboundEndpointType">
                <xsd:sequence>
                    <xsd:group ref="generalPropertyElements"/>
                    <xsd:group ref="mule:defaultEndpointElements"/>
                </xsd:sequence>
                <xsd:attributeGroup ref="generalPropertyAttributes"/>
                <xsd:attributeGroup ref="mule:allExchangePatterns"/>
                <xsd:attributeGroup ref="mule:defaultEndpointAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="endpoint" type="globalEndpointType" substitutionGroup="mule:abstract-global-endpoint"/>
    <xsd:complexType name="globalEndpointType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractGlobalEndpointType">
                <xsd:sequence>
                    <xsd:group ref="inboundPropertyElements"/>
                    <xsd:group ref="generalPropertyElements"/>
                    <xsd:group ref="mule:defaultEndpointElements"/>
                </xsd:sequence>
                <xsd:attributeGroup ref="inboundPropertyAttributes"/>
                <xsd:attributeGroup ref="generalPropertyAttributes"/>
                <xsd:attributeGroup ref="mule:allExchangePatterns"/>
                <xsd:attributeGroup ref="mule:defaultEndpointAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:attributeGroup name="inboundPropertyAttributes">
        <xsd:attribute name="wsdlFile" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                The location of a WSDL document to use for this service if you do not want the WSDL document autogenerated.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:attributeGroup name="generalPropertyAttributes">
        <xsd:attribute name="clientConfig" type="xsd:string"/>
        <xsd:attribute name="soapAction" type="xsd:string"/>
        <xsd:attribute name="SOAPAction" type="xsd:string"/>
        <xsd:attribute name="serviceNamespace" type="xsd:string"/>
        <xsd:attribute name="style" type="styleType">
            <xsd:annotation>
                <xsd:documentation>
                Specifies the [SOAP binding style|Axis SOAP Styles]: RPC (default), DOCUMENT, MESSAGE, or WRAPPED.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="use" type="useType">
            <xsd:annotation>
                <xsd:documentation>
                Specifies the [SOAP binding use|Axis SOAP Styles]: ENCODED (default) or LITERAL.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:group name="inboundPropertyElements">
        <xsd:sequence>
            <xsd:element name="options" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                    Allows you to set optional SOAP settings as attributes: allowedMethods, scope, wsdlPortType, wsdlServicePort, wsdlServiceElement, wsdlTargetNamespace, wsdlInputSchema, wsdlSoapActionMode, and extraClasses.
                    </xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="option" type="mule:keyValueType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                    <xsd:attribute name="allowedMethods" type="xsd:string"/>
                    <xsd:attribute name="scope" type="xsd:string"/>
                    <xsd:attribute name="wsdlPortType" type="xsd:string"/>
                    <xsd:attribute name="wsdlServicePort" type="xsd:string"/>
                    <xsd:attribute name="wsdlServiceElement" type="xsd:string"/>
                    <xsd:attribute name="wsdlTargetNamespace" type="xsd:string"/>
                    <xsd:attribute name="wsdlInputSchema" type="xsd:string"/>
                    <xsd:attribute name="wsdlSoapActionMode" type="xsd:string"/>
                    <xsd:attribute name="extraClasses" type="xsd:string"/>
                </xsd:complexType>
            </xsd:element>
            <xsd:element ref="bean-type" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:group>

    <xsd:group name="generalPropertyElements">
        <xsd:sequence>
            <xsd:element name="soap-service" minOccurs="0" maxOccurs="unbounded">
                <xsd:complexType>
                    <xsd:attribute name="interface" type="xsd:string"/>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="soap-method" type="soapMethodType"  minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        Allows you to specify a SOAP method and optionally parameters and a return. The parameter mode can be IN, OUT, or INOUT. 
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>    
        </xsd:sequence>
    </xsd:group>
    
    <xsd:complexType name="soapMethodType">
        <xsd:sequence>
            <xsd:element name="soap-parameter" minOccurs="0" maxOccurs="unbounded">
                <xsd:complexType>
                    <xsd:attribute name="parameter" type="xsd:string" use="required" />
                    <xsd:attribute name="type" type="xsd:string" use="required" />
                    <xsd:attribute name="mode">
                        <xsd:simpleType>
                            <xsd:restriction base="xsd:NMTOKEN">
                                <xsd:enumeration value="IN" />
                                <xsd:enumeration value="OUT" />
                                <xsd:enumeration value="INOUT" />
                            </xsd:restriction>
                        </xsd:simpleType>
                    </xsd:attribute>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="soap-return" minOccurs="0">
                <xsd:complexType>
                    <xsd:attribute name="type" type="xsd:string" use="required" />
                </xsd:complexType>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="method" type="xsd:string" use="required" />
    </xsd:complexType>

    <xsd:element name="bean-type">
        <xsd:complexType>
            <xsd:attribute name="interface" type="xsd:string"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="wrapper-component" type="wrapperComponentType" substitutionGroup="mule:abstract-component">
        <xsd:annotation>
            <xsd:documentation>
                The WebServiceWrapperComponent class allows you to send the result of a web service call to another endpoint. For example:
                {code:xml}
                &lt;axis:wrapper-component address="http://localhost:65081/services/TestUMO?method=receive" style="WRAPPED" use="LITERAL" /&gt; 
                {code}
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="wrapperComponentType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractComponentType">
                <xsd:sequence>
                    <xsd:element name="soap-method" type="soapMethodType"  minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                            Allows you to specify a SOAP method and optionally parameters and a return. The parameter mode can be IN, OUT, or INOUT. 
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>    
                </xsd:sequence>
                <xsd:attribute name="address" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Specifies the URL of the web service to call.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="addressFromMessage" type="xsd:boolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Specifies that the URL of the web service will be obtained from the message itself.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="style" type="styleType">
                    <xsd:annotation>
                        <xsd:documentation>
                        Specifies the [SOAP binding style|Axis SOAP Styles]: RPC (default), DOCUMENT, MESSAGE, or WRAPPED.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="use" type="useType">
                    <xsd:annotation>
                        <xsd:documentation>
                        Specifies the [SOAP binding use|Axis SOAP Styles]: ENCODED (default) or LITERAL.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:simpleType name="styleType">
        <xsd:restriction base="xsd:NMTOKEN">
            <!-- see org.apache.axis.constants.Style -->
            <xsd:enumeration value="RPC" />
            <xsd:enumeration value="DOCUMENT" />
            <xsd:enumeration value="MESSAGE" />
            <xsd:enumeration value="WRAPPED" />
        </xsd:restriction>
    </xsd:simpleType>
    
    <xsd:simpleType name="useType">
        <xsd:restriction base="xsd:NMTOKEN">
            <xsd:enumeration value="ENCODED" />
            <xsd:enumeration value="LITERAL" />
        </xsd:restriction>
    </xsd:simpleType>
</xsd:schema>
