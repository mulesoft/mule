<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns="http://www.mulesoft.org/schema/mule/transport/file"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:mule="http://www.mulesoft.org/schema/mule/core"
            xmlns:transports="http://www.mulesoft.org/schema/mule/transports"
            xmlns:schemadoc="http://www.mulesoft.org/schema/mule/schemadoc"
            targetNamespace="http://www.mulesoft.org/schema/mule/transport/file"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/core"
                schemaLocation="http://www.mulesoft.org/schema/mule/core/current/mule.xsd"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/transports"
                schemaLocation="http://www.mulesoft.org/schema/mule/transports/current/mule-transports.xsd" />
    <xsd:import namespace = "http://www.mulesoft.org/schema/mule/schemadoc"
                schemaLocation = "http://www.mulesoft.org/schema/mule/schemadoc/current/mule-schemadoc.xsd"/>

    <xsd:annotation>
        <xsd:documentation>
            The File transport allows files to be read and written to and from directories on the local file system. The connector can be configured to filter the file it reads and the way files are written, such as whether binary output is used or the file is appended.
        </xsd:documentation>
        <xsd:appinfo>
            <schemadoc:short-name>File</schemadoc:short-name>
            <schemadoc:page-title>File Transport</schemadoc:page-title>
            <schemadoc:additional-documentation where="before-specific-elements">
                h2. Filename Parsers

                The filenameParser is set on the connector used when writing files to a directory. The parser will convert the outputPattern attribute to a string using the parser and the current message.
            </schemadoc:additional-documentation>
            <schemadoc:transport-features receiveEvents="true" dispatchEvents="true"
                                          requestEvents="true"
                                          transactions="false" streaming="true">
                <schemadoc:MEPs supported="one-way" default="one-way"/>
            </schemadoc:transport-features>
        </xsd:appinfo>
    </xsd:annotation>

    <xsd:element name="connector" type="fileConnectorType" substitutionGroup="mule:abstract-connector">
        <xsd:annotation>
            <xsd:documentation>
                The File connector configures the default behavior for File endpoints that reference the connector. If there is only one File connector configured, all file endpoints will use that connector.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="fileConnectorType">
        <xsd:complexContent>
            <xsd:extension base="transports:connectorType">
                <xsd:sequence minOccurs="0" maxOccurs="1">
                    <xsd:element ref="abstract-filenameParser"/>
                </xsd:sequence>
                <xsd:attributeGroup ref="inboundAttributes"/>
                <xsd:attributeGroup ref="outboundAttributes"/>
                <xsd:attribute name="writeToDirectory" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The directory path where the file should be written on dispatch. This path is usually set as the endpoint of the dispatch event, however this allows you to explicitly force a single directory for the connector.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="readFromDirectory" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The directory path where the file should be read from. This path is usually set as the inbound endpoint, however this allows you to explicitly force a single directory for the connector.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="autoDelete" type="mule:substitutableBoolean" default="true">
                    <xsd:annotation>
                        <xsd:documentation>
                            If set to true (the default), it will cause the file to be deleted once it is read. If streaming is turned on, this occurs when the InputStream for the file is closed. Otherwise the file will be read into memory and deleted immediately.
                            
                            To access the java.io.File object set this property to false and specify a NoActionTransformer transformer for the connector. Mule will not delete the file, so it is up to the component to delete it when it is done. If the moveToDirectory is set, the file is first moved, then the File object of the moved file is passed to the component. It is recommended that a moveToDirectory is specified when turning autoDelete off.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="outputAppend" type="mule:substitutableBoolean" default="false">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether the output should be appended to the existing file. Default is false.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="serialiseObjects" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Determines whether objects should be serialized to the file. If false (the default), the raw bytes or text is written.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="streaming" type="mule:substitutableBoolean" default="true">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether a FileInputStream should be sent as the message payload (if true) or a byte array. (if false). The default is true.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="workDirectory" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            (As of Mule 2.1.4) The directory path where the file should be moved to prior to processing. The work directory must reside on the same file system as the read directory.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="workFileNamePattern" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            (As of Mule 2.1.4) The pattern to use when moving a file to a new location determined by the workDirectory property. You can use the patterns supported by the filename parser configured for this connector.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="recursive" type="mule:substitutableBoolean" default="false">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether to recurse or not when a directory is read
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="file-to-byte-array-transformer" type="mule:abstractTransformerType"
                 substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                The file-to-byte-array-transformer element configures a transformer that reads the contents of a java.io.File into a byte array (byte[]).</xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="file-to-string-transformer" type="mule:abstractTransformerType"
                 substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                The file-to-string-transformer element configures a transformer that reads the contents of a java.io.File into a java.lang.String.</xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="filename-wildcard-filter" type="mule:wildcardFilterType"
                 substitutionGroup="mule:abstract-filter">
        <xsd:annotation>
            <xsd:documentation>
                The filename-wildcard-filter element configures a filter that can be used to restrict the files being processed by applying wildcard expressions to the filename. For example, you can read only .xml and .txt files by entering the following: &lt;file:filename-wildcard-filter pattern="*.txt,*.xml"/&gt;
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="filename-regex-filter" type="mule:wildcardFilterType"
                 substitutionGroup="mule:abstract-filter">
        <xsd:annotation>
            <xsd:documentation>
                The filename-regex-filter element configures a filter that can be used to restrict the files being processed by applying Java regular expressions to the filename, such as pattern="myCustomerFile(.*)".
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="inbound-endpoint" type="inboundEndpointType" substitutionGroup="transports:abstract-inbound-endpoint"/>
    <xsd:complexType name="inboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="transports:inboundEndpointTypeWithoutExchangePattern">
                <xsd:attributeGroup ref="addressAttributes"/>
                <xsd:attributeGroup ref="inboundAttributes"/>
                <xsd:attributeGroup ref="inboundEndpointAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="outbound-endpoint" type="outboundEndpointType"
                 substitutionGroup="transports:abstract-outbound-endpoint"/>
    <xsd:complexType name="outboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="transports:outboundEndpointTypeWithoutExchangePattern">
                <xsd:attributeGroup ref="addressAttributes"/>
                <xsd:attributeGroup ref="outboundAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="endpoint" type="globalEndpointType" substitutionGroup="mule:abstract-global-endpoint"/>
    <xsd:complexType name="globalEndpointType">
        <xsd:complexContent>
            <xsd:extension base="transports:globalEndpointTypeWithoutExchangePattern">
                <xsd:attributeGroup ref="addressAttributes"/>
                <xsd:attributeGroup ref="inboundAttributes"/>
                <xsd:attributeGroup ref="inboundEndpointAttributes"/>
                <xsd:attributeGroup ref="outboundAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="filenameParserType">
        <xsd:annotation>
            <xsd:documentation>
                The filenameParser is used when writing files to a directory. The parser will convert the outputPattern attribute to a string using the parser and the current message. The default implmentation used is SimpleFilenameParser.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:complexType>

    <xsd:attributeGroup name="inboundAttributes">
        <xsd:attribute name="pollingFrequency" type="mule:substitutableLong">
            <xsd:annotation>
                <xsd:documentation>
                    The frequency in milliseconds that the read directory should be checked (default is 0). Note that the read directory is specified by the endpoint of the listening component.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fileAge" type="mule:substitutableLong">
            <xsd:annotation>
                <xsd:documentation>
                    Miniumum age (ms) for a file to be processed. This can be useful when consuming large files. It tells Mule to wait for a period of time before consuming the file, allowing the file to be completely written before the file is processed.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="moveToPattern" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    The pattern to use when moving a read file to a new location determined by the moveToDirectory property. This can use the patterns supported by the filename parser configured for this connector.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="moveToDirectory" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    The directory path where the file should be written after it has been read. If this is not set, the file is deleted after it has been read.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:attributeGroup name="inboundEndpointAttributes">
            <xsd:attribute name="comparator" type="mule:substitutableClass">
            <xsd:annotation>
                <xsd:documentation>
                    Sorts incoming files using the specified comparator, such as comparator="org.mule.compatibility.transport.file.comparator.OlderFirstComparator". The class must implement the java.util.Comparator interface.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="reverseOrder" type="mule:substitutableBoolean">
            <xsd:annotation>
                <xsd:documentation>
                    Whether the comparator order should be reversed. Default is false.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:attributeGroup name="outboundAttributes">
        <xsd:attribute name="outputPattern" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    The pattern to use when writing a file to disk. This can use the patterns supported by the filename parser configured for this connector.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:attributeGroup name="addressAttributes">
        <xsd:attribute name="path" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    A file directory location.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:element name="expression-filename-parser" type="expressionFilenameParserType"
                 substitutionGroup="abstract-filenameParser">
        <xsd:annotation>
            <xsd:documentation>
                The expression-filename-parser element configures the ExpressionFilenameParser, which can use any expression language supported by Mule to construct a file name for the current message. Expressions can be xpath, xquery, mvel, header, function, and more.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="expressionFilenameParserType">
        <xsd:complexContent>
            <xsd:extension base="filenameParserType"/>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="custom-filename-parser" type="customFilenameParserType"
                 substitutionGroup="abstract-filenameParser">
        <xsd:annotation>
            <xsd:documentation>
                The custom-filename-parser element allows the user to specify a custom filename parser. The implementation must implement org.mule.compatibility.transport.file.FilenameParser.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    
    <xsd:complexType name="customFilenameParserType">
        <xsd:complexContent>
            <xsd:extension base="filenameParserType">
                <xsd:attribute name="class" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation>
                            The implementation class name that implements org.mule.compatibility.transport.file.FilenameParser.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="abstract-filenameParser" abstract="true" type="filenameParserType">
        <xsd:annotation>
            <xsd:documentation>
                The abstract-filenameParser element is a placeholder for filename parser elements. The filename parser is set on the connector used when writing files to a directory. The parser will convert the outputPattern attribute to a string using the parser and the current message. The default implmentation used is expression-filename-parser, but you can also specify a custom-filename-parser. 
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
</xsd:schema>
